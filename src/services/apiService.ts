// ==================== –ò–ù–¢–ï–†–§–ï–ô–°–´ ====================

export interface Product {
  id: string;
  article: string;
  brand: string;
  name: string;
  sizes: string[];
  category: string;
  gender: string;
  price: number;
  stockQuantity: number;
  availableStock: number;
  mainPhoto: string;
  additionalPhotos: string[];
  isActive: boolean;
  slug: string;
  createdAt?: string;
  updatedAt?: string;
}

export interface OrderItem {
  productId: string;
  size: string;
  quantity: number;
  priceAtTime: number;
}

export interface CreateOrderData {
  customerInfo: {
    name: string;
    phone: string;
    email?: string;
  };
  items: OrderItem[];
  totalAmount: number;
  deliveryAddress?: string;
  notes?: string;
}

export interface CreateOrderResponse {
  success: boolean;
  orderId?: string;
  error?: string;
  processedItems?: number;
  totalItems?: number;
}

// ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
 */
export const getProducts = async (filters?: {
  category?: string;
  brand?: string;
  gender?: string;
  limit?: number;
}): Promise<Product[]> => {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ API...');
    
    // –°—Ç—Ä–æ–∏–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const params = new URLSearchParams();
    if (filters?.category) params.append('category', filters.category);
    if (filters?.brand) params.append('brand', filters.brand);
    if (filters?.gender) params.append('gender', filters.gender);
    if (filters?.limit) params.append('limit', filters.limit.toString());
    
    const url = `/api/products${params.toString() ? `?${params.toString()}` : ''}`;
    
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    const products = data.products || [];
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API`);
    return products;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API:', error);
    throw error;
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
 */
export const getProductById = async (id: string): Promise<Product | null> => {
  try {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä ${id} —á–µ—Ä–µ–∑ API...`);
    
    const response = await fetch(`/api/products/${id}`, {
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      if (response.status === 404) {
        console.warn(`‚ö†Ô∏è –¢–æ–≤–∞—Ä ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return null;
      }
      
      const errorData = await response.json();
      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    const product = data.product;
    
    console.log(`‚úÖ –¢–æ–≤–∞—Ä ${id} –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ API`);
    return product;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${id} —á–µ—Ä–µ–∑ API:`, error);
    return null;
  }
};

/**
 * –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
 */
export const createOrder = async (orderData: CreateOrderData): Promise<CreateOrderResponse> => {
  try {
    console.log('üîÑ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API...', orderData);
    const token = localStorage.getItem('authToken');

    const response = await fetch('/api/orders', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...(token ? { Authorization: `Bearer ${token}` } : {}) // –í–ê–ñ–ù–û
      },
      body: JSON.stringify(orderData)
    });

    const data = await response.json();
    
    if (!response.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', data);
      return {
        success: false,
        error: data.error || `HTTP error! status: ${response.status}`
      };
    }

    console.log(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API:`, data);
    return data;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'
    };
  }
};

// ==================== –°–ü–†–ê–í–û–ß–ù–ò–ö–ò ====================

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±—Ä–µ–Ω–¥—ã
 */
export const getBrands = async () => {
  try {
    const response = await fetch('/api/brands', {
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data.brands || [];

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–µ–Ω–¥–æ–≤ —á–µ—Ä–µ–∑ API:', error);
    return [];
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export const getCategories = async () => {
  try {
    const response = await fetch('/api/categories', {
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data.categories || [];

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ API:', error);
    return [];
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã
 */
export const getSizes = async () => {
  try {
    const response = await fetch('/api/sizes', {
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data.sizes || [];

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API:', error);
    return [];
  }
};

// ==================== –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
 */
export const getSystemHealth = async () => {
  try {
    const response = await fetch('/api/health', {
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:', error);
    return {
      status: 'error',
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã',
      timestamp: new Date().toISOString()
    };
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
 */
export const getSystemStats = async () => {
  try {
    const health = await getSystemHealth();
    return health.stats || {
      totalProducts: 0,
      totalBrands: 0,
      totalCategories: 0
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return {
      totalProducts: 0,
      totalBrands: 0,
      totalCategories: 0
    };
  }
};

// ==================== –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú –ö–û–î–û–ú ====================

// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–∂–∏–¥–∞—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏
export const testConnection = async (): Promise<boolean> => {
  try {
    const health = await getSystemHealth();
    return health.status === 'healthy';
  } catch {
    return false;
  }
};

// –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const testStrapiConnection = testConnection;
export const testGoogleSheetsConnection = testConnection;

// ==================== –¢–ò–ü–´ –î–õ–Ø –≠–ö–°–ü–û–†–¢–ê ====================

export interface Brand {
  id: number;
  name: string;
  slug: string;
}

export interface Category {
  id: number;
  name: string;
  slug: string;
}

export interface Size {
  id: number;
  value: string;
}

export interface SystemHealth {
  status: 'healthy' | 'unhealthy' | 'error';
  strapi?: {
    connected: boolean;
    url: string;
  };
  stats?: {
    totalProducts: number;
    totalBrands: number;
    totalCategories: number;
  };
  timestamp: string;
  error?: string;
}