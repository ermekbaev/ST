// src/services/paymentService.ts
export interface CreatePaymentData {
  amount: number;
  orderId: string;
  customerEmail?: string;
  customerPhone: string;
  description?: string;
  returnUrl?: string;
  items?: Array<{
    name: string;
    quantity: number;
    price: number;
  }>;
}

export interface PaymentResponse {
  success: boolean;
  paymentId?: string;
  confirmationUrl?: string;
  status?: string;
  error?: string;
  details?: string;
}

export interface PaymentStatusResponse {
  success: boolean;
  payment?: {
    id: string;
    status: string;
    amount: {
      value: string;
      currency: string;
    };
    metadata?: Record<string, string>;
    paid: boolean;
    created_at: string;
  };
  error?: string;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa
 */
export const createPayment = async (data: CreatePaymentData): Promise<PaymentResponse> => {
  try {
    console.log('üí≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞:', data.orderId);
    
    const response = await fetch('/api/payments/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data)
    });

    const result = await response.json();

    if (!response.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', result);
      return {
        success: false,
        error: result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
      };
    }

    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω:', result.paymentId);
    return result;

  } catch (error) {
    console.error('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'
    };
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
 */
export const checkPaymentStatus = async (paymentId: string): Promise<PaymentStatusResponse> => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:', paymentId);
    
    const response = await fetch(`/api/payments/status?paymentId=${paymentId}`);
    const result = await response.json();

    if (!response.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', result);
      return {
        success: false,
        error: result.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞'
      };
    }

    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:', result.payment?.status);
    return result;

  } catch (error) {
    console.error('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'
    };
  }
};

/**
 * –í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
 */
export const refundPayment = async (paymentId: string, amount?: number, reason?: string) => {
  try {
    console.log('üí∏ –°–æ–∑–¥–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞:', paymentId);
    
    const response = await fetch('/api/payments/refund', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        paymentId,
        amount,
        reason: reason || '–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∫–ª–∏–µ–Ω—Ç–∞'
      })
    });

    return await response.json();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞'
    };
  }
};

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã
 */
export const formatAmount = (amount: number): string => {
  return (amount / 100).toFixed(2);
};

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã –≤ –∫–æ–ø–µ–π–∫–∏
 */
export const amountToKopecks = (rubles: number): number => {
  return Math.round(rubles * 100);
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–º
 */
export const isPaymentSuccessful = (status: string): boolean => {
  return status === 'succeeded';
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export const isPaymentPending = (status: string): boolean => {
  return status === 'pending' || status === 'waiting_for_capture';
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–º–µ–Ω–µ–Ω –ª–∏ –ø–ª–∞—Ç–µ–∂
 */
export const isPaymentCanceled = (status: string): boolean => {
  return status === 'canceled';
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
 */
export const getPaymentStatusText = (status: string): string => {
  const statusMap: Record<string, string> = {
    pending: '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
    waiting_for_capture: '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    succeeded: '–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω',
    canceled: '–û—Ç–º–µ–Ω–µ–Ω'
  };

  return statusMap[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
};

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ÆKassa
 */
export const formatCartItemsForPayment = (cartItems: any[]): CreatePaymentData['items'] => {
  return cartItems.map(item => ({
    name: item.name || `${item.brand} ${item.model}`.trim() || '–¢–æ–≤–∞—Ä',
    quantity: item.quantity || 1,
    price: item.price || 0
  }));
};