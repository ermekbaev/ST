// üìÅ src/types/cart.ts

// –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–≤–∞—Ä–∞
export interface Product {
  id?: string;
  article: string;
  brand: string;
  name: string;
  size: string;
  category: string;
  gender: string;
  price: number;
  photo: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã (—Ç–æ–≤–∞—Ä + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
export interface CartItem extends Product {
  quantity: number;
  image?: string; // –ê–ª–∏–∞—Å –¥–ª—è photo –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
export interface CartContextType {
  items: CartItem[];
  addToCart: (product: Product) => void;
  removeFromCart: (productId: string) => void;
  updateQuantity: (productId: string, quantity: number) => void;
  clearCart: () => void;
  getTotalPrice: () => number; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  totalItems: number;
  totalPrice: number;
  isCartOpen: boolean;
  openCart: () => void;
  closeCart: () => void;
  toggleCart: () => void;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
export interface CartSummary {
  subtotal: number;
  itemsCount: number;
  averageItemPrice: number;
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
export interface CartState {
  items: CartItem[];
  isLoading: boolean;
  error: string | null;
  isHydrated: boolean;
}

// –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ —Ç–∏–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
export type { Product as CartProduct };
export type { CartItem as CartItemType };