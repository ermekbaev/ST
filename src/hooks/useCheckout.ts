// src/hooks/useCheckout.ts - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô STRAPI
import { useState, useEffect, useMemo, useCallback } from 'react';
import { useForm } from 'react-hook-form';
import { useCart } from '@/contexts/CartContext';
import { useDeliverySettings } from './useDeliverySettings';
import { CheckoutFormData, AppliedPromoCode, DeliveryMethod, PaymentMethod } from '@/types/checkout';

// ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø API
interface OrderItem {
  productId: string;
  productName: string;
  size: string;
  quantity: number;
  priceAtTime: number;
}

interface CreateOrderData {
  customerInfo: {
    name: string;
    phone: string;
    email?: string;
  };
  items: OrderItem[];
  totalAmount: number;
  deliveryMethod: string;
  paymentMethod: string;
  deliveryAddress?: string;
  notes?: string;
}

interface CreateOrderResponse {
  success: boolean;
  orderId?: string;
  orderNumber?: string;
  error?: string;
  details?: string;
}

export const useCheckout = () => {
  const { items, clearCart } = useCart();
  const { deliveryOptions, paymentOptions, promoCodes, generalSettings, loading } = useDeliverySettings();
  const [appliedPromoCode, setAppliedPromoCode] = useState<AppliedPromoCode | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // ‚úÖ –§–û–†–ú–ê –ë–ï–ó –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–• –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
  const form = useForm<CheckoutFormData>({
    defaultValues: {
      firstName: '',
      lastName: '',
      email: '',
      phone: '',
      region: '',
      city: '',
      address: '',
      postalCode: '',
      recipientFirstName: '',
      recipientLastName: '',
      recipientPhone: '',
      deliveryMethod: 'store_pickup' as DeliveryMethod,
      paymentMethod: 'card' as PaymentMethod,
    },
    mode: 'onChange'
  });

  // ‚úÖ –ë–ê–ó–û–í–´–ï –†–ê–°–ß–ï–¢–´ –ë–ï–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –§–û–†–ú–´
  const baseCalculations = useMemo(() => {
    const subtotal = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    return { subtotal };
  }, [items]);

  // ‚úÖ –§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê –î–û–°–¢–ê–í–ö–ò
  const calculateDeliveryPrice = useCallback((deliveryId: string) => {
    const selectedDelivery = deliveryOptions.find(option => option.id === deliveryId);
    let deliveryPrice = selectedDelivery?.price || 0;
    
    // –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
    if (baseCalculations.subtotal >= generalSettings.minOrderFreeDelivery && deliveryPrice > 0) {
      deliveryPrice = 0;
    }
    
    return deliveryPrice;
  }, [deliveryOptions, baseCalculations.subtotal, generalSettings.minOrderFreeDelivery]);

  // ‚úÖ –§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê –°–ö–ò–î–ö–ò
  const calculatePromoDiscount = useCallback((deliveryId: string) => {
    if (!appliedPromoCode) return 0;
    
    const originalDeliveryPrice = deliveryOptions.find(opt => opt.id === deliveryId)?.price || 0;
    
    switch (appliedPromoCode.type) {
      case 'amount':
        return Math.min(appliedPromoCode.discount, baseCalculations.subtotal);
      case 'percentage':
        return Math.floor(baseCalculations.subtotal * (appliedPromoCode.discount / 100));
      case 'free_shipping':
        return originalDeliveryPrice > 0 ? originalDeliveryPrice : 0;
      default:
        return 0;
    }
  }, [appliedPromoCode, baseCalculations.subtotal, deliveryOptions]);

  // ‚úÖ –û–ë–©–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê
  const calculateTotals = useCallback((deliveryMethod?: string) => {
    const currentDeliveryMethod = deliveryMethod || form.getValues('deliveryMethod');
    const deliveryPrice = calculateDeliveryPrice(currentDeliveryMethod);
    const promoDiscount = calculatePromoDiscount(currentDeliveryMethod);
    const total = Math.max(0, baseCalculations.subtotal + deliveryPrice - promoDiscount);
    
    return {
      ...baseCalculations,
      deliveryPrice,
      promoDiscount,
      total,
      estimatedDelivery: generalSettings.deliveryTimeGeneral
    };
  }, [baseCalculations, calculateDeliveryPrice, calculatePromoDiscount, generalSettings.deliveryTimeGeneral, form]);

  // ‚úÖ –¢–ï–ö–£–©–ò–ï –†–ê–°–ß–ï–¢–´ –ë–ï–ó –ü–†–Ø–ú–û–ô –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ form.watch
  const [calculations, setCalculations] = useState(() => calculateTotals());

  // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –†–ê–°–ß–ï–¢–´ –ö–û–ì–î–ê –ú–ï–ù–Ø–Æ–¢–°–Ø –ë–ê–ó–û–í–´–ï –î–ê–ù–ù–´–ï
  useEffect(() => {
    setCalculations(calculateTotals());
  }, [calculateTotals]);

  // ‚úÖ –°–õ–£–®–ê–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–ü–û–°–û–ë–ê –î–û–°–¢–ê–í–ö–ò –û–¢–î–ï–õ–¨–ù–û
  const selectedDeliveryMethod = form.watch('deliveryMethod');
  useEffect(() => {
    setCalculations(calculateTotals(selectedDeliveryMethod));
  }, [selectedDeliveryMethod, calculateTotals]);

  // ‚úÖ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ü–†–û–ú–û–ö–û–î–ê
  const applyPromoCode = useCallback((code: string): boolean => {
    const foundPromo = promoCodes.find(promo => promo.code === code.toUpperCase());
    
    if (!foundPromo) {
      console.log('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω:', code);
      return false;
    }
    
    const currentDeliveryMethod = form.getValues('deliveryMethod');
    const appliedDiscount = calculatePromoDiscount(currentDeliveryMethod);
    
    setAppliedPromoCode({
      ...foundPromo,
      appliedDiscount
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    setTimeout(() => setCalculations(calculateTotals()), 0);
    
    console.log('‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω:', foundPromo.code, appliedDiscount);
    return true;
  }, [promoCodes, form, calculatePromoDiscount, calculateTotals]);

  // ‚úÖ –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–ú–û–ö–û–î–ê
  const removePromoCode = useCallback(() => {
    setAppliedPromoCode(null);
    setTimeout(() => setCalculations(calculateTotals()), 0);
    console.log('üóëÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω');
  }, [calculateTotals]);

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –í STRAPI API - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –≠–¢–£
const createOrderInStrapi = useCallback(async (orderData: CreateOrderData): Promise<CreateOrderResponse> => {
  try {
    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ Strapi API:', orderData);

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userToken = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;
    
    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      hasUserToken: !!userToken,
      tokenPreview: userToken ? `${userToken.substring(0, 20)}...` : '–ù–ï–¢ –¢–û–ö–ï–ù–ê'
    });

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
    };

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (userToken) {
      headers['Authorization'] = `Bearer ${userToken}`;
      console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
    } else {
      console.log('‚ö†Ô∏è –¢–û–ö–ï–ù –ù–ï –ù–ê–ô–î–ï–ù - –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –≥–æ—Å—Ç–µ–≤–æ–π');
    }

    const response = await fetch('/api/orders', {
      method: 'POST',
      headers,
      body: JSON.stringify(orderData)
    });

    const data = await response.json();

    if (response.ok) {
      console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Strapi:', data);
      return {
        success: true,
        orderId: data.orderId,
        orderNumber: data.orderNumber
      };
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Strapi:', data);
      return {
        success: false,
        error: data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞',
        details: data.details
      };
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Strapi:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    };
  }
}, []);

  // ‚úÖ –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –§–û–†–ú–´ –í –§–û–†–ú–ê–¢ API
  const formatOrderDataForAPI = useCallback((formData: CheckoutFormData, calculations: any): CreateOrderData => {
    return {
      customerInfo: {
        name: `${formData.firstName} ${formData.lastName}`.trim() || formData.firstName,
        phone: formData.phone,
        email: formData.email || undefined,
      },
      items: items.map(item => ({
        productId: item.id || item.article || 'UNKNOWN',
        productName: item.name || `${item.brand} ${item.name}`.trim() || '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        size: item.size || 'ONE SIZE',
        quantity: item.quantity || 1,
        priceAtTime: item.price || 0
      })),
      totalAmount: calculations.total,
      deliveryMethod: formData.deliveryMethod,
      paymentMethod: formData.paymentMethod,
      deliveryAddress: formData.address ? 
        `${formData.address}, ${formData.city}, ${formData.region} ${formData.postalCode}`.trim() : 
        '',
      notes: appliedPromoCode ? 
        `–ü—Ä–æ–º–æ–∫–æ–¥: ${appliedPromoCode.code} (-${appliedPromoCode.appliedDiscount}‚ÇΩ)` : 
        ''
    };
  }, [items, appliedPromoCode]);

  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –ó–ê–ö–ê–ó–ê –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô STRAPI
  const submitOrder = useCallback(async (data: CheckoutFormData) => {
    try {
      setIsSubmitting(true);
      
      const finalCalculations = calculateTotals(data.deliveryMethod);
      
      console.log('üì¶ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...');
      console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã:', finalCalculations);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
      if (!items || items.length === 0) {
        throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
      }

      if (finalCalculations.total <= 0) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞');
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
      const orderData = formatOrderDataForAPI(data, finalCalculations);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Strapi —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
      const result = await createOrderInStrapi(orderData);
      
      if (result.success) {
        console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', result);
        
        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        clearCart();
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞ –∏–∑ Strapi
        window.location.href = `/order-success?orderNumber=${result.orderNumber}`;
        
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
      }
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', errorMessage);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${errorMessage}`);
    } finally {
      setIsSubmitting(false);
    }
  }, [items, calculateTotals, clearCart, formatOrderDataForAPI, createOrderInStrapi]);

  return {
    form,
    items,
    deliveryOptions,
    paymentOptions,
    promoCodes,
    appliedPromoCode,
    removePromoCode,
    ...calculations,
    applyPromoCode,
    submitOrder,
    isSubmitting,
    loading,
    generalSettings
  };
};