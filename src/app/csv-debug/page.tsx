// –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª src/app/csv-debug/page.tsx
'use client';

import { useState, useEffect } from 'react';

interface CSVRow {
  rowNumber: number;
  allColumns: string[];
  parsedData: {
    article: string;
    brand: string;
    name: string;
    size: string;
    category: string;
    gender: string;
    price: string;
    description: string;
    photo: string;
  };
}

export default function CSVDebugPage() {
  const [csvRows, setCsvRows] = useState<CSVRow[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filterCategory, setFilterCategory] = useState<string>('–≤—Å–µ');
  const [showOnlyWithPhotos, setShowOnlyWithPhotos] = useState(false);
  const [testNewLogic, setTestNewLogic] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–æ –í–°–ï–• —Å—Ç–æ–ª–±—Ü–∞—Ö (–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê)
  const findPhotoUrl = (values: string[]): string => {
    console.log('üîç –¢–ï–°–¢: –ò—â–µ–º —Ñ–æ—Ç–æ URL –≤–æ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö...');
    console.log('üìä –¢–ï–°–¢: –í—Å–µ–≥–æ —Å—Ç–æ–ª–±—Ü–æ–≤:', values.length);
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç–æ–ª–±—Ü–∞–º –∏ –∏—â–µ–º —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç URL
    for (let i = 0; i < values.length; i++) {
      const column = values[i] || '';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (column.includes('https://') || column.includes('http://')) {
        console.log(`‚úÖ –¢–ï–°–¢: –ù–∞–π–¥–µ–Ω URL –≤ —Å—Ç–æ–ª–±—Ü–µ ${i + 1}:`, column.substring(0, 100) + '...');
        
        // –ü–∞—Ä—Å–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ URL
        const urls = parsePhotoUrlsNew(column);
        if (urls.length > 0) {
          console.log(`‚úÖ –¢–ï–°–¢: –ò–∑–≤–ª–µ—á–µ–Ω–æ ${urls.length} URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
          return urls[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π URL
        }
      }
    }
    
    console.log('‚ùå –¢–ï–°–¢: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ');
    return '';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö URL –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê)
  const parsePhotoUrlsNew = (photoString: string): string[] => {
    if (!photoString || photoString.trim() === '') {
      return [];
    }
    
    let photos: string[] = [];
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
    if (photoString.includes(';')) {
      photos = photoString.split(';');
    } else if (photoString.includes('\n') || photoString.includes('\r')) {
      photos = photoString.split(/[\r\n]+/);
    } else if (photoString.includes(',')) {
      photos = photoString.split(',');
    } else {
      photos = [photoString];
    }
    
    // –û—á–∏—â–∞–µ–º URL (–ë–ï–ó –æ–±—Ä–µ–∑–∫–∏!)
    const cleanPhotos = photos
      .map((url: string) => url.trim().replace(/^["']+|["']+$/g, ''))
      .filter((url: string) => url.length > 0)
      .filter((url: string) => url.startsWith('https://') || url.startsWith('http://'));
    
    return cleanPhotos;
  };

  const parseCSVLine = (line: string): string[] => {
    const result: string[] = [];
    let current = '';
    let inQuotes = false;
    
    for (let i = 0; i < line.length; i++) {
      const char = line[i];
      
      if (char === '"') {
        inQuotes = !inQuotes;
      } else if (char === ',' && !inQuotes) {
        result.push(current.trim());
        current = '';
      } else {
        current += char;
      }
    }
    result.push(current.trim());
    return result;
  };

  useEffect(() => {
    const fetchCSVData = async () => {
      try {
        setLoading(true);
        
        const SHEET_ID = '1naTkxDrQFfj_d7Q2U46GOj24hSqTAqrt_Yz1ImaKyVc';
        const response = await fetch(
          `https://docs.google.com/spreadsheets/d/${SHEET_ID}/export?format=csv&gid=0`,
          { cache: 'no-store' }
        );

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const csvText = await response.text();
        const lines = csvText.split('\n').filter(line => line.trim());
        
        console.log('=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó CSV ===');
        console.log(`–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${lines.length}`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const headers = parseCSVLine(lines[0]);
        console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
        
        const debugRows: CSVRow[] = [];

        // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        for (let i = 1; i < lines.length; i++) {
          const line = lines[i].trim();
          if (!line) continue;

          try {
            const allColumns = parseCSVLine(line);
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            const parsedData = {
              article: allColumns[0] || '',
              brand: allColumns[1] || '',
              name: allColumns[2] || '',
              size: allColumns[3] || '',
              category: allColumns[4] || '',
              gender: allColumns[5] || '',
              price: allColumns[6] || '',
              description: allColumns[7] || '',
              photo: allColumns[8] || ''
            };

            // –¢–ï–°–¢–ò–†–£–ï–ú –ù–û–í–£–Æ –õ–û–ì–ò–ö–£
            let newLogicPhoto = '';
            if (testNewLogic) {
              newLogicPhoto = findPhotoUrl(allColumns);
              console.log(`üß™ –¢–ï–°–¢ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${i}: –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞="${parsedData.photo ? '–Ω–∞–π–¥–µ–Ω–æ' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}" vs –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞="${newLogicPhoto ? '–Ω–∞–π–¥–µ–Ω–æ' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}"`);
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            const isCollection = parsedData.category.toLowerCase().includes('–∫–æ–ª–ª–µ–∫—Ü–∏');
            const hasValidName = parsedData.name.length > 5;
            
            // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if (hasValidName) {
              // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä "–∫–æ–ª–ª–µ–∫—Ü–∏—è", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–ª–µ–∫—Ü–∏—é
              if (filterCategory === '–∫–æ–ª–ª–µ–∫—Ü–∏—è' && !isCollection) {
                continue;
              }
              
              debugRows.push({
                rowNumber: i,
                allColumns,
                parsedData: {
                  ...parsedData,
                  photo: testNewLogic ? newLogicPhoto : parsedData.photo // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
                }
              });
            }

          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ ${i}:`, error);
          }
        }

        console.log(`–ù–∞–π–¥–µ–Ω–æ ${debugRows.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
        setCsvRows(debugRows);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV:', error);
        setError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      } finally {
        setLoading(false);
      }
    };

    fetchCSVData();
  }, [filterCategory, testNewLogic]); // –î–æ–±–∞–≤–ª—è–µ–º testNewLogic –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  const filteredRows = csvRows.filter(row => {
    if (showOnlyWithPhotos) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL –≤ –ª—é–±–æ–º –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤
      return row.allColumns.some(col => 
        col.includes('https://') || col.includes('http://')
      );
    }
    return true;
  });

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-xl text-gray-900">–ó–∞–≥—Ä—É–∑–∫–∞ CSV –¥–∞–Ω–Ω—ã—Ö...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-xl text-red-600">–û—à–∏–±–∫–∞: {error}</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-3xl font-bold mb-6 text-center text-gray-900">
          –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ CSV –¥–∞–Ω–Ω—ã—Ö
        </h1>
        
        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <div className="mb-6 p-4 bg-white rounded-lg shadow">
          <div className="flex gap-4 items-center">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ö–∞—Ç–µ–≥–æ—Ä–∏—è:
              </label>
              <select 
                value={filterCategory}
                onChange={(e) => setFilterCategory(e.target.value)}
                className="border rounded px-3 py-2"
              >
                <option value="–≤—Å–µ">–í—Å–µ —Ç–æ–≤–∞—Ä—ã</option>
                <option value="–∫–æ–ª–ª–µ–∫—Ü–∏—è">–¢–æ–ª—å–∫–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è</option>
              </select>
            </div>
            
            <div>
              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={showOnlyWithPhotos}
                  onChange={(e) => setShowOnlyWithPhotos(e.target.checked)}
                  className="rounded"
                />
                <span className="text-sm text-gray-700">–¢–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ URL</span>
              </label>
            </div>
            
            <div>
              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={testNewLogic}
                  onChange={(e) => setTestNewLogic(e.target.checked)}
                  className="rounded"
                />
                <span className="text-sm font-bold text-blue-700">üß™ –¢–µ—Å—Ç –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ</span>
              </label>
            </div>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="mb-6 p-4 bg-blue-50 rounded-lg">
          <h2 className="text-xl font-semibold mb-2 text-gray-900">
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {testNewLogic ? '(—Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ)' : '(—Å–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–æ–π)'}:
          </h2>
          <p className="text-gray-800">–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {filteredRows.length}</p>
          <p className="text-gray-800">
            –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ö–æ–ª–ª–µ–∫—Ü–∏—è": {filteredRows.filter(row => 
              row.parsedData.category.toLowerCase().includes('–∫–æ–ª–ª–µ–∫—Ü–∏')
            ).length}
          </p>
          <p className="text-gray-800">
            –° URL –≤ —Å—Ç–æ–ª–±—Ü–µ "–§–æ—Ç–æ": {filteredRows.filter(row => 
              row.parsedData.photo.includes('http')
            ).length}
          </p>
          <p className="text-gray-800">
            –° URL –≤ –ª—é–±–æ–º —Å—Ç–æ–ª–±—Ü–µ: {filteredRows.filter(row => 
              row.allColumns.some(col => col.includes('http'))
            ).length}
          </p>
          {testNewLogic && (
            <div className="mt-2 p-2 bg-green-100 rounded">
              <p className="text-green-800 font-medium">
                üß™ –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! –§–æ—Ç–æ –∏—â–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö.
              </p>
            </div>
          )}
        </div>

        {/* –î–∞–Ω–Ω—ã–µ */}
        <div className="space-y-6">
          {filteredRows.slice(0, 50).map((row) => {
            const hasPhotoInCorrectColumn = row.parsedData.photo.includes('http');
            const photosInOtherColumns = row.allColumns
              .map((col, index) => ({ index, col }))
              .filter(({ col }) => col.includes('http'));

            return (
              <div key={row.rowNumber} className="bg-white rounded-lg shadow-md p-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  
                  {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                  <div>
                    <h3 className="text-lg font-semibold mb-3 text-blue-600">
                      –°—Ç—Ä–æ–∫–∞ {row.rowNumber}: {row.parsedData.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                    </h3>
                    
                    <div className="space-y-2 text-sm text-gray-800">
                      <p><strong>–ê—Ä—Ç–∏–∫—É–ª:</strong> {row.parsedData.article}</p>
                      <p><strong>–ë—Ä–µ–Ω–¥:</strong> {row.parsedData.brand}</p>
                      <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> 
                        <span className={`ml-2 px-2 py-1 rounded text-xs ${
                          row.parsedData.category.toLowerCase().includes('–∫–æ–ª–ª–µ–∫—Ü–∏') 
                            ? 'bg-purple-100 text-purple-800' 
                            : 'bg-gray-100 text-gray-800'
                        }`}>
                          {row.parsedData.category}
                        </span>
                      </p>
                      <p><strong>–†–∞–∑–º–µ—Ä:</strong> {row.parsedData.size}</p>
                      <p><strong>–¶–µ–Ω–∞:</strong> {row.parsedData.price}</p>
                    </div>

                    <div className="mt-4">
                      <strong className="text-gray-900">
                        {testNewLogic ? '–§–æ—Ç–æ (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ - –ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö):' : '–°—Ç–æ–ª–±–µ—Ü "–§–æ—Ç–æ" (‚Ññ9):'}
                      </strong>
                      <div className={`bg-gray-100 p-2 rounded mt-1 text-xs break-all ${
                        hasPhotoInCorrectColumn ? 'border-green-500 border-2' : 'border-red-300 border'
                      }`}>
                        {row.parsedData.photo || '–ü—É—Å—Ç–æ'}
                      </div>
                      {testNewLogic && row.parsedData.photo && (
                        <div className="mt-2 p-2 bg-green-50 rounded">
                          <span className="text-green-600 text-xs">
                            ‚úÖ –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞—à–ª–∞ —Ñ–æ—Ç–æ!
                          </span>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ */}
                  <div>
                    <h4 className="font-semibold mb-3 text-red-600">
                      –í—Å–µ —Å—Ç–æ–ª–±—Ü—ã ({row.allColumns.length}):
                    </h4>
                    
                    <div className="space-y-2 text-xs max-h-96 overflow-y-auto">
                      {row.allColumns.map((col, index) => {
                        const hasUrl = col.includes('http');
                        return (
                          <div key={index} className={`p-2 rounded ${
                            hasUrl ? 'bg-green-100 border-green-500 border' : 'bg-gray-50'
                          }`}>
                            <div className="font-medium text-gray-700">
                              –°—Ç–æ–ª–±–µ—Ü {index + 1}:
                            </div>
                            <div className="break-all text-gray-800">
                              {col || '(–ø—É—Å—Ç–æ)'}
                            </div>
                          </div>
                        );
                      })}
                    </div>

                    {/* –ù–∞–π–¥–µ–Ω–Ω—ã–µ URL –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö */}
                    {photosInOtherColumns.length > 0 && (
                      <div className="mt-4 p-3 bg-green-50 rounded">
                        <strong className="text-green-600">
                          üéØ URL –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö: {photosInOtherColumns.map(p => p.index + 1).join(', ')}
                        </strong>
                        <div className="mt-2 text-xs">
                          {photosInOtherColumns.map(({ index, col }) => (
                            <div key={index} className="mb-1">
                              <span className="font-medium">–°—Ç–æ–ª–±–µ—Ü {index + 1}:</span>
                              <div className="text-gray-700 break-all">
                                {col.substring(0, 100)}...
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* –ï—Å–ª–∏ –Ω–µ—Ç URL –≤–æ–æ–±—â–µ */}
                    {photosInOtherColumns.length === 0 && !hasPhotoInCorrectColumn && (
                      <div className="mt-4 p-3 bg-red-50 rounded">
                        <span className="text-red-600">‚ùå URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}