// src/app/product/[id]/page.tsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è Strapi API
'use client';

import React, { useState, useEffect, use } from 'react';
import { useCart } from '../../../contexts/CartContext';
import Breadcrumbs from '../../../components/UI/Breadcrumbs/Breadcrumbs';
import ProductGallery, { GalleryImage } from '../../../components/Product/Gallery/ProductGallery';
import ProductInfo, { ProductInfo as ProductInfoType, ProductSize } from '../../../components/Product/Info/ProductInfo';
import CustomOrderSection from '../../../components/CustomOrder/CustomOrderSection';
import HowItWorksModal from '../../../components/UI/Modal/HowItWorksModal';
import CartNotification from '../../../components/UI/Notifications/CartNotification';
import DeliveryPaymentSection from '@/components/Product/Sections/DeliveryPaymentSection';
import ProductActions from '@/components/Product/Sections/ProductActions';

interface ProductPageProps {
  params: Promise<{
    id: string;
  }>;
}

export default function ProductPage({ params }: ProductPageProps) {
  const [mounted, setMounted] = useState(false);
  const [product, setProduct] = useState<ProductInfoType | null>(null);
  const [images, setImages] = useState<GalleryImage[]>([]);
  const [selectedSize, setSelectedSize] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [showNotification, setShowNotification] = useState(false);
  const [notificationProduct, setNotificationProduct] = useState('');
  const { addToCart, openCart } = useCart();

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º React.use() –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è Promise params
  const resolvedParams = use(params);

  useEffect(() => {
    setMounted(true);
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
  useEffect(() => {
    if (mounted) {
      const loadProduct = async () => {
        try {
          setLoading(true);
          
          console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä —Å ID:', resolvedParams.id);
          
          // API –∑–∞–ø—Ä–æ—Å –∫ –Ω–æ–≤–æ–º—É Strapi API
          const response = await fetch(`/api/products/${resolvedParams.id}`);
          
          if (!response.ok) {
            if (response.status === 404) {
              console.warn('‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω (404)');
              setProduct(null);
              return;
            }
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const result = await response.json();
          
          console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Strapi API:', {
            hasProduct: !!result.product,
            error: result.error
          });
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API - result.product –≤–º–µ—Å—Ç–æ result.data
          if (result.product) {
            const productData = result.product;
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã:', {
              name: productData.name,
              price: productData.price,
              sizes: productData.sizes,
              mainPhoto: productData.mainPhoto,
              additionalPhotos: productData.additionalPhotos
            });
            
            // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            const productSizes: ProductSize[] = productData.sizes?.map((sizeValue: string) => ({
              size: sizeValue,
              price: productData.price, // –ü–æ–∫–∞ –æ–¥–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
              available: true
            })) || [
              // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
              { size: productData.size || '41', price: productData.price, available: true }
            ];
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            const productInfo: ProductInfoType = {
              id: productData.id,
              name: productData.name,
              brand: productData.brand,
              price: productData.price,
              category: productData.category,
              article: productData.article,
              description: `${productData.brand} ${productData.name} - ${productData.category}`,
              sizes: productSizes,
              inStock: productData.availableStock > 0,
              deliveryInfo: '–î–æ—Å—Ç–∞–≤–∫–∞ 1-3 –¥–Ω—è –ø–æ –†–æ—Å—Å–∏–∏'
            };
            
            setProduct(productInfo);
            
            // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
            const productImages: GalleryImage[] = [];
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ
            if (productData.mainPhoto && productData.mainPhoto.trim()) {
              productImages.push({
                id: 'main_photo',
                url: productData.mainPhoto.trim(),
                alt: `${productData.name} - –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ`
              });
              console.log('üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ:', productData.mainPhoto.substring(0, 80) + '...');
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
            if (productData.additionalPhotos && Array.isArray(productData.additionalPhotos)) {
              productData.additionalPhotos.forEach((photoUrl: string, index: number) => {
                if (photoUrl && photoUrl.trim() && (photoUrl.startsWith('http://') || photoUrl.startsWith('https://'))) {
                  productImages.push({
                    id: `additional_photo_${index + 1}`,
                    url: photoUrl.trim(),
                    alt: `${productData.name} - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ ${index + 1}`
                  });
                  console.log(`üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ ${index + 1}:`, photoUrl.substring(0, 80) + '...');
                } else {
                  console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ ${index + 1}:`, photoUrl);
                }
              });
            }
            
            // –ï—Å–ª–∏ –ù–ï–¢ –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º placeholder
            if (productImages.length === 0) {
              console.log('üì∑ –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º placeholder');
              productImages.push({
                id: 'placeholder_1',
                url: '/images/placeholder.jpg', // Placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                alt: `${productData.name} - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è`
              });
            }
            
            setImages(productImages);
            
            console.log(`üì∏ –ò—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${productImages.length}`);
            productImages.forEach((img, i) => {
              console.log(`  ${i + 1}: ${img.id} - ${img.url ? img.url.substring(0, 60) + '...' : 'PLACEHOLDER'}`);
            });
            
          } else {
            console.error('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API:', result.error);
            setProduct(null);
          }
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞:', error);
          setProduct(null);
        } finally {
          setLoading(false);
        }
      };

      loadProduct();
    }
  }, [mounted, resolvedParams.id]);

  const handleSizeSelect = (size: string) => {
    setSelectedSize(size);
  };

  const handleAddToCart = (size: string) => {
    if (!product) return;
    
    const selectedSizeInfo = product.sizes.find(s => s.size === size);
    const price = selectedSizeInfo?.price || product.price;
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    const cartItem = {
      id: product.id,
      article: product.article,
      brand: product.brand,
      name: `${product.name} (—Ä–∞–∑–º–µ—Ä ${size})`,
      size: size,
      category: product.category,
      gender: '–£–Ω–∏—Å–µ–∫—Å',
      price: price,
      photo: images[0]?.url || '/images/placeholder.jpg'
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É –±–µ–∑ alert
    addToCart(cartItem);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setNotificationProduct(`${product.name} (—Ä–∞–∑–º–µ—Ä ${size})`);
    setShowNotification(true);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(`–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É: ${product.name}, —Ä–∞–∑–º–µ—Ä: ${size}, —Ü–µ–Ω–∞: ${price.toLocaleString()} ‚ÇΩ`);
  };

  const handleContinueShopping = () => {
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥');
    window.location.href = '/catalog';
  };

  const handleBackToStore = () => {
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é');
    window.location.href = '/';
  };

  // –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
  const breadcrumbItems = [
    { label: '–ö–∞—Ç–∞–ª–æ–≥', href: '/' },
    { label: product?.category || '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', href: `/#${product?.category}` },
    { label: product?.name || '–¢–æ–≤–∞—Ä', isLast: true }
  ];

  if (!mounted) {
    return (
      <div className="min-h-screen bg-white">
        <div className="flex items-center justify-center h-screen">
          <div className="text-center">
            <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900 mb-4"></div>
            <p className="text-gray-600">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</p>
          </div>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-white">
        <div className="flex items-center justify-center h-screen">
          <div className="text-center">
            <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900 mb-4"></div>
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä...</p>
            <p className="text-gray-400 text-sm mt-2">ID: {resolvedParams.id}</p>
          </div>
        </div>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="min-h-screen bg-white">
        <div className="flex items-center justify-center h-screen">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-gray-800 mb-4">–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
            <p className="text-gray-600 mb-8">–¢–æ–≤–∞—Ä —Å ID {resolvedParams.id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>
            <button 
              onClick={handleBackToStore}
              className="bg-black text-white px-6 py-3 hover:bg-gray-800 transition-colors"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω
            </button>
          </div>
        </div>
      </div>
    );
  }

  console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞:', {
    productName: product.name,
    imagesCount: images.length,
    images: images.map(img => ({ id: img.id, hasUrl: !!img.url, url: img.url?.substring(0, 50) }))
  });

  return (
    <div className="min-h-screen bg-white">
      {/* –û–±–µ—Ä—Ç–∫–∞ —Å–æ –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–∞ */}
      <div className="px-5 lg:px-0 lg:pl-[139px] lg:pr-[20px]">
        
        {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ */}
        <div className="py-6 lg:py-8">
          <Breadcrumbs items={breadcrumbItems} />
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞ */}
        <div className="w-full">
          <div className="flex flex-col lg:flex-row lg:gap-12">
            
            {/* –ì–ê–õ–ï–†–ï–Ø - –∑–∞–Ω–∏–º–∞–µ—Ç ~60% —à–∏—Ä–∏–Ω—ã, flex —Ä–∞—Å—Ç–µ—Ç */}
            <div className="w-full lg:flex-1 lg:max-w-[60%]">
              <ProductGallery 
                images={images} 
                productName={product.name}
              />
            </div>
            
            {/* –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–í–ê–†–ï - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ ~500px */}
            <div className="w-full lg:w-auto lg:flex-shrink-0 mt-8 lg:mt-0">
              <div className="lg:w-[500px]">
                <ProductInfo
                  product={product}
                  selectedSize={selectedSize}
                  onSizeSelect={handleSizeSelect}
                  onAddToCart={handleAddToCart}
                />
              </div>
            </div>
          </div>
        </div>

        {/* –°–µ–∫—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã */}
        <DeliveryPaymentSection className="mt-16" />

        {/* –°–µ–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ */}
        <ProductActions 
          onContinueShopping={handleContinueShopping}
          onBackToStore={handleBackToStore}
          className="mt-16"
        />
        
      </div>

      {/* –°–µ–∫—Ü–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ - –ë–ï–ó –æ—Ç—Å—Ç—É–ø–æ–≤, –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
      <CustomOrderSection 
        onHowItWorksClick={() => setIsModalOpen(true)}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?" */}
      <HowItWorksModal 
        isOpen={isModalOpen} 
        onClose={() => setIsModalOpen(false)} 
      />

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É */}
      <CartNotification
        isVisible={showNotification}
        productName={notificationProduct}
        onHide={() => setShowNotification(false)}
      />
    </div>
  );
}