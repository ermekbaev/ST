// src/app/checkout/page.tsx - –ò–°–ü–†–ê–í–õ–ï–ù: –ë–ï–ó –ö–û–ù–§–õ–ò–ö–¢–ê –†–ï–î–ò–†–ï–ö–¢–û–í
'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useCart } from '@/contexts/CartContext';
import NewCheckoutForm from '@/components/Checkout/newChekoutForm';
import NewOrderSummary from '@/components/Checkout/newCheckoutSummary';

const CheckoutPage: React.FC = () => {
  const { items, clearCart } = useCart();
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [isProcessing, setIsProcessing] = useState(false);
  const [orderCompleted, setOrderCompleted] = useState(false); // ‚úÖ –î–û–ë–ê–í–ò–õ–ò –§–õ–ê–ì
  
  // ‚úÖ –û–ë–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
  const [selectedDelivery, setSelectedDelivery] = useState('store_pickup');
  const [selectedPayment, setSelectedPayment] = useState('card');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 100);

    return () => clearTimeout(timer);
  }, []);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù: –†–µ–¥–∏—Ä–µ–∫—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –ò –∑–∞–∫–∞–∑ –ù–ï –∑–∞–≤–µ—Ä—à–µ–Ω
  useEffect(() => {
    if (!isLoading && items.length === 0 && !orderCompleted && !isProcessing) {
      console.log('üîÑ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é (–Ω–æ –ù–ï –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞)');
      router.push('/');
    }
  }, [items, router, isLoading, orderCompleted, isProcessing]);

  // –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ü–†–ê–í–ö–ò –ó–ê–ö–ê–ó–ê
  const handleOrderSubmit = async (orderData: any) => {
    if (isProcessing) return;
    
    console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –ó–ê–ö–ê–ó–ê');
    setIsProcessing(true);
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!orderData.firstName?.trim() || !orderData.phone?.trim()) {
        throw new Error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω');
      }

      if (items.length === 0) {
        throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const orderPayload = {
        customerInfo: {
          name: orderData.firstName.trim(),
          phone: orderData.phone.trim(),
          email: orderData.email?.trim() || '',
        },
        items: items.map(item => ({
          productId: item.id || item.article,
          productName: item.name || item.title,
          //@ts-ignore
          size: item.selectedSize || item.size,
          quantity: item.quantity,
          priceAtTime: item.price,
        })),
        totalAmount: calculateTotal(),
        deliveryMethod: selectedDelivery,
        paymentMethod: selectedPayment,
        deliveryAddress: orderData.city && orderData.address 
          ? `${orderData.city.trim()}, ${orderData.address.trim()}`
          : '',
        notes: orderData.notes?.trim() || '',
      };

      console.log('üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API:', orderPayload);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API
      const response = await fetch('/api/orders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderPayload),
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
      }

      console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', result.orderNumber);

      // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, –ü–û–¢–û–ú –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      setOrderCompleted(true);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —Ñ–ª–∞–≥ —É—Å–ø–µ–ª —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
      setTimeout(() => {
        clearCart();
        
        // –ï—â–µ –æ–¥–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
        setTimeout(() => {
          const successUrl = `/order-success?orderNumber=${result.orderNumber}&paymentMethod=${selectedPayment}`;
          
          if (selectedPayment === 'cash_vladivostok') {
            console.log('üéØ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞:', successUrl + '&type=cash');
            router.push(successUrl + '&type=cash');
          } else {
            console.log('üéØ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞:', successUrl + '&type=online_pending');
            router.push(successUrl + '&type=online_pending');
          }
        }, 100);
      }, 100);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.';
      
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      
      alert(`–û—à–∏–±–∫–∞: ${errorMessage}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (xxx) xxx-xx-xx\nüìß Email: tigran200615@gmail.com`);
    } finally {
      setIsProcessing(false);
    }
  };

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã
  const calculateTotal = () => {
    const subtotal = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    let deliveryCost = 0;
    switch (selectedDelivery) {
      case 'cdek_pickup':
        deliveryCost = 300;
        break;
      case 'cdek_courier':
        deliveryCost = 500;
        break;
      case 'courier_ts':
        deliveryCost = 0;
        break;
      case 'store_pickup':
      default:
        deliveryCost = 0;
    }

    return subtotal + deliveryCost;
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
  if (isLoading) {
    return (
      <div className="min-h-screen lg:bg-[#E5DDD4] bg-white flex items-center justify-center">
        <div className="text-xl">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    );
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
  if (items.length === 0 && !orderCompleted && !isProcessing) {
    return (
      <div className="min-h-screen lg:bg-[#E5DDD4] bg-white flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
          <p className="text-gray-600 mb-6">–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</p>
          <button
            onClick={() => router.push('/')}
            className="bg-black text-white px-6 py-3 font-medium hover:bg-gray-800 transition-colors"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–∞–º
          </button>
        </div>
      </div>
    );
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–≤–∞—Ä—ã –∫–æ—Ä–∑–∏–Ω—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  const cartItems = items.map(item => ({
    id: item.id || item.article || '',
    name: item.name || item.title || '',
    price: item.price || 0,
    quantity: item.quantity || 1,
    image: item.image || item.photo || item.images?.[0] || '',
    photo: item.photo || item.image || '',
    size: item.size || '',
    article: item.article || item.id || ''
  }));

  return (
    <div className="min-h-screen lg:bg-[#E5DDD4] bg-white">
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <main className="min-h-screen">
        {/* Desktop Layout - 2 –∫–æ–ª–æ–Ω–∫–∏ */}
        <div className="hidden lg:block">
          <div className="grid grid-cols-2 min-h-screen">
            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –§–æ—Ä–º–∞ */}
            <div className="bg-[#E5DDD4] pl-[70px] pr-[20px] pt-8 pb-16">
              <NewCheckoutForm
                cartItems={cartItems}
                onSubmit={handleOrderSubmit}
                selectedDelivery={selectedDelivery}
                selectedPayment={selectedPayment}
                onDeliveryChange={setSelectedDelivery}
                onPaymentChange={setSelectedPayment}
                isMobile={false}
                isProcessing={isProcessing}
              />
            </div>
                     
            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞ */}
            <div className="bg-white pl-[20px] pr-[70px] py-8">
              <NewOrderSummary
                cartItems={cartItems}
                onSubmit={handleOrderSubmit}
                selectedDelivery={selectedDelivery}
                selectedPayment={selectedPayment}
                isMobile={false}
                isProcessing={isProcessing}
              />
            </div>
          </div>
        </div>

        {/* Mobile Layout - 1 –∫–æ–ª–æ–Ω–∫–∞ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º */}
        <div className="lg:hidden bg-white min-h-screen">
          {/* –§–æ—Ä–º–∞ —Å–≤–µ—Ä—Ö—É */}
          <div className="px-[10px] py-6 space-y-6">
            <NewCheckoutForm
              cartItems={cartItems}
              onSubmit={handleOrderSubmit}
              selectedDelivery={selectedDelivery}
              selectedPayment={selectedPayment}
              onDeliveryChange={setSelectedDelivery}
              onPaymentChange={setSelectedPayment}
              isMobile={true}
              isProcessing={isProcessing}
            />
          </div>
                   
          {/* –ë–µ–ª—ã–π –±–ª–æ–∫ —Å–Ω–∏–∑—É */}
          <div className="bg-white px-[10px] py-6">
            <NewOrderSummary
              cartItems={cartItems}
              onSubmit={handleOrderSubmit}
              selectedDelivery={selectedDelivery}
              selectedPayment={selectedPayment}
              isMobile={true}
              isProcessing={isProcessing}
            />
          </div>
        </div>
      </main>
    </div>
  );
};

export default CheckoutPage;