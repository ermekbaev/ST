import { NextRequest, NextResponse } from 'next/server';
import nodemailer from 'nodemailer';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL;
const STRAPI_API_TOKEN = process.env.STRAPI_API_TOKEN;

const EMAIL_USER = process.env.EMAIL_USER;
const EMAIL_PASS = process.env.EMAIL_PASS;
const EMAIL_FROM = process.env.EMAIL_FROM;
const ADMIN_EMAIL = process.env.ADMIN_EMAIL;

interface CreateOrderData {
  customerInfo: {
    name: string;
    phone: string;
    email?: string;
  };
  items: Array<{
    productId: string;
    size: string;
    quantity: number;
    priceAtTime: number;
    productName?: string;
  }>;
  totalAmount: number;
  deliveryMethod: string;
  paymentMethod: string;
  deliveryAddress?: string;
  notes?: string;
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ API /orders –≤—ã–∑–≤–∞–Ω (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
    
    const body: CreateOrderData = await request.json();
    
    const authHeader = request.headers.get('authorization');
    const userToken = authHeader?.replace('Bearer ', '') || null;
    
    let userId: string | null = null;
    if (userToken) {
      try {
        const userResponse = await fetch(`${STRAPI_URL}/api/users/me`, {
          headers: {
            'Authorization': `Bearer ${userToken}`,
            'Content-Type': 'application/json',
          },
        });

        if (userResponse.ok) {
          const userData = await userResponse.json();
          userId = userData.id.toString();
        } else {
          console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–π –∑–∞–∫–∞–∑');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    }
    
    const validation = validateOrderData(body);
    if (!validation.isValid) {
      console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ –ø—Ä–æ—à–ª–∞:', validation.error);
      return NextResponse.json(
        { success: false, error: validation.error },
        { status: 400 }
      );
    }

    const orderNumber = generateOrderNumber();

    const orderData = {
      orderNumber,
      customerName: body.customerInfo.name,
      customerPhone: body.customerInfo.phone,
      customerEmail: body.customerInfo.email || '',
      totalAmount: body.totalAmount,
      deliveryMethod: body.deliveryMethod,
      paymentMethod: body.paymentMethod,
      deliveryAddress: body.deliveryAddress || '',
      notes: body.notes || '',
      orderStatus: 'pending',
      paymentStatus: body.paymentMethod === 'cash_vladivostok' ? 'pending' : 'pending',
      ...(userId && { 
        user: {
          connect: [{ id: parseInt(userId) }]
        }
      })
    };

    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ Strapi...');
    const orderId = await saveOrderToStrapi(orderData, body.items);
    
    console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', orderNumber);

    // üî• –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –ù–ï–ú–ï–î–õ–ï–ù–ù–û
    const response = NextResponse.json({
      success: true,
      orderId,
      orderNumber,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      userOrder: !!userId
    });

    // üî• –ê–°–ò–ù–•–†–û–ù–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ü–û–°–õ–ï –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
    setImmediate(async () => {
      try {
        console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ...');
        await sendAdminNotificationAsync(orderNumber, body, orderData);
        console.log('‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      } catch (emailError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ email (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', emailError);
        // Email –æ—à–∏–±–∫–∏ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –∑–∞–∫–∞–∑
      }
    });

    return response;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

// üî• –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ email —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function sendAdminNotificationAsync(orderNumber: string, orderData: CreateOrderData, savedData: any): Promise<void> {
  const MAX_RETRIES = 3;
  const TIMEOUT_MS = 10000; // 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º

  for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
    try {
      console.log(`üìß –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email ${attempt}/${MAX_RETRIES}...`);
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä —Å –∂–µ—Å—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
      const transporter = nodemailer.createTransport({
        host: 'smtp.mail.ru',
        port: 465,
        secure: true,
        auth: {
          user: EMAIL_USER,
          pass: EMAIL_PASS, 
        },
        // üî• –ñ–ï–°–¢–ö–ò–ï –¢–ê–ô–ú–ê–£–¢–´ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        connectionTimeout: 5000,   // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        greetingTimeout: 3000,     // 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        socketTimeout: 5000,       // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–æ–∫–µ—Ç
        tls: {
          rejectUnauthorized: false
        }
      });

      const messageText = formatAdminNotification(orderNumber, orderData, savedData);
      const messageHtml = formatAdminNotificationHtml(orderNumber, orderData, savedData);

      const mailOptions = {
        from: EMAIL_FROM,
        to: ADMIN_EMAIL,
        subject: `üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ${orderNumber} - ${orderData.totalAmount.toLocaleString('ru-RU')}‚ÇΩ`,
        text: messageText,
        html: messageHtml,
      };

      // üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –æ–±—â–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
      await Promise.race([
        transporter.sendMail(mailOptions),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Email timeout')), TIMEOUT_MS)
        )
      ]);

      console.log(`‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}`);
      return; // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, –≤—ã—Ö–æ–¥–∏–º

    } catch (error) {
      console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error);
      
      if (attempt === MAX_RETRIES) {
        console.error('‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
        
        // –í –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ - –≤—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥–∏
        console.log('\nüìß === EMAIL –ù–ï –û–¢–ü–†–ê–í–õ–ï–ù - –î–£–ë–õ–ò–†–£–ï–ú –í –õ–û–ì–ò ===');
        console.log(formatAdminNotification(orderNumber, orderData, savedData));
        console.log('=== –ö–û–ù–ï–¶ EMAIL –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø ===\n');
        
        return;
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
      const delay = attempt * 2000; // 2—Å, 4—Å, 6—Å
      console.log(`‚è≥ –ñ–¥–µ–º ${delay}ms –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${attempt + 1}...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
}

async function saveOrderToStrapi(orderData: any, items: CreateOrderData['items']): Promise<string> {
  const headers: HeadersInit = {
    'Content-Type': 'application/json',
  };

  const orderResponse = await fetch(`${STRAPI_URL}/api/orders`, {
    method: 'POST',
    headers,
    body: JSON.stringify({ data: orderData })
  });

  if (!orderResponse.ok) {
    const errorText = await orderResponse.text();
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ Strapi:', errorText);
    throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Strapi: ${orderResponse.status} - ${errorText}`);
  }

  const orderResult = await orderResponse.json();
  const orderId = orderResult.data.id;

  const createdOrderItems: string[] = [];
  let successCount = 0;

  for (let index = 0; index < items.length; index++) {
    const item = items[index];
    
    try {
      const sizeId = await findSizeId(item.productId, item.size);
      
      if (!sizeId) {
        console.warn(`‚ö†Ô∏è –†–∞–∑–º–µ—Ä "${item.size}" –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${item.productId}, —Å–æ–∑–¥–∞–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞`);
      }

      const itemData = {
        orderId: orderId.toString(),
        productId: item.productId,
        productName: item.productName || `–¢–æ–≤–∞—Ä ${item.productId}`,
        quantity: item.quantity,
        priceAtTime: item.priceAtTime,
        
        product: {
          connect: [{ id: parseInt(item.productId) }]
        },
        
        order: {
          connect: [{ id: orderId }]
        },
        
        ...(sizeId && {
          size: {
            connect: [{ id: parseInt(sizeId) }]
          }
        })
      };

      const itemResponse = await fetch(`${STRAPI_URL}/api/order-items`, {
        method: 'POST',
        headers,
        body: JSON.stringify({ data: itemData })
      });

      if (!itemResponse.ok) {
        const fallbackData = {
          orderId: orderId.toString(),
          productId: item.productId,
          productName: item.productName || `–¢–æ–≤–∞—Ä ${item.productId}`,
          quantity: item.quantity,
          priceAtTime: item.priceAtTime
        };
        
        const fallbackResponse = await fetch(`${STRAPI_URL}/api/order-items`, {
          method: 'POST',
          headers,
          body: JSON.stringify({ data: fallbackData })
        });
        
        if (fallbackResponse.ok) {
          const fallbackResult = await fallbackResponse.json();
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ fallback –ø–æ–∑–∏—Ü–∏—è ${index + 1} —Å ID: ${fallbackResult.data.id} (–ë–ï–ó –°–í–Ø–ó–ï–ô)`);
          createdOrderItems.push(fallbackResult.data.id.toString());
          successCount++;
        } else {
          const fallbackError = await fallbackResponse.text();
          console.error(`‚ùå Fallback —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ${index + 1}:`, fallbackError);
        }
      } else {
        const itemResult = await itemResponse.json();
        const orderItemId = itemResult.data.id;
        console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏—è ${index + 1} —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${orderItemId} (–°–û –°–í–Ø–ó–Ø–ú–ò)`);
        
        createdOrderItems.push(orderItemId.toString());
        successCount++;
      }
      
      if (index < items.length - 1) {
        console.log(`‚è≥ –ü–∞—É–∑–∞ 200ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–µ–π...`);
        await new Promise(resolve => setTimeout(resolve, 200));
      }
      
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ ${index + 1}:`, error);
    }
  }

  if (successCount === 0) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞');
  }

  if (createdOrderItems.length > 0) {
    await updateOrderWithItems(orderId, createdOrderItems);
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    await verifyOrderLinks(orderId.toString());
  }

  return orderId.toString();
}

async function updateOrderWithItems(orderId: string, orderItemIds: string[]): Promise<void> {
  try {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ ${orderId} —Å–æ —Å–≤—è–∑—è–º–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: [${orderItemIds.join(', ')}]`);
    
    let documentId = null;
    
    try {
      const searchResponse = await fetch(`${STRAPI_URL}/api/orders?filters[id][$eq]=${orderId}`);
      
      if (searchResponse.ok) {
        const searchData = await searchResponse.json();
        if (searchData.data && searchData.data.length > 0) {
          documentId = searchData.data[0].documentId;
          console.log(`üîç –ù–∞–π–¥–µ–Ω documentId –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}: ${documentId}`);
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü–æ–∏—Å–∫ documentId –Ω–µ —É–¥–∞–ª—Å—è:', error);
    }
    
    if (!documentId) {
      console.warn(`‚ö†Ô∏è DocumentId –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}, –∏—Å–ø–æ–ª—å–∑—É–µ–º orderId`);
      documentId = orderId;
    }
    
    const possibleFieldNames = ['order_items', 'orderItems', 'order_item'];
    
    for (const fieldName of possibleFieldNames) {
      console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ –ø–æ–ª–µ "${fieldName}"...`);
      
      const updateData = {
        [fieldName]: orderItemIds.map(id => ({ id: parseInt(id) }))
      };

      console.log(`üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è (${fieldName}):`, JSON.stringify(updateData, null, 2));

      const updateResponse = await fetch(`${STRAPI_URL}/api/orders/${documentId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          data: updateData
        })
      });

      if (updateResponse.ok) {
        const result = await updateResponse.json();
        console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–ª–µ "${fieldName}" —Å–æ —Å–≤—è–∑—è–º–∏ –Ω–∞ ${orderItemIds.length} –ø–æ–∑–∏—Ü–∏–π`);
        console.log(`üìã –ù–æ–≤—ã–π ID –∑–∞–∫–∞–∑–∞: ${result.data?.id || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        return; 
      } else {
        const errorText = await updateResponse.text();
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ –ø–æ–ª–µ "${fieldName}":`, errorText);
      }
    }
    
    for (const fieldName of possibleFieldNames) {
      const connectData = {
        [fieldName]: {
          connect: orderItemIds.map(id => ({ id: parseInt(id) }))
        }
      };
      
      const connectResponse = await fetch(`${STRAPI_URL}/api/orders/${documentId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          data: connectData
        })
      });
      
      if (connectResponse.ok) {
        console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ connect –≤ –ø–æ–ª–µ "${fieldName}"`);
        return;
      } else {
        const connectError = await connectResponse.text();
        console.warn(`‚ö†Ô∏è Connect —á–µ—Ä–µ–∑ "${fieldName}" –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, connectError);
      }
    }
    
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${orderId}:`, error);
  }
}

async function verifyOrderLinks(orderId: string): Promise<void> {
  try {
    
    const populateOptions = ['order_items', 'orderItems', 'order_item'];
    
    for (const populateField of populateOptions) {
      try {
        const orderResponse = await fetch(
          `${STRAPI_URL}/api/orders/${orderId}?populate=${populateField}`,
          {
            headers: { 'Content-Type': 'application/json' }
          }
        );
        
        if (orderResponse.ok) {
          const orderData = await orderResponse.json();
          const orderItems = orderData.data?.[populateField] || [];
          
          console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ ${orderId} —á–µ—Ä–µ–∑ –ø–æ–ª–µ "${populateField}":`);
          console.log(`  - –°–≤—è–∑–∞–Ω–Ω—ã—Ö items: ${Array.isArray(orderItems) ? orderItems.length : (orderItems ? 1 : 0)}`);
          
          if (Array.isArray(orderItems) && orderItems.length > 0) {
            console.log(`‚úÖ –£ –∑–∞–∫–∞–∑–∞ ${orderId} –µ—Å—Ç—å ${orderItems.length} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ –ø–æ–ª–µ "${populateField}"`);
            orderItems.forEach((item: any, index: number) => {
              console.log(`  ${index + 1}. ID: ${item.id}, Product: ${item.productName}`);
            });
            return;
          }
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –ø–æ–ª–µ "${populateField}":`, error);
      }
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–µ–π:`, error);
  }
}

function generateOrderNumber(): string {
  const now = new Date();
  const year = now.getFullYear().toString().slice(-2);
  const month = (now.getMonth() + 1).toString().padStart(2, '0');
  const day = now.getDate().toString().padStart(2, '0');
  const random = Math.floor(Math.random() * 999).toString().padStart(3, '0');
  
  return `TS-${year}${month}${day}${random}`;
}

function validateOrderData(data: CreateOrderData): { isValid: boolean; error?: string } {
  if (!data.customerInfo?.name?.trim()) {
    return { isValid: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è' };
  }

  if (!data.customerInfo?.phone?.trim()) {
    return { isValid: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è' };
  }

  const phoneRegex = /^[+]?[0-9\s\-\(\)]{10,}$/;
  if (!phoneRegex.test(data.customerInfo.phone.trim())) {
    return { isValid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞' };
  }

  if (!data.items || !Array.isArray(data.items) || data.items.length === 0) {
    return { isValid: false, error: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' };
  }

  if (!data.totalAmount || data.totalAmount <= 0) {
    return { isValid: false, error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞' };
  }

  if (!data.deliveryMethod || !data.paymentMethod) {
    return { isValid: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –æ–ø–ª–∞—Ç—ã' };
  }

  for (let i = 0; i < data.items.length; i++) {
    const item = data.items[i];
    if (!item.productId || !item.size || !item.quantity || !item.priceAtTime) {
      return { isValid: false, error: `–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ #${i + 1}` };
    }
    
    if (item.quantity <= 0 || item.priceAtTime <= 0) {
      return { isValid: false, error: `–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ #${i + 1}` };
    }
  }

  return { isValid: true };
}

async function findSizeId(productId: string, sizeValue: string): Promise<string | null> {
  try {
    
    const productResponse = await fetch(
      `${STRAPI_URL}/api/products?filters[id][$eq]=${productId}&populate=sizes`,
      {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      }
    );

    if (productResponse.ok) {
      const productData = await productResponse.json();
      
      if (productData.data && productData.data.length > 0) {
        const product = productData.data[0];
        
        if (product.sizes && Array.isArray(product.sizes)) {
          const targetSize = product.sizes.find((size: any) => 
            size.value === sizeValue
          );
          
          if (targetSize) {
            return targetSize.id.toString();
          }
        }
      }
    }

    const sizeResponse = await fetch(
      `${STRAPI_URL}/api/sizes?filters[value][$eq]=${sizeValue}&populate=*`,
      {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      }
    );

    if (sizeResponse.ok) {
      const sizeData = await sizeResponse.json();
      
      if (sizeData.data && sizeData.data.length > 0) {
        const firstSize = sizeData.data[0];
        return firstSize.id.toString();
      }
    }

    return null;
    
  } catch (error) {
    return null;
  }
}

function formatAdminNotification(orderNumber: string, orderData: CreateOrderData, savedData: any): string {
  const { customerInfo, items, totalAmount, deliveryMethod, paymentMethod } = orderData;
  
  let message = `üõçÔ∏è –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n`;
  message += `üìã –ù–æ–º–µ—Ä: ${orderNumber}\n`;
  message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${customerInfo.name}\n`;
  message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${customerInfo.phone}\n`;
  
  if (customerInfo.email) {
    message += `üìß Email: ${customerInfo.email}\n`;
  }
  
  message += `\nüì¶ –¢–æ–≤–∞—Ä—ã (${items.length} —à—Ç.):\n`;
  items.forEach((item, index) => {
    message += `${index + 1}. ${item.productName || item.productId} (${item.size}) √ó ${item.quantity} = ${(item.priceAtTime * item.quantity).toLocaleString('ru-RU')}‚ÇΩ\n`;
  });
  
  message += `\nüí∞ –ò—Ç–æ–≥–æ: ${totalAmount.toLocaleString('ru-RU')}‚ÇΩ\n`;
  message += `üöö –î–æ—Å—Ç–∞–≤–∫–∞: ${getDeliveryMethodName(deliveryMethod)}\n`;
  message += `üí≥ –û–ø–ª–∞—Ç–∞: ${getPaymentMethodName(paymentMethod)}\n`;
  
  if (savedData.deliveryAddress) {
    message += `üìç –ê–¥—Ä–µ—Å: ${savedData.deliveryAddress}\n`;
  }
  
  if (savedData.notes) {
    message += `üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${savedData.notes}\n`;
  }
  
  message += `\n‚è∞ ${new Date().toLocaleString('ru-RU')}`;
  
  return message;
}

function formatAdminNotificationHtml(orderNumber: string, orderData: CreateOrderData, savedData: any): string {
  const { customerInfo, items, totalAmount, deliveryMethod, paymentMethod } = orderData;
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ${orderNumber}</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
        .container { max-width: 600px; margin: 0 auto; background-color: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { background-color: #2c3e50; color: white; padding: 20px; text-align: center; }
        .content { padding: 30px; }
        .order-info { background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; }
        .customer-info { margin-bottom: 25px; }
        .items-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .items-table th, .items-table td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
        .items-table th { background-color: #f1f2f6; font-weight: bold; }
        .total { font-size: 18px; font-weight: bold; text-align: right; margin: 20px 0; color: #27ae60; }
        .delivery-payment { display: flex; justify-content: space-between; margin: 20px 0; }
        .delivery-payment > div { flex: 1; margin: 0 10px; background-color: #f8f9fa; padding: 15px; border-radius: 5px; }
        .timestamp { text-align: center; color: #7f8c8d; font-size: 14px; margin-top: 30px; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>üõçÔ∏è –ù–û–í–´–ô –ó–ê–ö–ê–ó!</h1>
          <h2>–ó–∞–∫–∞–∑ ‚Ññ${orderNumber}</h2>
        </div>
        
        <div class="content">
          <div class="customer-info">
            <h3>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:</h3>
            <p><strong>–ò–º—è:</strong> ${customerInfo.name}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${customerInfo.phone}</p>
            ${customerInfo.email ? `<p><strong>Email:</strong> ${customerInfo.email}</p>` : ''}
          </div>

          <h3>üì¶ –ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (${items.length} —à—Ç.):</h3>
          <table class="items-table">
            <thead>
              <tr>
                <th>‚Ññ</th>
                <th>–¢–æ–≤–∞—Ä</th>
                <th>–†–∞–∑–º–µ—Ä</th>
                <th>–ö–æ–ª-–≤–æ</th>
                <th>–¶–µ–Ω–∞</th>
                <th>–°—É–º–º–∞</th>
              </tr>
            </thead>
            <tbody>
              ${items.map((item, index) => `
                <tr>
                  <td>${index + 1}</td>
                  <td>${item.productName || item.productId}</td>
                  <td>${item.size}</td>
                  <td>${item.quantity}</td>
                  <td>${item.priceAtTime.toLocaleString('ru-RU')}‚ÇΩ</td>
                  <td>${(item.priceAtTime * item.quantity).toLocaleString('ru-RU')}‚ÇΩ</td>
                </tr>
              `).join('')}
            </tbody>
          </table>

          <div class="total">
            üí∞ –ò—Ç–æ–≥–æ: ${totalAmount.toLocaleString('ru-RU')}‚ÇΩ
          </div>

          <div class="delivery-payment">
            <div>
              <h4>üöö –î–æ—Å—Ç–∞–≤–∫–∞:</h4>
              <p>${getDeliveryMethodName(deliveryMethod)}</p>
              ${savedData.deliveryAddress ? `<p><strong>–ê–¥—Ä–µ—Å:</strong> ${savedData.deliveryAddress}</p>` : ''}
            </div>
            <div>
              <h4>üí≥ –û–ø–ª–∞—Ç–∞:</h4>
              <p>${getPaymentMethodName(paymentMethod)}</p>
            </div>
          </div>

          ${savedData.notes ? `
            <div class="order-info">
              <h4>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</h4>
              <p>${savedData.notes}</p>
            </div>
          ` : ''}

          <div class="timestamp">
            ‚è∞ ${new Date().toLocaleString('ru-RU')}
          </div>
        </div>
      </div>
    </body>
    </html>
  `;
}

function getDeliveryMethodName(method: string): string {
  const methods = {
    'store_pickup': '–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞',
    'courier_ts': '–ö—É—Ä—å–µ—Ä TS',
    'cdek_pickup': '–°–î–≠–ö –¥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏',
    'cdek_courier': '–°–î–≠–ö –∫—É—Ä—å–µ—Ä–æ–º'
  };
  //@ts-ignore
  return methods[method] || method;
}

function getPaymentMethodName(method: string): string {
  const methods = {
    'card': '–û–Ω–ª–∞–π–Ω –∫–∞—Ä—Ç–æ–π',
    'cash_vladivostok': '–ù–∞–ª–∏—á–Ω—ã–º–∏ –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ'
  };
  //@ts-ignore
  return methods[method] || method;
}