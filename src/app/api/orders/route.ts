// app/api/orders/route.ts
import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.STRAPI_URL || 'http://localhost:1337';
const STRAPI_API_TOKEN = process.env.STRAPI_API_TOKEN;

// POST /api/orders - —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ API: –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑...');
    
    const body = await request.json();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    const validation = validateOrderData(body);
    if (!validation.isValid) {
      return NextResponse.json(
        { error: validation.error },
        { status: 400 }
      );
    }

    const { customerInfo, items, totalAmount, deliveryAddress, notes } = body;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const orderNumber = `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 5).toUpperCase()}`;

    const headers: HeadersInit = {
      'Content-Type': 'application/json',
    };
    
    if (STRAPI_API_TOKEN) {
      headers['Authorization'] = `Bearer ${STRAPI_API_TOKEN}`;
    }

    // 1. –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–∫–∞–∑ –≤ Strapi
    const orderResponse = await fetch(`${STRAPI_URL}/api/orders`, {
      method: 'POST',
      headers,
      body: JSON.stringify({
        data: {
          orderNumber,
          customerName: customerInfo.name,
          customerPhone: customerInfo.phone,
          customerEmail: customerInfo.email || '',
          totalAmount,
          orderStatus: 'pending',
          paymentStatus: 'pending',
          deliveryAddress: deliveryAddress || '',
          notes: notes || '',
        }
      })
    });

    if (!orderResponse.ok) {
      const errorData = await orderResponse.json();
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Strapi:', errorData);
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${orderResponse.status}`);
    }

    const orderResult = await orderResponse.json();
    const orderId = orderResult.data.id;

    console.log(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ID: ${orderId}`);

    // 2. –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
    const orderItemsPromises = items.map(async (item: any) => {
      try {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫–∞–∑–∞
        const orderItemResponse = await fetch(`${STRAPI_URL}/api/order-items`, {
          method: 'POST',
          headers,
          body: JSON.stringify({
            data: {
              order: orderId,
              product: parseInt(item.productId),
              size: item.size,
              quantity: item.quantity,
              priceAtTime: item.priceAtTime,
            }
          })
        });

        if (!orderItemResponse.ok) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${item.productId}`);
          return false;
        }

        // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä
        await reserveProduct(item.productId, item.quantity, headers);
        return true;

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ ${item.productId}:`, error);
        return false;
      }
    });

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
    const results = await Promise.all(orderItemsPromises);
    const successCount = results.filter(Boolean).length;

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: ${successCount}/${items.length}`);

    if (successCount === 0) {
      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å, —É–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
      await fetch(`${STRAPI_URL}/api/orders/${orderId}`, {
        method: 'DELETE',
        headers
      });
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞');
    }

    console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderNumber} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
    
    return NextResponse.json({
      success: true,
      orderId: orderNumber,
      strapiOrderId: orderId,
      processedItems: successCount,
      totalItems: items.length
    });

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞' 
      },
      { status: 500 }
    );
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
function validateOrderData(data: any): { isValid: boolean; error?: string } {
  if (!data.customerInfo) {
    return { isValid: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ' };
  }

  if (!data.customerInfo.name || !data.customerInfo.phone) {
    return { isValid: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è' };
  }

  if (!data.items || !Array.isArray(data.items) || data.items.length === 0) {
    return { isValid: false, error: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' };
  }

  if (!data.totalAmount || data.totalAmount <= 0) {
    return { isValid: false, error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞' };
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π
  for (const item of data.items) {
    if (!item.productId || !item.size || !item.quantity || !item.priceAtTime) {
      return { isValid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ' };
    }
    
    if (item.quantity <= 0 || item.priceAtTime <= 0) {
      return { isValid: false, error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞' };
    }
  }

  return { isValid: true };
}

// –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async function reserveProduct(productId: string, quantity: number, headers: HeadersInit): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    const productResponse = await fetch(`${STRAPI_URL}/api/products/${productId}`, {
      headers
    });
    
    if (!productResponse.ok) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä ${productId} –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è`);
      return;
    }

    const productData = await productResponse.json();
    const currentReserved = productData.data.attributes.reservedQuantity || 0;
    const stockQuantity = productData.data.attributes.stockQuantity || 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞
    if (stockQuantity < currentReserved + quantity) {
      console.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ ${productId} –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è`);
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ (ID: ${productId})`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
    const updateResponse = await fetch(`${STRAPI_URL}/api/products/${productId}`, {
      method: 'PUT',
      headers,
      body: JSON.stringify({
        data: {
          reservedQuantity: currentReserved + quantity
        }
      })
    });

    if (updateResponse.ok) {
      console.log(`‚úÖ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ ${quantity} –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ ${productId}`);
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${productId}`);
      throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${productId}`);
    }

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${productId}:`, error);
    throw error;
  }
}