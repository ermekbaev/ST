// src/app/api/orders/route.ts - –≠–¢–ê–ü 1: –ë–ï–ó –û–ü–õ–ê–¢–´
import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';
const STRAPI_API_TOKEN = process.env.STRAPI_API_TOKEN;
const ADMIN_TELEGRAM_CHAT_ID = process.env.ADMIN_TELEGRAM_CHAT_ID;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

interface CreateOrderData {
  customerInfo: {
    name: string;
    phone: string;
    email?: string;
  };
  items: Array<{
    productId: string;
    size: string;
    quantity: number;
    priceAtTime: number;
    productName?: string;
  }>;
  totalAmount: number;
  deliveryMethod: string;
  paymentMethod: string;
  deliveryAddress?: string;
  notes?: string;
}

// POST /api/orders - —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
export async function POST(request: NextRequest) {
  try {
    console.log('üìù API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
    
    const body: CreateOrderData = await request.json();
    
    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const validation = validateOrderData(body);
    if (!validation.isValid) {
      console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ –ø—Ä–æ—à–ª–∞:', validation.error);
      return NextResponse.json(
        { success: false, error: validation.error },
        { status: 400 }
      );
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const orderNumber = generateOrderNumber();
    console.log('üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:', orderNumber);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Strapi
    const orderData = {
      orderNumber,
      customerName: body.customerInfo.name,
      customerPhone: body.customerInfo.phone,
      customerEmail: body.customerInfo.email || '',
      totalAmount: body.totalAmount,
      deliveryMethod: body.deliveryMethod,
      paymentMethod: body.paymentMethod,
      deliveryAddress: body.deliveryAddress || '',
      notes: body.notes || '',
      orderStatus: 'pending',
      paymentStatus: body.paymentMethod === 'cash_vladivostok' ? 'pending_cash' : 'pending_online',
      createdAt: new Date().toISOString(),
    };

    let strapiOrderId = null;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Strapi (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if (STRAPI_URL && STRAPI_API_TOKEN) {
      try {
        strapiOrderId = await saveOrderToStrapi(orderData, body.items);
        console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Strapi —Å ID:', strapiOrderId);
      } catch (strapiError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Strapi:', strapiError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤—Ä—É—á–Ω—É—é
      }
    } else {
      console.warn('‚ö†Ô∏è Strapi –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∑–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∞—Ö');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await sendAdminNotification(orderNumber, body, orderData);

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –∞—É–¥–∏—Ç–∞
    console.log('üìã –ó–ê–ö–ê–ó –°–û–ó–î–ê–ù:', {
      orderNumber,
      customer: `${body.customerInfo.name} (${body.customerInfo.phone})`,
      items: body.items.length,
      total: body.totalAmount,
      delivery: body.deliveryMethod,
      payment: body.paymentMethod,
      strapiId: strapiOrderId,
      timestamp: new Date().toISOString()
    });

    return NextResponse.json({
      success: true,
      orderNumber,
      strapiOrderId,
      message: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      nextStep: body.paymentMethod === 'cash_vladivostok' 
        ? '–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'
        : '–í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–æ–π'
    });

  } catch (error) {
    console.error('‚ùå API: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.' 
      },
      { status: 500 }
    );
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
function generateOrderNumber(): string {
  const timestamp = Date.now().toString();
  const random = Math.random().toString(36).substr(2, 4).toUpperCase();
  return `TS-${timestamp.slice(-6)}-${random}`;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
function validateOrderData(data: CreateOrderData): { isValid: boolean; error?: string } {
  if (!data.customerInfo?.name?.trim()) {
    return { isValid: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è' };
  }

  if (!data.customerInfo?.phone?.trim()) {
    return { isValid: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è' };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
  const phoneRegex = /^[+]?[0-9\s\-\(\)]{10,}$/;
  if (!phoneRegex.test(data.customerInfo.phone.trim())) {
    return { isValid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞' };
  }

  if (!data.items || !Array.isArray(data.items) || data.items.length === 0) {
    return { isValid: false, error: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' };
  }

  if (!data.totalAmount || data.totalAmount <= 0) {
    return { isValid: false, error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞' };
  }

  if (!data.deliveryMethod || !data.paymentMethod) {
    return { isValid: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –æ–ø–ª–∞—Ç—ã' };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
  for (let i = 0; i < data.items.length; i++) {
    const item = data.items[i];
    if (!item.productId || !item.size || !item.quantity || !item.priceAtTime) {
      return { isValid: false, error: `–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ #${i + 1}` };
    }
    
    if (item.quantity <= 0 || item.priceAtTime <= 0) {
      return { isValid: false, error: `–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ #${i + 1}` };
    }
  }

  return { isValid: true };
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ Strapi
async function saveOrderToStrapi(orderData: any, items: CreateOrderData['items']): Promise<string> {
  const headers: HeadersInit = {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${STRAPI_API_TOKEN}`,
  };

  // 1. –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–∫–∞–∑
  const orderResponse = await fetch(`${STRAPI_URL}/api/orders`, {
    method: 'POST',
    headers,
    body: JSON.stringify({ data: orderData })
  });

  if (!orderResponse.ok) {
    const errorText = await orderResponse.text();
    throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Strapi: ${orderResponse.status} - ${errorText}`);
  }

  const orderResult = await orderResponse.json();
  const orderId = orderResult.data.id;

  // 2. –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
  const itemPromises = items.map(async (item, index) => {
    try {
      const itemResponse = await fetch(`${STRAPI_URL}/api/order-items`, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          data: {
            order: orderId,
            productId: item.productId,
            productName: item.productName || `–¢–æ–≤–∞—Ä ${item.productId}`,
            size: item.size,
            quantity: item.quantity,
            priceAtTime: item.priceAtTime,
          }
        })
      });

      if (!itemResponse.ok) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ ${index + 1}:`, await itemResponse.text());
        return false;
      }

      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ ${index + 1}:`, error);
      return false;
    }
  });

  const results = await Promise.all(itemPromises);
  const successCount = results.filter(Boolean).length;
  
  console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞: ${successCount}/${items.length}`);

  return orderId;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
async function sendAdminNotification(orderNumber: string, orderData: CreateOrderData, savedData: any): Promise<void> {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const message = formatAdminNotification(orderNumber, orderData, savedData);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
    if (TELEGRAM_BOT_TOKEN && ADMIN_TELEGRAM_CHAT_ID) {
      await sendTelegramNotification(message);
    } else {
      console.log('üìß –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–£ (Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω):', message);
    }

    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error);
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function formatAdminNotification(orderNumber: string, orderData: CreateOrderData, savedData: any): string {
  const { customerInfo, items, totalAmount, deliveryMethod, paymentMethod } = orderData;
  
  let message = `üõçÔ∏è –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n`;
  message += `üìã –ù–æ–º–µ—Ä: ${orderNumber}\n`;
  message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${customerInfo.name}\n`;
  message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${customerInfo.phone}\n`;
  
  if (customerInfo.email) {
    message += `üìß Email: ${customerInfo.email}\n`;
  }
  
  message += `\nüì¶ –¢–æ–≤–∞—Ä—ã (${items.length} —à—Ç.):\n`;
  items.forEach((item, index) => {
    message += `${index + 1}. ${item.productName || item.productId} (${item.size}) √ó ${item.quantity} = ${item.priceAtTime * item.quantity}‚ÇΩ\n`;
  });
  
  message += `\nüí∞ –ò—Ç–æ–≥–æ: ${totalAmount}‚ÇΩ\n`;
  message += `üöö –î–æ—Å—Ç–∞–≤–∫–∞: ${getDeliveryMethodName(deliveryMethod)}\n`;
  message += `üí≥ –û–ø–ª–∞—Ç–∞: ${getPaymentMethodName(paymentMethod)}\n`;
  
  if (savedData.deliveryAddress) {
    message += `üìç –ê–¥—Ä–µ—Å: ${savedData.deliveryAddress}\n`;
  }
  
  if (savedData.notes) {
    message += `üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${savedData.notes}\n`;
  }
  
  message += `\n‚è∞ ${new Date().toLocaleString('ru-RU')}`;
  
  return message;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
async function sendTelegramNotification(message: string): Promise<void> {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: ADMIN_TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      })
    });

    if (response.ok) {
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    } else {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', errorText);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
function getDeliveryMethodName(method: string): string {
  const methods = {
    'store_pickup': '–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞',
    'courier_ts': '–ö—É—Ä—å–µ—Ä TS',
    'cdek_pickup': '–°–î–≠–ö –¥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏',
    'cdek_courier': '–°–î–≠–ö –∫—É—Ä—å–µ—Ä–æ–º'
  };
  //@ts-ignore
  return methods[method] || method;
}

function getPaymentMethodName(method: string): string {
  const methods = {
    'card': '–û–Ω–ª–∞–π–Ω –∫–∞—Ä—Ç–æ–π (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ)',
    'cash_vladivostok': '–ù–∞–ª–∏—á–Ω—ã–º–∏ –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ'
  };
  //@ts-ignore
  return methods[method] || method;
}