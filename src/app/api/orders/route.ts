// src/app/api/orders/route.ts - –ü–û–õ–ù–ê–Ø –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –°–û –í–°–ï–ú–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò
import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';
const STRAPI_API_TOKEN = process.env.STRAPI_API_TOKEN;
const ADMIN_TELEGRAM_CHAT_ID = process.env.ADMIN_TELEGRAM_CHAT_ID;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

interface CreateOrderData {
  customerInfo: {
    name: string;
    phone: string;
    email?: string;
  };
  items: Array<{
    productId: string;
    size: string;
    quantity: number;
    priceAtTime: number;
    productName?: string;
  }>;
  totalAmount: number;
  deliveryMethod: string;
  paymentMethod: string;
  deliveryAddress?: string;
  notes?: string;
}

// POST /api/orders - —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
export async function POST(request: NextRequest) {
  try {
    console.log('üìù API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
    
    const body: CreateOrderData = await request.json();
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    const authHeader = request.headers.get('authorization');
    const userToken = authHeader?.replace('Bearer ', '') || null;
    
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Ç–æ–∫–µ–Ω–∞:', {
      hasUserToken: !!userToken,
      tokenPreview: userToken ? `${userToken.substring(0, 20)}...` : '–ù–ï–¢ –¢–û–ö–ï–ù–ê'
    });

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å
    let userId: string | null = null;
    if (userToken) {
      try {
        const userResponse = await fetch(`${STRAPI_URL}/api/users/me`, {
          headers: {
            'Authorization': `Bearer ${userToken}`,
            'Content-Type': 'application/json',
          },
        });

        if (userResponse.ok) {
          const userData = await userResponse.json();
          userId = userData.id.toString();
          console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', userData.id, userData.email);
        } else {
          console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–π –∑–∞–∫–∞–∑');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    }
    
    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const validation = validateOrderData(body);
    if (!validation.isValid) {
      console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ –ø—Ä–æ—à–ª–∞:', validation.error);
      return NextResponse.json(
        { success: false, error: validation.error },
        { status: 400 }
      );
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const orderNumber = generateOrderNumber();
    console.log('üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:', orderNumber);

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Strapi —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–≤—è–∑—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const orderData = {
      orderNumber,
      customerName: body.customerInfo.name,
      customerPhone: body.customerInfo.phone,
      customerEmail: body.customerInfo.email || '',
      totalAmount: body.totalAmount,
      deliveryMethod: body.deliveryMethod,
      paymentMethod: body.paymentMethod,
      deliveryAddress: body.deliveryAddress || '',
      notes: body.notes || '',
      orderStatus: 'pending',
      paymentStatus: body.paymentMethod === 'cash_vladivostok' ? 'pending' : 'pending',
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      ...(userId && { 
        user: {
          connect: [{ id: parseInt(userId) }]
        }
      })
    };

    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ Strapi...', {
      isUserOrder: !!userId,
      userId: userId || 'guest'
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ Strapi
    const orderId = await saveOrderToStrapi(orderData, body.items);
    
    console.log(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Strapi —Å ID: ${orderId}`, userId ? '(–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)' : '(–≥–æ—Å—Ç–µ–≤–æ–π)');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await sendAdminNotification(orderNumber, body, orderData);

    return NextResponse.json({
      success: true,
      orderId,
      orderNumber,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      userOrder: !!userId
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
function generateOrderNumber(): string {
  const now = new Date();
  const year = now.getFullYear().toString().slice(-2);
  const month = (now.getMonth() + 1).toString().padStart(2, '0');
  const day = now.getDate().toString().padStart(2, '0');
  const random = Math.floor(Math.random() * 999).toString().padStart(3, '0');
  
  return `ORD${year}${month}${day}${random}`;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
function validateOrderData(data: CreateOrderData): { isValid: boolean; error?: string } {
  if (!data.customerInfo?.name?.trim()) {
    return { isValid: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è' };
  }

  if (!data.customerInfo?.phone?.trim()) {
    return { isValid: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è' };
  }

  const phoneRegex = /^[+]?[0-9\s\-\(\)]{10,}$/;
  if (!phoneRegex.test(data.customerInfo.phone.trim())) {
    return { isValid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞' };
  }

  if (!data.items || !Array.isArray(data.items) || data.items.length === 0) {
    return { isValid: false, error: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' };
  }

  if (!data.totalAmount || data.totalAmount <= 0) {
    return { isValid: false, error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞' };
  }

  if (!data.deliveryMethod || !data.paymentMethod) {
    return { isValid: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –æ–ø–ª–∞—Ç—ã' };
  }

  for (let i = 0; i < data.items.length; i++) {
    const item = data.items[i];
    if (!item.productId || !item.size || !item.quantity || !item.priceAtTime) {
      return { isValid: false, error: `–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ #${i + 1}` };
    }
    
    if (item.quantity <= 0 || item.priceAtTime <= 0) {
      return { isValid: false, error: `–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ #${i + 1}` };
    }
  }

  return { isValid: true };
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∏—Å–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞–±–æ—á–∏–π API endpoint
async function findSizeId(productId: string, sizeValue: string): Promise<string | null> {
  try {
    console.log(`üîç –ò—â–µ–º —Ä–∞–∑–º–µ—Ä "${sizeValue}" –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productId}...`);
    
    // ‚úÖ –ú–ï–¢–û–î 1: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤
    const productResponse = await fetch(
      `${STRAPI_URL}/api/products?filters[id][$eq]=${productId}&populate=sizes`,
      {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      }
    );

    if (productResponse.ok) {
      const productData = await productResponse.json();
      
      if (productData.data && productData.data.length > 0) {
        const product = productData.data[0];
        
        if (product.sizes && Array.isArray(product.sizes)) {
          // ‚úÖ –ò—â–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ä–µ–¥–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞
          const targetSize = product.sizes.find((size: any) => 
            size.value === sizeValue
          );
          
          if (targetSize) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–∑–º–µ—Ä ID —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä: ${targetSize.id} –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è "${sizeValue}"`);
            return targetSize.id.toString();
          }
        }
      }
    }

    // ‚úÖ –ú–ï–¢–û–î 2: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
    console.log(`üîç –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ä–∞–∑–º–µ—Ä–∞ "${sizeValue}"...`);
    
    const sizeResponse = await fetch(
      `${STRAPI_URL}/api/sizes?filters[value][$eq]=${sizeValue}&populate=*`,
      {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      }
    );

    if (sizeResponse.ok) {
      const sizeData = await sizeResponse.json();
      
      if (sizeData.data && sizeData.data.length > 0) {
        // –ò—â–µ–º —Ä–∞–∑–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω—É–∂–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
        for (const size of sizeData.data) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —á–µ—Ä–µ–∑ productName –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
          if (size.productName && size.productName.includes('Polo Ralph Lauren Logo T')) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–∑–º–µ—Ä ID —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫: ${size.id} –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è "${sizeValue}"`);
            return size.id.toString();
          }
        }
        
        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑–º–µ—Ä —Å —Ç–∞–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        const firstSize = sizeData.data[0];
        console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä ID: ${firstSize.id} –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è "${sizeValue}"`);
        return firstSize.id.toString();
      }
    }

    // ‚úÖ –ú–ï–¢–û–î 3: –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ 2138 (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤)
    console.log(`üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productId}...`);
    
    const knownSizes: Record<string, Record<string, string>> = {
      '2138': {
        'XS': '12405',
        'S': '12407', 
        'M': '12409',
        'L': '12411',
        'XL': '12413',
        'XXL': '12415'
      }
    };
    
    if (knownSizes[productId] && knownSizes[productId][sizeValue]) {
      const sizeId = knownSizes[productId][sizeValue];
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–∑–º–µ—Ä ID –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${sizeId} –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è "${sizeValue}"`);
      return sizeId;
    }

    console.log(`‚ùå –†–∞–∑–º–µ—Ä "${sizeValue}" –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productId} –Ω–∏–∫–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º`);
    return null;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–º–µ—Ä–∞:', error);
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤ - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const knownSizes: Record<string, Record<string, string>> = {
      '2138': {
        'XS': '12405',
        'S': '12407', 
        'M': '12409',
        'L': '12411',
        'XL': '12413',
        'XXL': '12415'
      }
    };
    
    if (knownSizes[productId] && knownSizes[productId][sizeValue]) {
      const sizeId = knownSizes[productId][sizeValue];
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–∑–º–µ—Ä ID –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${sizeId} –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è "${sizeValue}"`);
      return sizeId;
    }
    
    return null;
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ Strapi —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏ (–ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û)
async function saveOrderToStrapi(orderData: any, items: CreateOrderData['items']): Promise<string> {
  const headers: HeadersInit = {
    'Content-Type': 'application/json',
  };

  console.log('üîÑ –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–∫–∞–∑ –≤ Strapi...');

  // 1. –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–∫–∞–∑
  const orderResponse = await fetch(`${STRAPI_URL}/api/orders`, {
    method: 'POST',
    headers,
    body: JSON.stringify({ data: orderData })
  });

  if (!orderResponse.ok) {
    const errorText = await orderResponse.text();
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ Strapi:', errorText);
    throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Strapi: ${orderResponse.status} - ${errorText}`);
  }

  const orderResult = await orderResponse.json();
  const orderId = orderResult.data.id;

  console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ID: ${orderId}`);

  // 2. ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
  console.log(`\nüîÑ === –°–û–ó–î–ê–ï–ú ${items.length} –ü–û–ó–ò–¶–ò–ô –ó–ê–ö–ê–ó–ê –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û ===`);
  
  const createdOrderItems: string[] = [];
  let successCount = 0;

  for (let index = 0; index < items.length; index++) {
    const item = items[index];
    
    try {
      console.log(`\nüîÑ === –°–û–ó–î–ê–ï–ú –ü–û–ó–ò–¶–ò–Æ ${index + 1}/${items.length} ===`);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞–∑–º–µ—Ä
      const sizeId = await findSizeId(item.productId, item.size);
      
      // ‚úÖ –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
      if (!sizeId) {
        console.warn(`‚ö†Ô∏è –†–∞–∑–º–µ—Ä "${item.size}" –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${item.productId}, —Å–æ–∑–¥–∞–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞`);
      }

      // ‚úÖ –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ô —Å–≤—è–∑—å—é product
      const itemData = {
        orderId: orderId.toString(),
        productId: item.productId,
        productName: item.productName || `–¢–æ–≤–∞—Ä ${item.productId}`,
        quantity: item.quantity,
        priceAtTime: item.priceAtTime,
        
        // ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø —Å–≤—è–∑—å —Å product (–í–°–ï–ì–î–ê!)
        product: {
          connect: [{ id: parseInt(item.productId) }]
        },
        
        // ‚úÖ –†–∞–∑–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
        ...(sizeId && {
          size: {
            connect: [{ id: parseInt(sizeId) }]
          }
        }),
        
        // ‚úÖ –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑–æ–º
        orders: {
          connect: [{ id: orderId }]
        }
      };

      console.log(`üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ ${index + 1}:`, {
        orderId: itemData.orderId,
        productId: itemData.productId,
        productName: itemData.productName,
        hasProductConnection: true, // –≤—Å–µ–≥–¥–∞ true
        hasSizeConnection: !!sizeId
      });

      const itemResponse = await fetch(`${STRAPI_URL}/api/order-items`, {
        method: 'POST',
        headers,
        body: JSON.stringify({ data: itemData })
      });

      if (!itemResponse.ok) {
        const errorText = await itemResponse.text();
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ ${index + 1}:`, errorText);
        
        // ‚úÖ FALLBACK: –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        console.log(`üîÑ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å fallback –ø–æ–∑–∏—Ü–∏—é ${index + 1} –±–µ–∑ —Å–≤—è–∑–µ–π...`);
        
        const fallbackData = {
          orderId: orderId.toString(),
          productId: item.productId,
          productName: item.productName || `–¢–æ–≤–∞—Ä ${item.productId}`,
          quantity: item.quantity,
          priceAtTime: item.priceAtTime
        };
        
        const fallbackResponse = await fetch(`${STRAPI_URL}/api/order-items`, {
          method: 'POST',
          headers,
          body: JSON.stringify({ data: fallbackData })
        });
        
        if (fallbackResponse.ok) {
          const fallbackResult = await fallbackResponse.json();
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ fallback –ø–æ–∑–∏—Ü–∏—è ${index + 1} —Å ID: ${fallbackResult.data.id} (–ë–ï–ó –°–í–Ø–ó–ï–ô)`);
          createdOrderItems.push(fallbackResult.data.id.toString());
          successCount++;
        } else {
          const fallbackError = await fallbackResponse.text();
          console.error(`‚ùå Fallback —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ${index + 1}:`, fallbackError);
        }
      } else {
        const itemResult = await itemResponse.json();
        const orderItemId = itemResult.data.id;
        console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏—è ${index + 1} —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${orderItemId} (–°–û –°–í–Ø–ó–Ø–ú–ò)`);
        
        createdOrderItems.push(orderItemId.toString());
        successCount++;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      if (index < items.length - 1) {
        console.log(`‚è≥ –ü–∞—É–∑–∞ 200ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–µ–π...`);
        await new Promise(resolve => setTimeout(resolve, 200));
      }
      
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ ${index + 1}:`, error);
    }
  }

  console.log(`\nüì¶ === –ò–¢–û–ì–ò –°–û–ó–î–ê–ù–ò–Ø –ü–û–ó–ò–¶–ò–ô ===`);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: ${successCount}/${items.length}`);
  console.log(`üìã ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: [${createdOrderItems.join(', ')}]`);

  if (successCount === 0) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞');
  }

  // ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å–æ —Å–≤—è–∑—è–º–∏ –Ω–∞ order-items
  if (createdOrderItems.length > 0) {
    await updateOrderWithItems(orderId, createdOrderItems);
    
    // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 1000)); // –ø–∞—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
    await verifyOrderLinks(orderId.toString());
  }

  return orderId.toString();
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å–æ —Å–≤—è–∑—è–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –≤ payments)
async function updateOrderWithItems(orderId: string, orderItemIds: string[]): Promise<void> {
  try {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ ${orderId} —Å–æ —Å–≤—è–∑—è–º–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: [${orderItemIds.join(', ')}]`);
    
    // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–£ –ñ–ï –õ–û–ì–ò–ö–£ –ß–¢–û –í PAYMENTS API
    let documentId = null;
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    try {
      const searchResponse = await fetch(`${STRAPI_URL}/api/orders?filters[id][$eq]=${orderId}`);
      
      if (searchResponse.ok) {
        const searchData = await searchResponse.json();
        if (searchData.data && searchData.data.length > 0) {
          documentId = searchData.data[0].documentId;
          console.log(`üîç –ù–∞–π–¥–µ–Ω documentId –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}: ${documentId}`);
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü–æ–∏—Å–∫ documentId –Ω–µ —É–¥–∞–ª—Å—è:', error);
    }
    
    if (!documentId) {
      console.warn(`‚ö†Ô∏è DocumentId –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}, –∏—Å–ø–æ–ª—å–∑—É–µ–º orderId`);
      documentId = orderId;
    }
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è —Å–≤—è–∑–∏
    const updateData = {
      order_item: orderItemIds.map(id => ({ id: parseInt(id) }))
    };

    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è:', JSON.stringify(updateData, null, 2));

    // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ß–ï–†–ï–ó documentId
    const updateResponse = await fetch(`${STRAPI_URL}/api/orders/${documentId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        data: updateData
      })
    });

    if (updateResponse.ok) {
      const result = await updateResponse.json();
      console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} (documentId: ${documentId}) –æ–±–Ω–æ–≤–ª–µ–Ω —Å–æ —Å–≤—è–∑—è–º–∏ –Ω–∞ ${orderItemIds.length} –ø–æ–∑–∏—Ü–∏–π`);
      console.log(`üìã –ù–æ–≤—ã–π ID –∑–∞–∫–∞–∑–∞: ${result.data?.id || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    } else {
      const errorText = await updateResponse.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${orderId} (documentId: ${documentId}):`, errorText);
      
      // ‚úÖ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –°–ü–û–°–û–ë: –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ connect
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ connect...');
      
      const alternativeData = {
        order_item: {
          connect: orderItemIds.map(id => ({ id: parseInt(id) }))
        }
      };
      
      const altResponse = await fetch(`${STRAPI_URL}/api/orders/${documentId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          data: alternativeData
        })
      });
      
      if (altResponse.ok) {
        console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±`);
      } else {
        const altError = await altResponse.text();
        console.error(`‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, altError);
        
        // ‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –°–ü–û–°–û–ë: –û–±–Ω–æ–≤–ª—è–µ–º order-items –Ω–∞–ø—Ä—è–º—É—é
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å order-items –Ω–∞–ø—Ä—è–º—É—é...');
        await updateOrderItemsDirectly(orderId, orderItemIds);
      }
    }
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${orderId}:`, error);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å order-items –Ω–∞–ø—Ä—è–º—É—é
    console.log('üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º order-items –Ω–∞–ø—Ä—è–º—É—é...');
    await updateOrderItemsDirectly(orderId, orderItemIds);
  }
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ order-items
async function updateOrderItemsDirectly(orderId: string, orderItemIds: string[]): Promise<void> {
  try {
    console.log(`üîß –û–±–Ω–æ–≤–ª—è–µ–º order-items –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}...`);
    
    for (const itemId of orderItemIds) {
      try {
        const updateResponse = await fetch(`${STRAPI_URL}/api/order-items/${itemId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            data: {
              orders: {
                connect: [{ id: parseInt(orderId) }]
              }
            }
          })
        });
        
        if (updateResponse.ok) {
          console.log(`‚úÖ Order-item ${itemId} —Å–≤—è–∑–∞–Ω —Å –∑–∞–∫–∞–∑–æ–º ${orderId}`);
        } else {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å order-item ${itemId} —Å –∑–∞–∫–∞–∑–æ–º ${orderId}`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è order-item ${itemId}:`, error);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log(`‚úÖ –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ order-items –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è order-items:`, error);
  }
}

// ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
async function verifyOrderLinks(orderId: string): Promise<void> {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}...`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑ —Å populate order_item
    const orderResponse = await fetch(
      `${STRAPI_URL}/api/orders/${orderId}?populate=order_item`,
      {
        headers: { 'Content-Type': 'application/json' }
      }
    );
    
    if (orderResponse.ok) {
      const orderData = await orderResponse.json();
      const orderItems = orderData.data?.order_item || [];
      
      console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ ${orderId}:`);
      console.log(`  - –°–≤—è–∑–∞–Ω–Ω—ã—Ö order_items: ${orderItems.length}`);
      
      if (orderItems.length === 0) {
        console.warn(`‚ö†Ô∏è –£ –∑–∞–∫–∞–∑–∞ ${orderId} –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö order_items!`);
      } else {
        console.log(`‚úÖ –£ –∑–∞–∫–∞–∑–∞ ${orderId} –µ—Å—Ç—å ${orderItems.length} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π`);
        orderItems.forEach((item: any, index: number) => {
          console.log(`  ${index + 1}. ID: ${item.id}, Product: ${item.productName}`);
        });
      }
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–µ–π:`, error);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
async function sendAdminNotification(orderNumber: string, orderData: CreateOrderData, savedData: any): Promise<void> {
  try {
    const message = formatAdminNotification(orderNumber, orderData, savedData);
    
    console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É...');
    
    if (TELEGRAM_BOT_TOKEN && ADMIN_TELEGRAM_CHAT_ID) {
      await sendTelegramNotification(message);
    } else {
      console.log('üìß –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–£ (Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω):\n', message);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error);
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function formatAdminNotification(orderNumber: string, orderData: CreateOrderData, savedData: any): string {
  const { customerInfo, items, totalAmount, deliveryMethod, paymentMethod } = orderData;
  
  let message = `üõçÔ∏è –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n`;
  message += `üìã –ù–æ–º–µ—Ä: ${orderNumber}\n`;
  message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${customerInfo.name}\n`;
  message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${customerInfo.phone}\n`;
  
  if (customerInfo.email) {
    message += `üìß Email: ${customerInfo.email}\n`;
  }
  
  message += `\nüì¶ –¢–æ–≤–∞—Ä—ã (${items.length} —à—Ç.):\n`;
  items.forEach((item, index) => {
    message += `${index + 1}. ${item.productName || item.productId} (${item.size}) √ó ${item.quantity} = ${(item.priceAtTime * item.quantity).toLocaleString('ru-RU')}‚ÇΩ\n`;
  });
  
  message += `\nüí∞ –ò—Ç–æ–≥–æ: ${totalAmount.toLocaleString('ru-RU')}‚ÇΩ\n`;
  message += `üöö –î–æ—Å—Ç–∞–≤–∫–∞: ${getDeliveryMethodName(deliveryMethod)}\n`;
  message += `üí≥ –û–ø–ª–∞—Ç–∞: ${getPaymentMethodName(paymentMethod)}\n`;
  
  if (savedData.deliveryAddress) {
    message += `üìç –ê–¥—Ä–µ—Å: ${savedData.deliveryAddress}\n`;
  }
  
  if (savedData.notes) {
    message += `üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${savedData.notes}\n`;
  }
  
  message += `\n‚è∞ ${new Date().toLocaleString('ru-RU')}`;
  
  return message;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
async function sendTelegramNotification(message: string): Promise<void> {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: ADMIN_TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      })
    });

    if (response.ok) {
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    } else {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', errorText);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
function getDeliveryMethodName(method: string): string {
  const methods = {
    'store_pickup': '–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞',
    'courier_ts': '–ö—É—Ä—å–µ—Ä TS',
    'cdek_pickup': '–°–î–≠–ö –¥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏',
    'cdek_courier': '–°–î–≠–ö –∫—É—Ä—å–µ—Ä–æ–º'
  };
  //@ts-ignore
  return methods[method] || method;
}

function getPaymentMethodName(method: string): string {
  const methods = {
    'card': '–û–Ω–ª–∞–π–Ω –∫–∞—Ä—Ç–æ–π',
    'cash_vladivostok': '–ù–∞–ª–∏—á–Ω—ã–º–∏ –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ'
  };
  //@ts-ignore
  return methods[method] || method;
}