// src/app/api/categories/route.ts
import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';

export async function GET() {
  try {
    console.log('üîÑ API: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Strapi...');
    
    const strapiUrl = `${STRAPI_URL}/api/categories?sort=name:asc`;
    console.log('üì° –ó–∞–ø—Ä–æ—Å –∫ Strapi:', strapiUrl);
    
    const strapiResponse = await fetch(strapiUrl, {
      headers: {
        'Content-Type': 'application/json',
      },
      next: { revalidate: 300 } // –ö–µ—à –Ω–∞ 5 –º–∏–Ω—É—Ç
    });

    console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç Strapi categories:', strapiResponse.status);

    if (!strapiResponse.ok) {
      console.error(`‚ùå Strapi categories –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${strapiResponse.status}`);
      return NextResponse.json(
        { 
          error: `Strapi –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${strapiResponse.status})`,
          categories: []
        },
        { status: strapiResponse.status }
      );
    }

    const strapiData = await strapiResponse.json();
    console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç Strapi:', strapiData.data?.length || 0);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Strapi
    let categories = [];
    
    if (strapiData.data && Array.isArray(strapiData.data)) {
      categories = strapiData.data.map((item: any) => ({
        id: item.id,
        name: item.name || item.attributes?.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        slug: item.slug || item.attributes?.slug || item.name?.toLowerCase()
      }));
    }

    console.log(`‚úÖ API: –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    
    return NextResponse.json({ 
      categories,
      total: categories.length 
    });

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Strapi',
        categories: [],
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}