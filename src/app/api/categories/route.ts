// src/app/api/categories/route.ts - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const sortCategories = (categories: string[]): string[] => {
  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
  const uniqueCategories = [...new Set(categories)];
  
  return uniqueCategories.sort((a, b) => {
    return a.localeCompare(b, 'ru', { sensitivity: 'base' });
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
const getAllCategoriesFromStrapi = async () => {
  console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Strapi...');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  const firstPageUrl = `${STRAPI_URL}/api/categories?pagination[page]=1&pagination[pageSize]=100`;
  const firstResponse = await fetch(firstPageUrl, {
    headers: { 'Content-Type': 'application/json' },
    next: { revalidate: 300 }
  });

  if (!firstResponse.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${firstResponse.status}`);
  }

  const firstData = await firstResponse.json();
  const totalItems = firstData.meta?.pagination?.total || 0;
  const pageSize = 100;
  const totalPages = Math.ceil(totalItems / pageSize);
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${totalItems} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ ${totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö`);

  let allCategories = firstData.data || [];

  // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  if (totalPages > 1) {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ ${totalPages - 1} —Å—Ç—Ä–∞–Ω–∏—Ü...`);
    
    const pagePromises = [];
    for (let page = 2; page <= totalPages; page++) {
      const pageUrl = `${STRAPI_URL}/api/categories?pagination[page]=${page}&pagination[pageSize]=${pageSize}`;
      pagePromises.push(
        fetch(pageUrl, {
          headers: { 'Content-Type': 'application/json' },
          next: { revalidate: 300 }
        }).then(response => response.json())
      );
    }
    
    const pagesData = await Promise.all(pagePromises);
    pagesData.forEach((pageData, index) => {
      if (pageData.data && Array.isArray(pageData.data)) {
        allCategories = [...allCategories, ...pageData.data];
        console.log(`üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${index + 2}: +${pageData.data.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      }
    });
  }

  return allCategories;
};

export async function GET() {
  try {
    console.log('üîÑ API: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ categories...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Strapi
    const allStrapiCategories = await getAllCategoriesFromStrapi();
    
    console.log(`üì¶ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Strapi: ${allStrapiCategories.length}`);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categoryNames: string[] = [];
    
    allStrapiCategories.forEach((item: any) => {
      const categoryName = item.name || item.attributes?.name;
      if (categoryName) {
        categoryNames.push(categoryName.toString());
      }
    });

    console.log('üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryNames);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    const uniqueSortedCategories = sortCategories(categoryNames);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    const categories = uniqueSortedCategories.map((category, index) => ({
      id: index + 1,
      name: category,
      slug: category.toLowerCase().replace(/\s+/g, '-'),
      order: index
    }));

    console.log(`‚úÖ API: –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${categories.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`, uniqueSortedCategories);
    console.log('üîç –î–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –±—ã–ª–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categoryNames.length);
    console.log('üéØ –ü–æ—Å–ª–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞–ª–æ:', uniqueSortedCategories.length);
    console.log('üìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', uniqueSortedCategories);

    return NextResponse.json({
      categories,
      total: categories.length,
      debug: {
        strapiCategoriesCount: allStrapiCategories.length,
        rawCategoriesCount: categoryNames.length,
        uniqueCategoriesCount: uniqueSortedCategories.length,
        finalCategories: uniqueSortedCategories
      },
      message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allStrapiCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Strapi, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueSortedCategories.length}`
    });

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    
    return NextResponse.json(
      {
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Strapi',
        categories: [],
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}