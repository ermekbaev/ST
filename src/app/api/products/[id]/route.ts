// app/api/products/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params;
    console.log(`üîÑ API: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä ${id}`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ - —á–∏—Å–ª–æ–≤–æ–π ID, documentId –∏–ª–∏ slug
    let strapiUrl: string;
    
    if (!isNaN(Number(id))) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —á–∏—Å–ª–æ–≤–æ–π ID
      strapiUrl = `${STRAPI_URL}/api/products/${id}`;
    } else if (id.length > 10 && id.match(/^[a-z0-9]+$/)) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω documentId (–¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä)
      strapiUrl = `${STRAPI_URL}/api/products?filters[documentId][$eq]=${id}`;
    } else {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω slug
      strapiUrl = `${STRAPI_URL}/api/products?filters[slug][$eq]=${id}`;
    }
    
    console.log(`üì° –ó–∞–ø—Ä–æ—Å –∫ Strapi: ${strapiUrl}`);

    // –ó–∞–ø—Ä–æ—Å –∫ Strapi
    const strapiResponse = await fetch(strapiUrl, {
      headers: {
        'Content-Type': 'application/json',
      },
    });

    console.log(`üì° Strapi –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${id}:`, strapiResponse.status);

    if (!strapiResponse.ok) {
      if (strapiResponse.status === 404) {
        return NextResponse.json(
          { error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
          { status: 404 }
        );
      }
      
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ Strapi' },
        { status: strapiResponse.status }
      );
    }

    const strapiData = await strapiResponse.json();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
    let item;
    if (strapiData.data) {
      if (Array.isArray(strapiData.data)) {
        // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø–æ slug/documentId –≤–µ—Ä–Ω—É–ª –º–∞—Å—Å–∏–≤
        if (strapiData.data.length === 0) {
          return NextResponse.json(
            { error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
            { status: 404 }
          );
        }
        item = strapiData.data[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      } else {
        // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø–æ ID –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç
        item = strapiData.data;
      }
    } else {
      return NextResponse.json(
        { error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }
    const sizes = ['40', '41', '42', '43']; // –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞—Ç–∏—á–Ω–æ
    const mainPhoto = item.mainPhoto || '/images/placeholder.jpg';
    
    const product = {
      id: item.id?.toString() || '',
      article: item.article || '',
      brand: 'Nike', // –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞—Ç–∏—á–Ω–æ
      name: item.name || '',
      
      // –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò - –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–≤:
      size: sizes[0] || '', // –ü–µ—Ä–≤—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      sizes: sizes,         // –ú–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      
      category: '–ö—Ä–æ—Å—Å–æ–≤–∫–∏',
      gender: '–£–Ω–∏—Å–µ–∫—Å',
      price: item.price || 0,
      
      // –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò - –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–æ—Ç–æ:
      photo: mainPhoto,     // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      mainPhoto: mainPhoto, // –î–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      additionalPhotos: item.additionalPhotos || [],
      
      stockQuantity: item.stockQuantity || 0,
      availableStock: Math.max(0, (item.stockQuantity || 0) - (item.reservedQuantity || 0)),
      isActive: item.isActive !== false,
      slug: item.slug || item.documentId || '',
      createdAt: item.createdAt,
      updatedAt: item.updatedAt
    };
    
    console.log(`‚úÖ API: –¢–æ–≤–∞—Ä ${id} –Ω–∞–π–¥–µ–Ω:`, product.name);
    
    return NextResponse.json({ product });

  } catch (error) {
    console.error(`‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${params.id}:`, error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}