// src/app/api/products/[id]/route.ts - –û–ë–ù–û–í–õ–ï–ù–û —Å csv-parse –∏ –æ—á–∏—Å—Ç–∫–æ–π URL
import { NextResponse } from 'next/server';
import { parse } from 'csv-parse/sync'; // üëà –ò–º–ø–æ—Ä—Ç csv-parse

const SHEET_ID = '1naTkxDrQFfj_d7Q2U46GOj24hSqTAqrt_Yz1ImaKyVc';

interface Product {
  id: string;
  article: string;
  brand: string;
  name: string;
  size: string;
  category: string;
  gender: string;
  price: number;
  photo: string;
}

interface ProductWithSizes {
  id: string;
  article: string;
  brand: string;
  name: string;
  category: string;
  gender: string;
  description: string;
  photos: string[]; // –ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  sizes: Array<{
    size: string;
    price: number;
    available: boolean;
  }>;
  inStock: boolean;
  deliveryInfo: string;
}

interface ApiResponse {
  success: boolean;
  data: ProductWithSizes | null;
  error?: string;
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
const cleanString = (str: string): string => {
  if (!str) return '';
  return str.trim().replace(/^["']+|["']+$/g, '').replace(/\s+/g, ' ');
};

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—á–∏—Å—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ URL –æ—Ç –º—É—Å–æ—Ä–∞ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
const cleanImageUrl = (url: string): string => {
  console.log(`üßΩ –û—á–∏—â–∞–µ–º URL: ${url.substring(0, 100)}...`);
  
  // 1. –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏, –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–æ—á–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
  let cleanUrl = url.replace(/^[",;}\]\)\s]+/, '').replace(/[",;}\]\)\s]+$/, '').trim();
  
  // 2. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ https:// —á–∞—Å—Ç—å (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "200_m_pad.")
  const httpsMatch = cleanUrl.match(/https:\/\/.+/);
  if (httpsMatch) {
    cleanUrl = httpsMatch[0];
  }
  
  // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ ?
  const queryIndex = cleanUrl.indexOf('?');
  if (queryIndex !== -1) {
    const baseUrl = cleanUrl.substring(0, queryIndex);
    const queryPart = cleanUrl.substring(queryIndex + 1);
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω—ã query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${queryPart}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ query —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è URL
    if (/^[a-zA-Z0-9=&_\-%.]+$/.test(queryPart)) {
      // Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–≥–ª—è–¥—è—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º
      cleanUrl = baseUrl + '?' + queryPart;
      console.log(`‚úÖ Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª–∏–¥–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º`);
    } else {
      // Query —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤–∞–ª–∏–¥–Ω—É—é —á–∞—Å—Ç—å
      const validQueryMatch = queryPart.match(/^[a-zA-Z0-9=&_\-%.]+/);
      if (validQueryMatch && validQueryMatch[0].length > 5) {
        cleanUrl = baseUrl + '?' + validQueryMatch[0];
        console.log(`‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã`);
      } else {
        // –£–±–∏—Ä–∞–µ–º query –ø–æ–ª–Ω–æ—Å—Ç—å—é, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π URL
        cleanUrl = baseUrl;
        console.log(`‚ùå –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã`);
      }
    }
  }
  
  // 4. –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º trailing —Å–∏–º–≤–æ–ª—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
  cleanUrl = cleanUrl.replace(/[^\w\-._~:\/?#@!$&'()*+,;=%]+$/, '');
  
  console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π URL: ${cleanUrl}`);
  return cleanUrl;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
const extractAndCleanUrls = (line: string): string[] => {
  // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö URL –≤ —Å—Ç—Ä–æ–∫–µ
  const urlPatterns = [
    /https:\/\/cdn\.poizon\.com\/[^\s,;"'\n\r\t]+/g,
    /https:\/\/cdn-img\.thepoizon\.ru\/[^\s,;"'\n\r\t]+/g,
    /https:\/\/[^\s,;"'\n\r\t]*\.(jpg|jpeg|png|gif|webp)[^\s,;"'\n\r\t]*/gi,
    /https:\/\/[^\s,;"'\n\r\t]+/g
  ];
  
  let allUrls: string[] = [];
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  for (const pattern of urlPatterns) {
    const matches = line.match(pattern) || [];
    allUrls = allUrls.concat(matches);
  }
  
  // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
  if (line.includes(';')) {
    const parts = line.split(';');
    for (const part of parts) {
      if (part.includes('https://')) {
        allUrls.push(part.trim());
      }
    }
  }
  
  // –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π URL
  const cleanUrls = allUrls
    .map(url => cleanImageUrl(url))
    .filter(url => url.length > 20) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ URL
    .filter(url => url.startsWith('https://'));
  
  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  return [...new Set(cleanUrls)];
};

// –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π URL
const findPhotoInAdjacentLines = (lines: string[], currentIndex: number): string => {
  console.log(`üîç –ò—â–µ–º —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${currentIndex + 1}...`);
  
  const searchRange = 5;
  const startIndex = Math.max(0, currentIndex - searchRange);
  const endIndex = Math.min(lines.length - 1, currentIndex + searchRange);
  
  for (let i = startIndex; i <= endIndex; i++) {
    const line = lines[i];
    if (line.includes('cdn-img.thepoizon.ru') || 
        line.includes('cdn.poizon.com') || 
        line.includes('https://')) {
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}:`, line.substring(0, 100) + '...');
      
      const cleanUrls = extractAndCleanUrls(line);
      if (cleanUrls.length > 0) {
        console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${cleanUrls.length} URL:`, cleanUrls[0].substring(0, 80) + '...');
        return cleanUrls.join(';'); // –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï URL —á–µ—Ä–µ–∑ ';'
      }
    }
  }
  
  console.log(`‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${currentIndex + 1}`);
  return '';
};

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Å—Å–∏–≤–∞ —Ñ–æ—Ç–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å ';'
const parsePhotosArray = (photoString: string): string[] => {
  if (!photoString || photoString.trim() === '') {
    console.log('‚ùå –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
    return [];
  }
  
  console.log('üì∏ === –ü–ê–†–°–ò–ù–ì –ú–ê–°–°–ò–í–ê –§–û–¢–û–ì–†–ê–§–ò–ô ===');
  console.log('–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:', photoString.substring(0, 200) + '...');
  
  let photos: string[] = [];
  
  // –ü–†–ò–û–†–ò–¢–ï–¢: –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π
  if (photoString.includes(';')) {
    photos = photoString.split(';');
    console.log(`‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ ";" - –Ω–∞–π–¥–µ–Ω–æ ${photos.length} —á–∞—Å—Ç–µ–π`);
  }
  // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  else if (photoString.includes('\n') || photoString.includes('\r')) {
    photos = photoString.split(/[\r\n]+/);
    console.log(`‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫ - –Ω–∞–π–¥–µ–Ω–æ ${photos.length} —á–∞—Å—Ç–µ–π`);
  }
  // –ü–æ—Ç–æ–º –∑–∞–ø—è—Ç—ã–µ
  else if (photoString.includes(',')) {
    photos = photoString.split(',');
    console.log(`‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∑–∞–ø—è—Ç—ã–º - –Ω–∞–π–¥–µ–Ω–æ ${photos.length} —á–∞—Å—Ç–µ–π`);
  }
  // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
  else {
    photos = [photoString];
    console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –æ–¥–∏–Ω URL');
  }
  
  // –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π URL
  const cleanPhotos = photos
    .map((url: string, index: number) => {
      console.log(`üßΩ –û—á–∏—â–∞–µ–º URL ${index + 1}:`);
      console.log(`  –ò—Å—Ö–æ–¥–Ω—ã–π: "${url}"`);
      
      const cleanUrl = cleanImageUrl(url.trim());
      console.log(`  –û—á–∏—â–µ–Ω–Ω—ã–π: "${cleanUrl}"`);
      
      return cleanUrl;
    })
    .filter((url: string) => url.length > 20) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ URL
    .filter((url: string) => url.startsWith('https://'));
  
  console.log(`‚úÖ –ò—Ç–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—ã—Ö URL: ${cleanPhotos.length}`);
  return [...new Set(cleanPhotos)]; // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
const isValidProductData = (values: string[]): boolean => {
  if (values.length < 7) return false;
  
  const article = cleanString(values[0]);
  const brand = cleanString(values[1]);
  const name = cleanString(values[2]);
  const category = cleanString(values[4]);
  const price = cleanString(values[6]);
  
  const hasRealArticle = article.length > 0 && article.startsWith('TS-');
  const hasRealBrand = brand.length > 0 && brand !== '–ë—Ä–µ–Ω–¥';
  const hasRealName = name.length > 5 && name !== '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞';
  const hasRealCategory = category.length > 0 && category !== '–ö–∞—Ç–µ–≥–æ—Ä–∏—è';
  const hasValidPrice = !isNaN(parseFloat(price)) && parseFloat(price) > 0;
  const isHeaderRow = name.toLowerCase().includes('–Ω–∞–∑–≤–∞–Ω–∏–µ') || 
                      brand.toLowerCase().includes('–±—Ä–µ–Ω–¥') || 
                      category.toLowerCase().includes('–∫–∞—Ç–µ–≥–æ—Ä–∏—è');
  
  return hasRealArticle && hasRealBrand && hasRealName && hasRealCategory && hasValidPrice && !isHeaderRow;
};

// üîß –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–∞—Ä—Å–∏–Ω–≥ CSV —Å –ø–æ–º–æ—â—å—é csv-parse
const parseMultiLineCSV = (csvText: string): Product[] => {
  console.log('üöÄ [ID] –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ CSV —á–µ—Ä–µ–∑ csv-parse');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º csv-parse –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –ø–æ–ª–µ–π
  const records: any[] = parse(csvText, {
    skip_empty_lines: true,   // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    relax_quotes: true,       // –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–≤—ã—á–µ–∫
    relax_column_count: true, // –ü–æ–∑–≤–æ–ª—è–µ–º —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
    trim: true,              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    quote: '"',              // –°–∏–º–≤–æ–ª –∫–∞–≤—ã—á–µ–∫
    delimiter: ',',          // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    escape: '"'              // –°–∏–º–≤–æ–ª —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  });
  
  console.log(`üìä [ID] –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${records.length}`);
  
  const products: Product[] = [];
  
  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
  for (let i = 1; i < records.length; i++) {
    const row = records[i];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
    if (!row || row.length < 7) continue;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É –∏ –æ—á–∏—â–∞–µ–º
    const values = row.map((val: any) => cleanString(String(val || '')));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if (!isValidProductData(values)) continue;
    
    // –ò—â–µ–º —Ñ–æ—Ç–æ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º records –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ
    const linesForPhotoSearch = records.map(r => r.join(','));
    const photoUrl = findPhotoInAdjacentLines(linesForPhotoSearch, i);
    
    const product: Product = {
      id: `product_${i}`,
      article: values[0],       // A: –ê—Ä—Ç–∏–∫—É–ª
      brand: values[1],         // B: –ë—Ä–µ–Ω–¥
      name: values[2],          // C: –ù–∞–∑–≤–∞–Ω–∏–µ  
      size: values[3],          // D: –†–∞–∑–º–µ—Ä
      category: values[4],      // E: –ö–∞—Ç–µ–≥–æ—Ä–∏—è
      gender: values[5],        // F: –ü–æ–ª
      price: parseFloat(values[6]) || 0, // G: –¶–µ–Ω–∞
      photo: photoUrl
    };
    
    products.push(product);
  }
  
  console.log(`‚úÖ [ID] –ì–æ—Ç–æ–≤–æ: –Ω–∞–π–¥–µ–Ω–æ ${products.length} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
  return products;
};

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params;
    console.log(`üîç [ID] –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ —Å ID: ${id}`);
    
    const csvUrl = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/export?format=csv&gid=0`;
    
    const response = await fetch(csvUrl, {
      cache: 'no-store',
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const csvText: string = await response.text();
    console.log(`üìÑ [ID] –ó–∞–≥—Ä—É–∂–µ–Ω CSV —Ä–∞–∑–º–µ—Ä–æ–º: ${csvText.length.toLocaleString()} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –ü–ê–†–°–ò–ù–ì–ê
    const allProducts = parseMultiLineCSV(csvText);
    
    // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä
    const targetProduct = allProducts.find(product => 
      product.id === id || product.article === id
    );
    
    if (!targetProduct) {
      console.log(`‚ùå [ID] –¢–æ–≤–∞—Ä —Å ID "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return NextResponse.json<ApiResponse>({
        success: false,
        data: null,
        error: `–¢–æ–≤–∞—Ä —Å ID "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω`
      }, { status: 404 });
    }
    
    console.log(`‚úÖ [ID] –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä:`, targetProduct.name);
    
    // –ò—â–µ–º –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–≤–∞—Ä—ã —Å —Ç–µ–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –±—Ä–µ–Ω–¥–æ–º)
    const relatedProducts = allProducts.filter(product => 
      product.name === targetProduct.name && 
      product.brand === targetProduct.brand
    );
    
    console.log(`üîç [ID] –ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${relatedProducts.length}`);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–æ–≤
    const uniqueSizes = relatedProducts.map(product => ({
      size: product.size,
      price: product.price,
      available: true // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã
    }));
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    console.log(`üì∏ [ID] –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: "${targetProduct.photo}"`);
    const allPhotos = parsePhotosArray(targetProduct.photo || '');
    console.log(`üì∏ [ID] –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ (${allPhotos.length}):`, allPhotos);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    const productWithSizes: ProductWithSizes = {
      id: targetProduct.id,
      article: targetProduct.article,
      brand: targetProduct.brand,
      name: targetProduct.name,
      category: targetProduct.category,
      gender: targetProduct.gender,
      description: `${targetProduct.name} –æ—Ç ${targetProduct.brand}. ${targetProduct.category}. 
        –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–∏–ª—å –≤ –æ–¥–Ω–æ–º —Ç–æ–≤–∞—Ä–µ.`,
      photos: allPhotos, // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      sizes: uniqueSizes,
      inStock: uniqueSizes.some(s => s.available),
      deliveryInfo: '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏: 15-20 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.'
    };
    
    console.log(`‚úÖ [ID] –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä —Å ${allPhotos.length} —Ñ–æ—Ç–æ –∏ ${uniqueSizes.length} —Ä–∞–∑–º–µ—Ä–∞–º–∏`);
    
    return NextResponse.json<ApiResponse>({
      success: true,
      data: productWithSizes
    });
    
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    console.error('‚ùå [ID] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', errorMessage);
    
    return NextResponse.json<ApiResponse>({
      success: false,
      data: null,
      error: errorMessage
    }, { status: 500 });
  }
}