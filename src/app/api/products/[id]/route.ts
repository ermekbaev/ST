// src/app/api/products/[id]/route.ts - –° –õ–û–ì–ò–ö–û–ô –ò–ó –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´
import { NextResponse } from 'next/server';

const SHEET_ID = '1naTkxDrQFfj_d7Q2U46GOj24hSqTAqrt_Yz1ImaKyVc';

interface Product {
  id: string;
  article: string;
  brand: string;
  name: string;
  size: string;
  category: string;
  gender: string;
  price: number;
  photo: string;
}

interface ProductWithSizes {
  id: string;
  article: string;
  brand: string;
  name: string;
  category: string;
  gender: string;
  description: string;
  photos: string[]; // –ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  sizes: Array<{
    size: string;
    price: number;
    available: boolean;
  }>;
  inStock: boolean;
  deliveryInfo: string;
}

interface ApiResponse {
  success: boolean;
  data: ProductWithSizes | null;
  error?: string;
}

// –í–ó–Ø–¢–û –ò–ó –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
const findPhotoInAdjacentLines = (lines: string[], currentIndex: number): string => {
  console.log(`üîç –ò—â–µ–º —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${currentIndex + 1}...`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 5 —Å—Ç—Ä–æ–∫ (–≥–¥–µ –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è URL)
  for (let i = Math.max(0, currentIndex - 5); i < currentIndex; i++) {
    const line = lines[i];
    if (line.includes('https://cdn.poizon.com/') || 
        line.includes('https://cdn-img.thepoizon.ru/') ||
        line.includes('cdn.poizon.com')) {
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}:`, line.substring(0, 100) + '...');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å—Ç—Ä–æ–∫–∏
      const urls = extractUrlsFromLine(line);
      if (urls.length > 0) {
        console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω URL: ${urls[0].substring(0, 80)}...`);
        return urls.join(';'); // –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï URL —á–µ—Ä–µ–∑ ';'
      }
    }
  }
  
  console.log(`‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${currentIndex + 1}`);
  return '';
};

// –í–ó–Ø–¢–û –ò–ó –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –∏–∑ —Å—Ç—Ä–æ–∫–∏
const extractUrlsFromLine = (line: string): string[] => {
  // –ò—â–µ–º –≤—Å–µ URL –≤ —Å—Ç—Ä–æ–∫–µ (–≤–∫–ª—é—á–∞—è —Å–∫–ª–µ–µ–Ω–Ω—ã–µ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π)
  const urlPatterns = [
    /https:\/\/cdn\.poizon\.com\/[^\s,;"'\n\r\t]+/g,
    /https:\/\/cdn-img\.thepoizon\.ru\/[^\s,;"'\n\r\t]+/g,
    /https:\/\/[^\s,;"'\n\r\t]*\.jpg[^\s,;"'\n\r\t]*/g,
    /https:\/\/[^\s,;"'\n\r\t]*\.png[^\s,;"'\n\r\t]*/g,
    /https:\/\/[^\s,;"'\n\r\t]*\.jpeg[^\s,;"'\n\r\t]*/g
  ];
  
  let allUrls: string[] = [];
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  for (const pattern of urlPatterns) {
    const matches = line.match(pattern) || [];
    allUrls = allUrls.concat(matches);
  }
  
  // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
  if (line.includes(';')) {
    const parts = line.split(';');
    for (const part of parts) {
      if (part.includes('https://')) {
        allUrls.push(part.trim());
      }
    }
  }
  
  // –û—á–∏—â–∞–µ–º URL –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const cleanUrls = allUrls
    .map(url => {
      // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏, –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–æ—á–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –ù–ê–ß–ê–õ–ï
      let cleanUrl = url.replace(/^[",;}\]\)\s]+/, '').trim();
      
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –ø–µ—Ä–µ–¥ https://
      const httpsMatch = cleanUrl.match(/https:\/\/.+/);
      if (httpsMatch) {
        cleanUrl = httpsMatch[0];
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ URL –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      cleanUrl = cleanUrl.replace(/[",;}\]\)\s]+$/, ''); // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
      
      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ ? –µ—Å—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω–∏—Ö
      // –ù–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, =, &)
      const queryIndex = cleanUrl.indexOf('?');
      if (queryIndex !== -1) {
        const baseUrl = cleanUrl.substring(0, queryIndex);
        const queryPart = cleanUrl.substring(queryIndex + 1);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ query —á–∞—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if (/^[a-zA-Z0-9=&_\-%.]+$/.test(queryPart)) {
          // Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª–∏–¥–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          cleanUrl = baseUrl + '?' + queryPart;
        } else {
          // Query —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
          const validQueryMatch = queryPart.match(/^[a-zA-Z0-9=&_\-%.]+/);
          if (validQueryMatch) {
            cleanUrl = baseUrl + '?' + validQueryMatch[0];
          } else {
            // –£–±–∏—Ä–∞–µ–º query –ø–æ–ª–Ω–æ—Å—Ç—å—é
            cleanUrl = baseUrl;
          }
        }
      }
      
      return cleanUrl;
    })
    .filter(url => url.length > 20) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ URL
    .filter(url => url.startsWith('https://'));
  
  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  return [...new Set(cleanUrls)];
};

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Å—Å–∏–≤–∞ —Ñ–æ—Ç–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å ';'
const parsePhotosArray = (photoString: string): string[] => {
  if (!photoString || photoString.trim() === '') {
    console.log('‚ùå –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
    return [];
  }
  
  console.log('üì∏ === –ü–ê–†–°–ò–ù–ì –ú–ê–°–°–ò–í–ê –§–û–¢–û–ì–†–ê–§–ò–ô ===');
  console.log('–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:', photoString.substring(0, 200) + '...');
  
  let photos: string[] = [];
  
  // –ü–†–ò–û–†–ò–¢–ï–¢: –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π
  if (photoString.includes(';')) {
    photos = photoString.split(';');
    console.log(`‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ ";" - –Ω–∞–π–¥–µ–Ω–æ ${photos.length} —á–∞—Å—Ç–µ–π`);
  }
  // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  else if (photoString.includes('\n') || photoString.includes('\r')) {
    photos = photoString.split(/[\r\n]+/);
    console.log(`‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫ - –Ω–∞–π–¥–µ–Ω–æ ${photos.length} —á–∞—Å—Ç–µ–π`);
  }
  // –ü–æ—Ç–æ–º –∑–∞–ø—è—Ç—ã–µ
  else if (photoString.includes(',')) {
    photos = photoString.split(',');
    console.log(`‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∑–∞–ø—è—Ç—ã–º - –Ω–∞–π–¥–µ–Ω–æ ${photos.length} —á–∞—Å—Ç–µ–π`);
  }
  // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
  else {
    photos = [photoString];
    console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –æ–¥–∏–Ω URL');
  }
  
  // –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π URL
  const cleanPhotos = photos
    .map((url: string, index: number) => {
      console.log(`üßΩ –û—á–∏—â–∞–µ–º URL ${index + 1}:`);
      console.log(`  –ò—Å—Ö–æ–¥–Ω—ã–π: "${url}"`);
      
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∫–∞–≤—ã—á–∫–∏
      let cleanUrl = url.trim().replace(/^["']+|["']+$/g, '');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º https:// –∏–∑ —Å—Ç—Ä–æ–∫ —Ç–∏–ø–∞ "200_m_pad.https://..."
      const httpsMatch = cleanUrl.match(/https:\/\/.+/);
      if (httpsMatch) {
        cleanUrl = httpsMatch[0];
        console.log(`  –ü–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è https: "${cleanUrl}"`);
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ ?
      const queryIndex = cleanUrl.indexOf('?');
      if (queryIndex !== -1) {
        const baseUrl = cleanUrl.substring(0, queryIndex);
        const queryPart = cleanUrl.substring(queryIndex + 1);
        
        console.log(`  Base URL: "${baseUrl}"`);
        console.log(`  Query —á–∞—Å—Ç—å: "${queryPart}"`);
        
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ query
        const cleanedQuery = queryPart.replace(/[",;}\]\)\s\n\r\t]+$/, '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (/^[a-zA-Z0-9=&_\-%.]+$/.test(cleanedQuery) && cleanedQuery.length > 0) {
          cleanUrl = baseUrl + '?' + cleanedQuery;
          console.log(`  ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ query —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: "${cleanUrl}"`);
        } else {
          // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—É—é —á–∞—Å—Ç—å query
          const validQueryMatch = cleanedQuery.match(/^[a-zA-Z0-9=&_\-%.]+/);
          if (validQueryMatch && validQueryMatch[0].length > 0) {
            cleanUrl = baseUrl + '?' + validQueryMatch[0];
            console.log(`  ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –≤–∞–ª–∏–¥–Ω—ã–µ query: "${cleanUrl}"`);
          } else {
            cleanUrl = baseUrl;
            console.log(`  ‚ùå Query —É–¥–∞–ª–µ–Ω—ã: "${cleanUrl}"`);
          }
        }
      } else {
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ –±–µ–∑ query
        const oldUrl = cleanUrl;
        cleanUrl = cleanUrl.replace(/[",;}\]\)\s\n\r\t]+$/, '');
        if (oldUrl !== cleanUrl) {
          console.log(`  –û—á–∏—â–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ: "${cleanUrl}"`);
        }
      }
      
      console.log(`  ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π URL: "${cleanUrl}"`);
      return cleanUrl;
    })
    .filter((url: string) => url.length > 0) // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    .filter((url: string) => {
      const isValid = url.startsWith('https://') || url.startsWith('http://');
      if (!isValid) {
        console.log(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL (–Ω–µ HTTP): "${url}"`);
      }
      return isValid;
    });
  
  console.log(`üéâ –ò—Ç–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–æ—Ç–æ: ${cleanPhotos.length}`);
  cleanPhotos.forEach((url, i) => {
    console.log(`  ${i + 1}: ${url}`);
  });
  console.log('=== –ö–û–ù–ï–¶ –ü–ê–†–°–ò–ù–ì–ê –ú–ê–°–°–ò–í–ê ===');
  
  return cleanPhotos;
};

export async function GET(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
): Promise<NextResponse<ApiResponse>> {
  try {
    const resolvedParams = await params;
    const productId = resolvedParams.id;
    
    console.log('üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ —Å ID:', productId);
    
    // –ü–æ–ª—É—á–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
    const csvUrl = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/export?format=csv&gid=0`;
    const response = await fetch(csvUrl, { cache: 'no-store' });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const csvText: string = await response.text();
    const lines: string[] = csvText.split('\n').filter((line: string) => line.trim());
    
    if (lines.length < 2) {
      throw new Error('–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏');
    }
    
    // –ü–∞—Ä—Å–µ—Ä CSV —Å—Ç—Ä–æ–∫–∏
    const parseCSVLine = (line: string): string[] => {
      const result: string[] = [];
      let current = '';
      let inQuotes = false;
      
      for (let i = 0; i < line.length; i++) {
        const char = line[i];
        
        if (char === '"') {
          inQuotes = !inQuotes;
        } else if (char === ',' && !inQuotes) {
          result.push(current.trim());
          current = '';
        } else {
          current += char;
        }
      }
      result.push(current.trim());
      return result;
    };
    
    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–∞
    const isMainProductLine = (values: string[]): boolean => {
      if (values.length < 7) return false;
      
      const article = values[0]?.trim() || '';
      const brand = values[1]?.trim() || '';
      const name = values[2]?.trim() || '';
      const price = values[6]?.trim() || '';
      
      return (
        article.startsWith('TS-') &&
        brand.length > 0 &&
        name.length > 5 &&
        !isNaN(parseFloat(price)) &&
        parseFloat(price) > 0
      );
    };
    
    const products: Product[] = [];
    
    // –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–£ –ñ–ï –õ–û–ì–ò–ö–£ –ß–¢–û –ò –ù–ê –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–ï
    for (let i = 1; i < lines.length; i++) {
      const line: string = lines[i].trim();
      if (!line) continue;
      
      try {
        const values = parseCSVLine(line);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —Ç–æ–≤–∞—Ä–∞
        if (isMainProductLine(values)) {
          
          // –ò—â–µ–º —Ñ–æ—Ç–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö (–¢–ê –ñ–ï –õ–û–ì–ò–ö–ê)
          const photoUrl = findPhotoInAdjacentLines(lines, i);
          
          const product: Product = {
            id: `product_${i}`,
            article: values[0]?.trim() || `ART${i}`,
            brand: values[1]?.trim() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥',
            name: values[2]?.trim() || '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            size: values[3]?.trim() || 'Universal',
            category: values[4]?.trim() || '–ü—Ä–æ—á–µ–µ',
            gender: values[5]?.trim() || '–£–Ω–∏—Å–µ–∫—Å',
            price: parseFloat(values[6]?.trim() || '0') || 0,
            photo: photoUrl // –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ URL —á–µ—Ä–µ–∑ ';'
          };
          
          if (product.name && product.name !== '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') {
            products.push(product);
          }
        }
      } catch (parseError: unknown) {
        continue;
      }
    }
    
    console.log(`üì¶ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    
    // –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID –∏–ª–∏ article
    let foundProducts = products.filter(p => 
      p.id === productId || p.article === productId
    );
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏
    if (foundProducts.length === 0) {
      foundProducts = products.filter(p => 
        p.name.toLowerCase().includes(productId.toLowerCase()) ||
        p.brand.toLowerCase().includes(productId.toLowerCase())
      );
    }
    
    if (foundProducts.length === 0) {
      console.log('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        data: null,
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }
    
    const baseProduct = foundProducts[0];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: ${baseProduct.name}`);
    console.log(`üì∏ –°—ã—Ä—ã–µ —Ñ–æ—Ç–æ: ${baseProduct.photo || '–ù–ï–¢'}`);
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const allSizes = products
      .filter(p => p.name === baseProduct.name && p.brand === baseProduct.brand)
      .map(p => ({ size: p.size, price: p.price, available: true }));
    
    const uniqueSizes = allSizes
      .filter((size, index, self) => index === self.findIndex(s => s.size === size.size))
      .sort((a, b) => {
        const aNum = parseFloat(a.size.replace(/[^\d.]/g, ''));
        const bNum = parseFloat(b.size.replace(/[^\d.]/g, ''));
        return aNum - bNum;
      });
    
    // –ì–õ–ê–í–ù–û–ï: –ü–∞—Ä—Å–∏–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ —Å—Ç—Ä–æ–∫–∏
    let allPhotos: string[] = [];
    
    // –ò–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    if (baseProduct.photo) {
      const photosFromBase = parsePhotosArray(baseProduct.photo);
      allPhotos = allPhotos.concat(photosFromBase);
    }
    
    // –ò–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const relatedProducts = products.filter(p => 
      p.name === baseProduct.name && p.brand === baseProduct.brand && p.photo
    );
    
    for (const product of relatedProducts) {
      if (product.photo && product.photo !== baseProduct.photo) {
        const photosFromProduct = parsePhotosArray(product.photo);
        allPhotos = allPhotos.concat(photosFromProduct);
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
    allPhotos = [...new Set(allPhotos)].slice(0, 10);
    
    console.log(`üéâ –ò—Ç–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${allPhotos.length}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const productWithSizes: ProductWithSizes = {
      id: baseProduct.id,
      article: baseProduct.article,
      brand: baseProduct.brand,
      name: baseProduct.name,
      category: baseProduct.category,
      gender: baseProduct.gender,
      description: `${baseProduct.brand} ${baseProduct.name}. –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–∏–ª—å –≤ –æ–¥–Ω–æ–º —Ç–æ–≤–∞—Ä–µ.`,
      photos: allPhotos, // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      sizes: uniqueSizes,
      inStock: uniqueSizes.some(s => s.available),
      deliveryInfo: '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏: 15-20 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.'
    };
    
    return NextResponse.json<ApiResponse>({
      success: true,
      data: productWithSizes
    });
    
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', errorMessage);
    
    return NextResponse.json<ApiResponse>({
      success: false,
      data: null,
      error: errorMessage
    }, { status: 500 });
  }
}