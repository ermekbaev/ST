// src/app/api/products/route.ts
import { NextResponse } from 'next/server';

const SHEET_ID = '1naTkxDrQFfj_d7Q2U46GOj24hSqTAqrt_Yz1ImaKyVc';

interface Product {
  id: string;
  article: string;
  brand: string;
  name: string;
  size: string;
  category: string;
  gender: string;
  price: number;
  photo: string;
}

interface ApiResponse {
  success: boolean;
  count: number;
  data: Product[];
  error?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏
const cleanString = (str: string): string => {
  if (!str) return '';
  return str.trim().replace(/^["']+|["']+$/g, '').replace(/\s+/g, ' ');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞
const isValidProductRow = (values: string[]): boolean => {
  if (values.length < 7) return false;
  
  const article: string = cleanString(values[0]);
  const brand: string = cleanString(values[1]);
  const name: string = cleanString(values[2]);
  const priceString: string = cleanString(values[6]);
  
  const hasValidArticle: boolean = Boolean(article && /^TS-\d+/.test(article));
  const hasValidBrand: boolean = Boolean(brand && brand.length > 0 && !/^\d+$/.test(brand) && /[a-zA-Z–∞-—è–ê-–Ø]/.test(brand));
  const hasValidName: boolean = Boolean(name && name.length > 3 && /[a-zA-Z–∞-—è–ê-–Ø]/.test(name));
  const hasValidPrice: boolean = Boolean(priceString && !isNaN(parseFloat(priceString.replace(/[^\d.,]/g, '').replace(',', '.'))) && parseFloat(priceString.replace(/[^\d.,]/g, '').replace(',', '.')) > 0);
  
  return hasValidArticle && hasValidBrand && hasValidName && hasValidPrice;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ç–æ
const parsePhotoField = (photoField: string): string => {
  if (!photoField || !photoField.trim()) return '';
  
  console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ç–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ:', photoField.substring(0, 100));
  
  let photos: string[] = [];
  
  // –ü–†–ò–û–†–ò–¢–ï–¢: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
  if (photoField.includes(';')) {
    photos = photoField.split(';');
    console.log('–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ ";" –Ω–∞–π–¥–µ–Ω–æ:', photos.length, '—á–∞—Å—Ç–µ–π');
  }
  // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  else if (photoField.includes('\n') || photoField.includes('\r')) {
    photos = photoField.split(/[\r\n]+/);
    console.log('–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫:', photos.length, '—á–∞—Å—Ç–µ–π');
  }
  // –ü–æ—Ç–æ–º –∑–∞–ø—è—Ç—ã–µ
  else if (photoField.includes(',')) {
    photos = photoField.split(',');
    console.log('–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∑–∞–ø—è—Ç—ã–º:', photos.length, '—á–∞—Å—Ç–µ–π');
  }
  // –ü—Ä–æ–±—É–µ–º regex –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö HTTP —Å—Å—ã–ª–æ–∫
  else {
    const urlRegex: RegExp = /https?:\/\/[^\s,;"'\n\r\t]+/g;
    const foundUrls: RegExpMatchArray | null = photoField.match(urlRegex);
    if (foundUrls && foundUrls.length > 0) {
      photos = foundUrls;
      console.log('–ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ regex:', photos.length, 'URL');
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –æ–¥–∏–Ω URL
      photos = [photoField];
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –æ–¥–∏–Ω URL');
    }
  }
  
  console.log('–°—ã—Ä—ã–µ —á–∞—Å—Ç–∏:', photos);
  
  // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const cleanPhotos: string[] = photos
    .map((url: string) => url.trim().replace(/^["']+|["']+$/g, '')) // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
    .filter((url: string) => url.length > 0) // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    .filter((url: string) => url.startsWith('http') || url.includes('cdn') || url.includes('imgur') || url.includes('image')); // –¢–æ–ª—å–∫–æ URL
  
  const firstPhoto: string = cleanPhotos.length > 0 ? cleanPhotos[0] : '';
  console.log('‚úÖ –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞:', firstPhoto);
  
  return firstPhoto;
};

export async function GET(): Promise<NextResponse<ApiResponse>> {
  try {
    console.log('üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ API /products');
    
    const csvUrl: string = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/export?format=csv&gid=0`;
    
    const response = await fetch(csvUrl, {
      cache: 'no-store',
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const csvText: string = await response.text();
    const lines: string[] = csvText.split('\n').filter((line: string) => line.trim());
    
    if (lines.length < 3) {
      throw new Error('–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏');
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Å—Ç—Ä–æ–∫–∏
    const parseCSVLine = (line: string): string[] => {
      const result: string[] = [];
      let current: string = '';
      let inQuotes: boolean = false;
      
      for (let i = 0; i < line.length; i++) {
        const char: string = line[i];
        
        if (char === '"') {
          inQuotes = !inQuotes;
        } else if (char === ',' && !inQuotes) {
          result.push(current.trim());
          current = '';
        } else {
          current += char;
        }
      }
      result.push(current.trim()); 
      return result;
    };
    
    console.log('=== –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ CSV ===');
    console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${lines.length}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('=== –ü–ï–†–í–´–ï 10 –°–¢–†–û–ö ===');
    for (let i = 0; i < Math.min(10, lines.length); i++) {
      const values: string[] = parseCSVLine(lines[i]);
      console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: [${values.slice(0, 8).map((v: string) => `"${v.substring(0, 20)}"`).join(', ')}]`);
    }
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    console.log('=== –ü–û–ò–°–ö –ö–û–†–†–ï–ö–¢–ù–´–• –¢–û–í–ê–†–û–í ===');
    let validRows: number = 0;
    let invalidRows: number = 0;
    const products: Product[] = [];
    
    for (let i = 0; i < lines.length; i++) {
      const line: string = lines[i].trim();
      if (!line) continue;
      
      try {
        const values: string[] = parseCSVLine(line);
        
        if (isValidProductRow(values)) {
          validRows++;
          
          const article: string = cleanString(values[0]);
          const brand: string = cleanString(values[1]);
          const name: string = cleanString(values[2]);
          const size: string = cleanString(values[3]);
          const category: string = cleanString(values[4]);
          const gender: string = cleanString(values[5]);
          const priceString: string = cleanString(values[6]);
          const photoField: string = cleanString(values[7] || '');
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω —Å –∑–∞–ø—è—Ç—ã–º–∏ (—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)
          const price: number = parseFloat(priceString.replace(/[^\d.,]/g, '').replace(',', '.'));
          
          const product: Product = {
            id: article,
            article: article,
            brand: brand,
            name: name,
            size: size || 'Universal',
            category: category || '–ü—Ä–æ—á–µ–µ',
            gender: gender || '–£–Ω–∏—Å–µ–∫—Å',
            price: price,
            photo: parsePhotoField(photoField)
          };
          
          products.push(product);
          
          // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
          if (validRows <= 3) {
            console.log(`‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä ${validRows} (—Å—Ç—Ä–æ–∫–∞ ${i + 1}):`, {
              article: product.article,
              brand: product.brand,
              name: product.name.substring(0, 30) + (product.name.length > 30 ? '...' : ''),
              size: product.size,
              price: product.price
            });
          }
        } else {
          invalidRows++;
          
          // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
          if (invalidRows <= 3) {
            const article: string = cleanString(values[0] || '');
            const brand: string = cleanString(values[1] || '');
            const name: string = cleanString(values[2] || '');
            const priceString: string = cleanString(values[6] || '');
            
            console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ${i + 1}:`, {
              article: article,
              brand: brand,
              name: name.substring(0, 20) + (name.length > 20 ? '...' : ''),
              price: priceString,
              validationResults: {
                hasValidArticle: Boolean(article && /^TS-\d+/.test(article)),
                hasValidBrand: Boolean(brand && brand.length > 0 && !/^\d+$/.test(brand) && /[a-zA-Z–∞-—è–ê-–Ø]/.test(brand)),
                hasValidName: Boolean(name && name.length > 3 && /[a-zA-Z–∞-—è–ê-–Ø]/.test(name)),
                hasValidPrice: Boolean(priceString && !isNaN(parseFloat(priceString.replace(/[^\d.,]/g, '').replace(',', '.'))) && parseFloat(priceString.replace(/[^\d.,]/g, '').replace(',', '.')) > 0)
              }
            });
          }
        }
      } catch (parseError: unknown) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ ${i + 1}:`, parseError);
        invalidRows++;
        continue;
      }
    }
    
    console.log(`üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫: ${validRows}`);
    console.log(`   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫: ${invalidRows}`);
    console.log(`   üì¶ –ò—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: ${products.length}`);
    
    return NextResponse.json<ApiResponse>({
      success: true,
      count: products.length,
      data: products
    });

  } catch (error: unknown) {
    const errorMessage: string = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API /products:', errorMessage);
    
    return NextResponse.json<ApiResponse>({
      success: false,
      count: 0,
      data: [],
      error: errorMessage
    }, { status: 500 });
  }
}