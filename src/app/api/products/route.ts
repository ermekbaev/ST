// app/api/products/route.ts
import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.STRAPI_URL || 'http://localhost:1337';

export async function GET(request: NextRequest) {
  try {
    console.log('üîÑ API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–æ–≤–∞—Ä—ã');
    
    // –î–µ–ª–∞–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Strapi
    const strapiUrl = `${STRAPI_URL}/api/products`;
    console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º:', strapiUrl);
    
    const strapiResponse = await fetch(strapiUrl, {
      headers: {
        'Content-Type': 'application/json',
      },
    });

    console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç Strapi:', strapiResponse.status, strapiResponse.statusText);

    if (!strapiResponse.ok) {
      console.error(`‚ùå Strapi –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${strapiResponse.status}`);
      return NextResponse.json(
        { 
          error: `Strapi –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${strapiResponse.status})`,
          message: '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Strapi –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:1337'
        },
        { status: 502 }
      );
    }

    const strapiData = await strapiResponse.json();
    console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç Strapi:', strapiData.data?.length || 0, '—Ç–æ–≤–∞—Ä–æ–≤');
    
    if (!strapiData.data || !Array.isArray(strapiData.data)) {
      return NextResponse.json({
        products: [],
        total: 0,
        message: '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ Strapi',
        debug: strapiData
      });
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–∞–Ω–Ω—ã–µ –ª–µ–∂–∞—Ç –ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ —Ç–æ–≤–∞—Ä–∞, –±–µ–∑ attributes
    const products = strapiData.data.map((item: any) => {
      console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä:`, item.id, item.name);
      
      const sizes = ['40', '41', '42', '43']; // –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞—Ç–∏—á–Ω–æ
      const mainPhoto = item.mainPhoto || '/images/placeholder.jpg';
      
      return {
        id: item.id?.toString() || '',
        article: item.article || '',
        brand: 'Nike', // –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞—Ç–∏—á–Ω–æ, –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ —Å–≤—è–∑–∏
        name: item.name || '',
        
        // –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò - –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–≤:
        size: sizes[0] || '', // –ü–µ—Ä–≤—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        sizes: sizes,         // –ú–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        
        category: '–ö—Ä–æ—Å—Å–æ–≤–∫–∏',
        gender: '–£–Ω–∏—Å–µ–∫—Å',
        price: item.price || 0,
        
        // –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò - –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–æ—Ç–æ:
        photo: mainPhoto,     // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        mainPhoto: mainPhoto, // –î–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        additionalPhotos: item.additionalPhotos || [],
        
        stockQuantity: item.stockQuantity || 0,
        availableStock: Math.max(0, (item.stockQuantity || 0) - (item.reservedQuantity || 0)),
        isActive: item.isActive !== false,
        slug: item.slug || item.documentId || '',
        createdAt: item.createdAt,
        updatedAt: item.updatedAt
      };
    });
    
    console.log(`‚úÖ API: –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    return NextResponse.json({
      products,
      total: strapiData.meta?.pagination?.total || products.length,
    });

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Strapi',
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ Strapi –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:1337 –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä—ã'
      },
      { status: 500 }
    );
  }
}