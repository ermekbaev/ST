// src/app/api/products/route.ts - –ü–û–õ–ù–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ê–ô–õ
import { NextRequest, NextResponse } from 'next/server';
import { parse } from 'csv-parse/sync';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–æ–≤–∞—Ä–∞
interface Product {
  id: string;
  article: string;
  brand: string;
  name: string;
  size: string;
  category: string;
  gender: string;
  price: number;
  photo?: string;
}

interface ApiResponse {
  success: boolean;
  count: number;
  data: Product[];
  error?: string;
}

// ID –∏ –ª–∏—Å—Ç Google Sheets
const SHEET_ID = '1naTkxDrQFfj_d7Q2U46GOj24hSqTAqrt_Yz1ImaKyVc';
const SHEET_GID = 0;

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
const cleanString = (str: string): string => {
  if (!str) return '';
  return str.trim().replace(/^["']+|["']+$/g, '').replace(/\s+/g, ' ');
};

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—á–∏—Å—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ URL –æ—Ç –º—É—Å–æ—Ä–∞ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
const cleanImageUrl = (url: string): string => {
  console.log(`üßΩ –û—á–∏—â–∞–µ–º URL: ${url.substring(0, 100)}...`);
  
  // 1. –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏, –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–æ—á–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
  let cleanUrl = url.replace(/^[",;}\]\)\s]+/, '').replace(/[",;}\]\)\s]+$/, '').trim();
  
  // 2. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ https:// —á–∞—Å—Ç—å (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "200_m_pad.")
  const httpsMatch = cleanUrl.match(/https:\/\/.+/);
  if (httpsMatch) {
    cleanUrl = httpsMatch[0];
  }
  
  // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ ?
  const queryIndex = cleanUrl.indexOf('?');
  if (queryIndex !== -1) {
    const baseUrl = cleanUrl.substring(0, queryIndex);
    const queryPart = cleanUrl.substring(queryIndex + 1);
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω—ã query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${queryPart}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ query —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è URL
    if (/^[a-zA-Z0-9=&_\-%.]+$/.test(queryPart)) {
      // Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–≥–ª—è–¥—è—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º
      cleanUrl = baseUrl + '?' + queryPart;
      console.log(`‚úÖ Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª–∏–¥–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º`);
    } else {
      // Query —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤–∞–ª–∏–¥–Ω—É—é —á–∞—Å—Ç—å
      const validQueryMatch = queryPart.match(/^[a-zA-Z0-9=&_\-%.]+/);
      if (validQueryMatch && validQueryMatch[0].length > 5) {
        cleanUrl = baseUrl + '?' + validQueryMatch[0];
        console.log(`‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã`);
      } else {
        // –£–±–∏—Ä–∞–µ–º query –ø–æ–ª–Ω–æ—Å—Ç—å—é, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π URL
        cleanUrl = baseUrl;
        console.log(`‚ùå –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã`);
      }
    }
  }
  
  // 4. –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º trailing —Å–∏–º–≤–æ–ª—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
  cleanUrl = cleanUrl.replace(/[^\w\-._~:\/?#@!$&'()*+,;=%]+$/, '');
  
  console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π URL: ${cleanUrl}`);
  return cleanUrl;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
const extractAndCleanUrls = (line: string): string[] => {
  // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö URL –≤ —Å—Ç—Ä–æ–∫–µ
  const urlPatterns = [
    /https:\/\/cdn\.poizon\.com\/[^\s,;"'\n\r\t]+/g,
    /https:\/\/cdn-img\.thepoizon\.ru\/[^\s,;"'\n\r\t]+/g,
    /https:\/\/[^\s,;"'\n\r\t]*\.(jpg|jpeg|png|gif|webp)[^\s,;"'\n\r\t]*/gi,
    /https:\/\/[^\s,;"'\n\r\t]+/g
  ];
  
  let allUrls: string[] = [];
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  for (const pattern of urlPatterns) {
    const matches = line.match(pattern) || [];
    allUrls = allUrls.concat(matches);
  }
  
  // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
  if (line.includes(';')) {
    const parts = line.split(';');
    for (const part of parts) {
      if (part.includes('https://')) {
        allUrls.push(part.trim());
      }
    }
  }
  
  // –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π URL
  const cleanUrls = allUrls
    .map(url => cleanImageUrl(url))
    .filter(url => url.length > 20) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ URL
    .filter(url => url.startsWith('https://'));
  
  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  return [...new Set(cleanUrls)];
};

// üîß –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¢–û–õ–¨–ö–û –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
const getPhotoFromCorrectColumn = (values: string[]): string => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
  const photoColumns = [8, 9, 10, 7]; // I, J, K, H
  
  for (const colIndex of photoColumns) {
    const columnValue = values[colIndex] || '';
    const letter = String.fromCharCode(65 + colIndex);
    
    console.log(`üì∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±–µ—Ü ${letter} (${colIndex}): "${columnValue.substring(0, 60)}${columnValue.length > 60 ? '...' : ''}"`);
    
    if (columnValue && columnValue.trim()) {
      const cleanUrls = extractAndCleanUrls(columnValue);
      if (cleanUrls.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ —Å—Ç–æ–ª–±—Ü–µ ${letter}: ${cleanUrls[0].substring(0, 60)}...`);
        return cleanUrls[0];
      }
    }
  }
  
  console.log(`‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ`);
  return '';
};

// üîß –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—á–∏—Å—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
const cleanSize = (sizeString: string): string => {
  if (!sizeString) return '';
  
  let cleaned = sizeString.trim();
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã
  cleaned = cleaned.replace(/^["']+|["']+$/g, ''); // –ö–∞–≤—ã—á–∫–∏
  cleaned = cleaned.replace(/\s+/g, ' '); // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
  cleaned = cleaned.replace(/^(—Ä–∞–∑–º–µ—Ä|size|—Ä\.?|s\.?)\s*/i, ''); // –ü—Ä–µ—Ñ–∏–∫—Å—ã "—Ä–∞–∑–º–µ—Ä", "size" –∏ —Ç.–¥.
  
  // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  const numberMatch = cleaned.match(/^\d+(\.\d+)?$/);
  if (numberMatch) {
    return numberMatch[0];
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä + —á—Ç–æ-—Ç–æ –µ—â–µ, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä–Ω—É—é —á–∞—Å—Ç—å
  const sizeMatch = cleaned.match(/^(\d+(\.\d+)?)\s/);
  if (sizeMatch) {
    return sizeMatch[1];
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É (–º–∞–∫—Å–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)
  return cleaned.substring(0, 10);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
const isValidProductData = (values: string[]): boolean => {
  if (values.length < 7) return false;
  
  const article = cleanString(values[0]);
  const brand = cleanString(values[1]);
  const name = cleanString(values[2]);
  const category = cleanString(values[4]);
  const price = cleanString(values[6]);
  
  const hasRealArticle = article.length > 0 && article.startsWith('TS-');
  const hasRealBrand = brand.length > 0 && brand !== '–ë—Ä–µ–Ω–¥';
  const hasRealName = name.length > 5 && name !== '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞';
  const hasRealCategory = category.length > 0 && category !== '–ö–∞—Ç–µ–≥–æ—Ä–∏—è';
  const hasValidPrice = !isNaN(parseFloat(price)) && parseFloat(price) > 0;
  const isHeaderRow = name.toLowerCase().includes('–Ω–∞–∑–≤–∞–Ω–∏–µ') || 
                      brand.toLowerCase().includes('–±—Ä–µ–Ω–¥') || 
                      category.toLowerCase().includes('–∫–∞—Ç–µ–≥–æ—Ä–∏—è');
  
  const isValid = hasRealArticle && hasRealBrand && hasRealName && hasRealCategory && hasValidPrice && !isHeaderRow;
  
  if (isValid) {
    console.log(`‚úÖ –í–ê–õ–ò–î–ù–´–ô —Ç–æ–≤–∞—Ä: ${brand} - ${name.substring(0, 30)}... (${category})`);
  } else {
    console.log(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø—Ä–∏—á–∏–Ω—ã - article: ${hasRealArticle}, brand: ${hasRealBrand}, name: ${hasRealName}, category: ${hasRealCategory}, price: ${hasValidPrice}`);
  }
  
  return isValid;
};

// üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–æ–ª–±—Ü–æ–≤
const diagnoseColumns = (records: any[]): void => {
  console.log('üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–û–õ–ë–¶–û–í ===');
  
  if (records.length < 2) {
    console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
    return;
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = records[0] || [];
  console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤:');
  headers.forEach((header: any, index: number) => {
    const letter = String.fromCharCode(65 + index); // A, B, C, D...
    console.log(`  ${letter} (${index}): "${header}"`);
  });
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüìä –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:');
  for (let i = 1; i <= Math.min(3, records.length - 1); i++) {
    const row = records[i] || [];
    console.log(`\n–°—Ç—Ä–æ–∫–∞ ${i}:`);
    row.forEach((value: any, index: number) => {
      const letter = String.fromCharCode(65 + index);
      const displayValue = String(value || '').substring(0, 50);
      console.log(`  ${letter} (${index}): "${displayValue}${String(value || '').length > 50 ? '...' : ''}"`);
    });
  }
  
  // –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
  console.log('\nüì∏ –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏:');
  for (let colIndex = 0; colIndex < Math.max(...records.map(r => r.length)); colIndex++) {
    const letter = String.fromCharCode(65 + colIndex);
    let photoCount = 0;
    
    for (let rowIndex = 1; rowIndex < Math.min(10, records.length); rowIndex++) {
      const value = String(records[rowIndex][colIndex] || '');
      if (value.includes('https://') || value.includes('cdn')) {
        photoCount++;
      }
    }
    
    if (photoCount > 0) {
      console.log(`  –°—Ç–æ–ª–±–µ—Ü ${letter} (${colIndex}): –Ω–∞–π–¥–µ–Ω–æ ${photoCount} —Å—Ç—Ä–æ–∫ —Å URL`);
    }
  }
  
  console.log('=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===\n');
};

// üîß –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–∞—Ä—Å–∏–Ω–≥ CSV —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–æ—Ç–æ –∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
const parseMultiLineCSV = (csvText: string): Product[] => {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ CSV —á–µ—Ä–µ–∑ csv-parse');
  
  const records: any[] = parse(csvText, {
    skip_empty_lines: true,
    relax_quotes: true,
    relax_column_count: true,
    trim: true,
    quote: '"',
    delimiter: ',',
    escape: '"'
  });
  
  console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${records.length}`);
  
  // üîç –î–û–ë–ê–í–õ–Ø–ï–ú –î–ò–ê–ì–ù–û–°–¢–ò–ö–£
  diagnoseColumns(records);
  
  const products: Product[] = [];
  const usedIds = new Set<string>();
  
  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
  for (let i = 1; i < records.length; i++) {
    const row = records[i];
    
    if (!row || row.length < 7) continue;
    
    const values = row.map((val: any) => cleanString(String(val || '')));
    
    if (!isValidProductData(values)) continue;
    
    // ========================================================================
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –¢–û–õ–¨–ö–û –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    // ========================================================================
    console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${i}:`);
    const photoUrl = getPhotoFromCorrectColumn(values);
    
    // ========================================================================
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    // ========================================================================
    console.log(`üìè –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞:`);
    console.log(`  –°—Ç–æ–ª–±–µ—Ü D (3): "${values[3]}"`);
    const cleanedSize = cleanSize(values[3]);
    console.log(`  –û—á–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: "${cleanedSize}"`);
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ç–∏–∫—É–ª–∞
    let productId = cleanString(values[0]);
    let counter = 1;
    let originalId = productId;
    while (usedIds.has(productId)) {
      productId = `${originalId}_${counter}`;
      counter++;
    }
    usedIds.add(productId);
    
    const product: Product = {
      id: productId,            // üéØ –ê—Ä—Ç–∏–∫—É–ª –∫–∞–∫ ID
      article: values[0],       // A: –ê—Ä—Ç–∏–∫—É–ª ‚úÖ
      brand: values[1],         // B: –ë—Ä–µ–Ω–¥ ‚úÖ  
      name: values[2],          // C: –ù–∞–∑–≤–∞–Ω–∏–µ ‚úÖ
      size: cleanedSize,        // D: –†–∞–∑–º–µ—Ä üîß –ò–°–ü–†–ê–í–õ–ï–ù–û
      category: values[4],      // E: –ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚úÖ
      gender: values[5],        // F: –ü–æ–ª ‚úÖ
      price: parseFloat(values[6]) || 0, // G: –¶–µ–Ω–∞ ‚úÖ
      photo: photoUrl           // H-K: –§–æ—Ç–æ üîß –ò–°–ü–†–ê–í–õ–ï–ù–û
    };
    
    products.push(product);
    
    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    console.log(`üì¶ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä ${products.length}:`);
    console.log(`  ID: ${product.id}`);
    console.log(`  –ê—Ä—Ç–∏–∫—É–ª: ${product.article}`);
    console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name.substring(0, 40)}...`);
    console.log(`  –ë—Ä–µ–Ω–¥: ${product.brand}`);
    console.log(`  –†–∞–∑–º–µ—Ä: "${product.size}"`);
    console.log(`  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category}`);
    console.log(`  –¶–µ–Ω–∞: ${product.price}`);
    console.log(`  –§–æ—Ç–æ: ${product.photo ? product.photo.substring(0, 60) + '...' : '–ù–ï–¢'}`);
    console.log(`  ---`);
  }
  
  console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ: –Ω–∞–π–¥–µ–Ω–æ ${products.length} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã ID
  const idCounts = new Map<string, number>();
  products.forEach(p => {
    idCounts.set(p.id, (idCounts.get(p.id) || 0) + 1);
  });
  
  const duplicates = Array.from(idCounts.entries()).filter(([_, count]) => count > 1);
  if (duplicates.length > 0) {
    console.warn('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã ID:', duplicates);
  } else {
    console.log('‚úÖ –í—Å–µ ID —É–Ω–∏–∫–∞–ª—å–Ω—ã');
  }
  
  return products;
};

// GET –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
export async function GET(request: NextRequest) {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤...');
    
    const csvUrl = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/export?format=csv&gid=${SHEET_GID}`;
    
    const response = await fetch(csvUrl, {
      cache: 'no-store',
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const csvText = await response.text();
    
    // üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ –§–£–ù–ö–¶–ò–Æ –ü–ê–†–°–ò–ù–ì–ê
    const products = parseMultiLineCSV(csvText);
    
    console.log(`üéâ –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const withPhotos = products.filter(p => p.photo && p.photo.trim()).length;
    const withoutPhotos = products.length - withPhotos;
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:`);
    console.log(`  - –í—Å–µ–≥–æ: ${products.length}`);
    console.log(`  - –° —Ñ–æ—Ç–æ: ${withPhotos}`);
    console.log(`  - –ë–µ–∑ —Ñ–æ—Ç–æ: ${withoutPhotos}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log(`üìã –ü–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞:`);
    products.slice(0, 3).forEach((p, i) => {
      console.log(`  ${i + 1}. ID: ${p.id} | Article: ${p.article} | Name: ${p.name.substring(0, 30)}... | Size: ${p.size} | Photo: ${p.photo ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
    });
    
    return NextResponse.json<ApiResponse>({
      success: true,
      data: products,
      count: products.length
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    return NextResponse.json<ApiResponse>(
      { 
        success: false,
        count: 0,
        data: [],
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤'
      }, 
      { status: 500 }
    );
  }
}