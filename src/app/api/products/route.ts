// src/app/api/products/route.ts - –ü–û–õ–ù–´–ô –ö–û–î –° –ö–≠–®–ò–†–û–í–ê–ù–ò–ï–ú

import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';

// –ö—ç—à —Ç–æ–≤–∞—Ä–æ–≤
let cachedProducts: { products: any; total?: any; } | null = null;
let cacheTimestamp = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –∫—ç—à

export async function GET(request: NextRequest) {
  try {
    console.log('üîÑ API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–æ–≤–∞—Ä—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const now = Date.now();
    const cacheAge = now - cacheTimestamp;
    const isCacheValid = cachedProducts && cacheAge < CACHE_DURATION;
    
    if (isCacheValid) {//@ts-ignore
      console.log(`üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${cachedProducts.products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫—ç—à–∞ (–≤–æ–∑—Ä–∞—Å—Ç: ${Math.round(cacheAge / 1000)}—Å)`);
      return NextResponse.json(cachedProducts);
    }
    
    console.log('üîÑ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ...');
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const getAllProductsParallel = async () => {
      console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
      const firstPageUrl = `${STRAPI_URL}/api/products?populate=*&pagination[page]=1&pagination[pageSize]=100`;
      const firstResponse = await fetch(firstPageUrl);
      
      if (!firstResponse.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${firstResponse.status}`);
      }
      
      const firstData = await firstResponse.json();
      const totalItems = firstData.meta?.pagination?.total || 0;
      const pageSize = 100;
      const totalPages = Math.ceil(totalItems / pageSize);
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${totalItems} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ ${totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö`);
      
      // –ï—Å–ª–∏ –≤—Å–µ–≥–æ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
      if (totalPages <= 1) {
        return firstData.data || [];
      }
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      const promises = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      promises.push(Promise.resolve(firstData.data));
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      for (let page = 2; page <= totalPages; page++) {
        const pageUrl = `${STRAPI_URL}/api/products?populate=*&pagination[page]=${page}&pagination[pageSize]=${pageSize}`;
        
        const pagePromise = fetch(pageUrl)
          .then(response => {
            if (!response.ok) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}: ${response.status}`);
              return [];
            }
            return response.json();
          })
          .then(data => {
            console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}: ${data.data?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤`);
            return data.data || [];
          })
          .catch(error => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}:`, error);
            return [];
          });
        
        promises.push(pagePromise);
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º ${promises.length} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);
      const startTime = Date.now();
      
      const results = await Promise.all(promises);
      
      const endTime = Date.now();
      console.log(`‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${endTime - startTime}ms`);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const allProducts = results.flat();
      console.log(`üì¶ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${allProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      
      return allProducts;
    };

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const allStrapiProducts = await getAllProductsParallel();
    
    if (allStrapiProducts.length === 0) {
      return NextResponse.json({
        products: [],
        total: 0,
        message: '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ Strapi'
      });
    }

    console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${allStrapiProducts.length} —Ç–æ–≤–∞—Ä–æ–≤...`);
    const processStartTime = Date.now();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Strapi
    const products = allStrapiProducts.map((item: any) => {
      // –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ Strapi –¥–∞–Ω–Ω—ã–µ –ª–µ–∂–∞—Ç –ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ item, –±–µ–∑ attributes
      const data = item;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å —Ü–µ–Ω–∞–º–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ sizes
      let productSizes = [];
      
      if (data.sizes && Array.isArray(data.sizes)) {
        productSizes = data.sizes
          .filter((sizeItem: any) => {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ü–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            return sizeItem.price !== null && 
                   sizeItem.stockQuantity !== null;
          })
          .map((sizeItem: any) => {
            // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            const stockQty = sizeItem.stockQuantity || 0;
            const reservedQty = sizeItem.reservedQuantity || 0;
            const availableQty = Math.max(0, stockQty - reservedQty);
            
            return {
              id: sizeItem.id,
              size: String(sizeItem.value || ''),
              price: sizeItem.price || 0,
              originalPrice: sizeItem.originalPrice,
              available: availableQty > 0,
              stockQuantity: stockQty,
              reservedQuantity: reservedQty,
              availableQuantity: availableQty
            };
          });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        productSizes.sort((a: any, b: any) => {
          const aNum = parseFloat(a.size.replace(/[^\d.]/g, ''));
          const bNum = parseFloat(b.size.replace(/[^\d.]/g, ''));
          return aNum - bNum;
        });
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const brand = data.brand?.name ? String(data.brand.name) : '–ù–µ —É–∫–∞–∑–∞–Ω';
      const category = data.category?.name ? String(data.category.name) : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
      const gender = data.gender?.name ? String(data.gender.name) : '–£–Ω–∏—Å–µ–∫—Å';

      // –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É (–º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ä–µ–¥–∏ —Ä–∞–∑–º–µ—Ä–æ–≤)
      const basePrice = productSizes.length > 0 
        ? Math.min(...productSizes.map((s: any) => s.price))
        : 0;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
      const mainPhoto = String(data.mainPhoto || '/images/placeholder.jpg');
      let additionalPhotos = [];
      
      if (data.addTotalPhotos && Array.isArray(data.addTotalPhotos)) {
        additionalPhotos = data.addTotalPhotos;
      }
      
      return {
        id: String(item.id || ''),
        article: String(data.article || ''),
        brand: brand,
        name: String(data.name || ''),
        
        // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        size: productSizes[0]?.size || '',
        sizes: productSizes.map((s: any) => s.size),
        
        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –∏ —Ü–µ–Ω–∞—Ö
        allSizes: productSizes,
        
        category: category,
        gender: gender,
        price: basePrice,
        
        // –§–æ—Ç–æ
        photo: mainPhoto,
        mainPhoto: mainPhoto,
        additionalPhotos: additionalPhotos,
        
        // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏
        stockQuantity: productSizes.reduce((sum: number, s: any) => sum + (s.stockQuantity || 0), 0),
        availableStock: productSizes.reduce((sum: number, s: any) => sum + (s.availableQuantity || 0), 0),
        inStock: productSizes.some((s: any) => s.available),
        
        isActive: data.isActive !== false,
        slug: String(data.slug || ''),
        createdAt: data.createdAt,
        updatedAt: data.updatedAt
      };
    });
    
    const processEndTime = Date.now();
    console.log(`‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${processEndTime - processStartTime}ms`);
    console.log(`‚úÖ API: –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ —Ä–∞–∑–º–µ—Ä–æ–≤`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = {
      products,
      total: allStrapiProducts.length,
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    cachedProducts = result;
    cacheTimestamp = now;
    console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –Ω–∞ ${CACHE_DURATION / 1000 / 60} –º–∏–Ω—É—Ç`);
    
    return NextResponse.json(result);

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –¥–∞–∂–µ –µ—Å–ª–∏ —É—Å—Ç–∞—Ä–µ–ª
    if (cachedProducts) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à');
      return NextResponse.json({
        ...cachedProducts,
        cached: true,
        error: '–î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏'
      });
    }
    
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Strapi',
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ Strapi –∑–∞–ø—É—â–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä—ã —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏'
      },
      { status: 500 }
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
export async function DELETE(request: NextRequest) {
  cachedProducts = null;
  cacheTimestamp = 0;
  console.log('üóëÔ∏è –ö—ç—à —Ç–æ–≤–∞—Ä–æ–≤ –æ—á–∏—â–µ–Ω');
  
  return NextResponse.json({ 
    message: '–ö—ç—à –æ—á–∏—â–µ–Ω',
    success: true 
  });
}