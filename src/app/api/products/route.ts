// src/app/api/products/route.ts - –ü–†–ê–í–ò–õ–¨–ù–´–ô –¥–ª—è –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Strapi

import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';

export async function GET(request: NextRequest) {
  try {
    console.log('üîÑ API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–æ–≤–∞—Ä—ã');
    
    // –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ —Å populate=*
    const strapiUrl = `${STRAPI_URL}/api/products?populate=*`;
    console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º:', strapiUrl);
    
    const strapiResponse = await fetch(strapiUrl, {
      headers: {
        'Content-Type': 'application/json',
      },
    });

    console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç Strapi:', strapiResponse.status, strapiResponse.statusText);

    if (!strapiResponse.ok) {
      console.error(`‚ùå Strapi –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${strapiResponse.status}`);
      return NextResponse.json(
        { 
          error: `Strapi –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${strapiResponse.status})`,
          message: '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Strapi –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:1337'
        },
        { status: 502 }
      );
    }

    const strapiData = await strapiResponse.json();
    console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç Strapi:', strapiData.data?.length || 0, '—Ç–æ–≤–∞—Ä–æ–≤');
    
    if (!strapiData.data || !Array.isArray(strapiData.data)) {
      return NextResponse.json({
        products: [],
        total: 0,
        message: '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ Strapi'
      });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Strapi
    const products = strapiData.data.map((item: any) => {
      console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä:`, item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
      
      // –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ Strapi –¥–∞–Ω–Ω—ã–µ –ª–µ–∂–∞—Ç –ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ item, –±–µ–∑ attributes
      const data = item; // –Ω–µ item.attributes!
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å —Ü–µ–Ω–∞–º–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ sizes
      let productSizes = [];
      
      if (data.sizes && Array.isArray(data.sizes)) {
        productSizes = data.sizes
          .filter((sizeItem: any) => {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ü–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            return sizeItem.price !== null && 
                   sizeItem.stockQuantity !== null;
          })
          .map((sizeItem: any) => {
            console.log(`üìè –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä:`, {
              value: sizeItem.value,
              price: sizeItem.price,
              stockQuantity: sizeItem.stockQuantity,
              reservedQuantity: sizeItem.reservedQuantity
            });
            
            // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            const stockQty = sizeItem.stockQuantity || 0;
            const reservedQty = sizeItem.reservedQuantity || 0;
            const availableQty = Math.max(0, stockQty - reservedQty);
            
            return {
              id: sizeItem.id,
              size: String(sizeItem.value || ''),
              price: sizeItem.price || 0,
              originalPrice: sizeItem.originalPrice,
              available: availableQty > 0,
              stockQuantity: stockQty,
              reservedQuantity: reservedQty,
              availableQuantity: availableQty
            };
          });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        productSizes.sort((a: any, b: any) => {
          const aNum = parseFloat(a.size.replace(/[^\d.]/g, ''));
          const bNum = parseFloat(b.size.replace(/[^\d.]/g, ''));
          return aNum - bNum;
        });
        
        console.log(`‚úÖ –†–∞–∑–º–µ—Ä—ã —Å —Ü–µ–Ω–∞–º–∏:`, productSizes.map((s: { size: any; price: any; }) => `${s.size}: ${s.price}‚ÇΩ`));
      } else {
        console.log(`‚ö†Ô∏è –†–∞–∑–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞:`, data.name);
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–Ω–∏ –ª–µ–∂–∞—Ç –ø—Ä—è–º–æ –≤ –æ–±—ä–µ–∫—Ç–∞—Ö)
      const brand = data.brand?.name ? String(data.brand.name) : '–ù–µ —É–∫–∞–∑–∞–Ω';
      const category = data.category?.name ? String(data.category.name) : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
      const gender = data.gender?.name ? String(data.gender.name) : '–£–Ω–∏—Å–µ–∫—Å';

      // –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É (–º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ä–µ–¥–∏ —Ä–∞–∑–º–µ—Ä–æ–≤)
      const basePrice = productSizes.length > 0 
        ? Math.min(...productSizes.map((s: any) => s.price))
        : 0;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
      const mainPhoto = String(data.mainPhoto || '/images/placeholder.jpg');
      let additionalPhotos = [];
      
      // addTotalPhotos –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ null
      if (data.addTotalPhotos && Array.isArray(data.addTotalPhotos)) {
        additionalPhotos = data.addTotalPhotos;
      }
      
      const product = {
        id: String(item.id || ''),
        article: String(data.article || ''),
        brand: brand,
        name: String(data.name || ''),
        
        // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        size: productSizes[0]?.size || '',
        sizes: productSizes.map((s: any) => s.size),
        
        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –∏ —Ü–µ–Ω–∞—Ö
        allSizes: productSizes,
        
        category: category,
        gender: gender,
        price: basePrice, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Å—Ä–µ–¥–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        
        // –§–æ—Ç–æ
        photo: mainPhoto,
        mainPhoto: mainPhoto,
        additionalPhotos: additionalPhotos,
        
        // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏
        stockQuantity: productSizes.reduce((sum: number, s: any) => sum + (s.stockQuantity || 0), 0),
        availableStock: productSizes.reduce((sum: number, s: any) => sum + (s.availableQuantity || 0), 0),
        inStock: productSizes.some((s: any) => s.available),
        
        isActive: data.isActive !== false,
        slug: String(data.slug || ''),
        createdAt: data.createdAt,
        updatedAt: data.updatedAt
      };
      
      console.log(`‚úÖ –¢–æ–≤–∞—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω:`, {
        name: product.name,
        brand: product.brand,
        category: product.category,
        basePrice: product.price,
        sizesCount: product.allSizes.length,
        availableSizes: product.allSizes.filter((s: { available: any; }) => s.available).length
      });
      
      return product;
    });
    
    console.log(`‚úÖ API: –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ —Ä–∞–∑–º–µ—Ä–æ–≤`);
    
    return NextResponse.json({
      products,
      total: strapiData.meta?.pagination?.total || products.length,
    });

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Strapi',
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ Strapi –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:1337 –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä—ã —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏'
      },
      { status: 500 }
    );
  }
}