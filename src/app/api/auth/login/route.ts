import { NextResponse } from 'next/server';
import { updateLastLogin } from '@/services/googleSheetsService';

interface LoginRequest {
  email: string;
}

const SHEET_ID = '1naTkxDrQFfj_d7Q2U46GOj24hSqTAqrt_Yz1ImaKyVc';
const USERS_SHEET_GID = '288409925'; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π gid –ª–∏—Å—Ç–∞ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"

export async function POST(request: Request) {
  try {
    const body: LoginRequest = await request.json();
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', body.email);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if (!validateEmail(body.email)) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å',
        field: 'email'
      }, { status: 400 });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const user = await findUserByEmail(body.email);
    if (!user) {
      return NextResponse.json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.',
        field: 'email'
      }, { status: 404 });
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –≤ Google Sheets
    try {
      if (process.env.GOOGLE_APPS_SCRIPT_URL) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ webhook...');
        await updateLastLogin(body.email);
      } else {
        console.log('‚ö†Ô∏è Google Apps Script webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –≤—Ö–æ–¥–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –≤—Ö–æ–¥–∞:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—Ö–æ–¥, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É
    }

    return NextResponse.json({
      success: true,
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      user: {
        id: user.id,
        email: user.email,
        phone: user.phone
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

function validateEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

async function findUserByEmail(email: string): Promise<any | null> {
  try {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π gid –ª–∏—Å—Ç–∞ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    const csvUrl = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/export?format=csv&gid=${USERS_SHEET_GID}`;
    
    console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—Å—Ç–µ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" —Å gid=', USERS_SHEET_GID);
    
    const response = await fetch(csvUrl, {
      cache: 'no-store',
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate'
      }
    });

    if (!response.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—Å—Ç—É "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":', response.status);
      return null;
    }

    const csvText = await response.text();
    console.log('üìÑ CSV –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª–∏–Ω–∞:', csvText.length);
    
    const lines = csvText.split('\n').filter(line => line.trim());
    console.log('üìÑ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫:', lines.length);

    for (let i = 1; i < lines.length; i++) {
      const values = parseCSVLine(lines[i]);
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É ${i}:`, values);
      
      if (values.length >= 6) {
        const userId = cleanString(values[0]);
        const userPhone = cleanString(values[1]);
        const userEmail = cleanString(values[2]);
        const agreeToMarketing = cleanString(values[3]) === 'true';
        const registrationDate = cleanString(values[4]);
        const lastLogin = cleanString(values[5]);

        console.log(`üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º email: "${userEmail}" —Å "${email}"`);

        if (userEmail.toLowerCase() === email.toLowerCase()) {
          console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userId);
          return {
            id: userId,
            phone: userPhone,
            email: userEmail,
            agreeToMarketing,
            registrationDate,
            lastLogin
          };
        }
      }
    }

    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email –Ω–µ –Ω–∞–π–¥–µ–Ω:', email);
    return null;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

function parseCSVLine(line: string): string[] {
  const result: string[] = [];
  let current = '';
  let inQuotes = false;
  
  for (let i = 0; i < line.length; i++) {
    const char = line[i];
    
    if (char === '"') {
      inQuotes = !inQuotes;
    } else if (char === ',' && !inQuotes) {
      result.push(current.trim());
      current = '';
    } else {
      current += char;
    }
  }
  result.push(current.trim()); 
  return result;
}

function cleanString(str: string): string {
  return str.replace(/^["']+|["']+$/g, '').trim();
}