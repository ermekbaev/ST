import { NextResponse } from 'next/server';
import { saveUserToGoogleSheets } from '@/services/googleSheetsService';

interface RegisterRequest {
  phone: string;
  email: string;
  agreeToMarketing: boolean;
}

interface User {
  id: string;
  phone: string;
  email: string;
  agreeToMarketing: boolean;
  registrationDate: string;
  lastLogin: string;
}

const SHEET_ID = '1naTkxDrQFfj_d7Q2U46GOj24hSqTAqrt_Yz1ImaKyVc';
const USERS_SHEET_GID = '288409925';

export async function POST(request: Request) {
  try {
    const body: RegisterRequest = await request.json();
    console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { email: body.email, phone: body.phone });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validation = validateRegistrationData(body);
    if (!validation.isValid) {
      return NextResponse.json({
        success: false,
        error: validation.error,
        field: validation.field
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await checkUserExists(body.email, body.phone);
    if (existingUser) {
      return NextResponse.json({
        success: false,
        error: existingUser.field === 'email' 
          ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' 
          : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
        field: existingUser.field
      }, { status: 409 });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser: User = {
      id: generateUserId(),
      phone: body.phone,
      email: body.email,
      agreeToMarketing: body.agreeToMarketing,
      registrationDate: new Date().toISOString(),
      lastLogin: new Date().toISOString()
    };

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser.id);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ Google Apps Script webhook
    let savedToSheets = false;
    let sheetsError = null;
    
    try {
      if (process.env.GOOGLE_APPS_SCRIPT_URL) {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ Google Apps Script webhook...');
        savedToSheets = await saveUserToGoogleSheets(newUser);
      } else {
        console.log('‚ö†Ô∏è Google Apps Script webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        sheetsError = 'Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google Sheets:', error);
      sheetsError = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    let message = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!';
    if (savedToSheets) {
      message += ' –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—ã.';
    } else if (sheetsError) {
      message += ` (Google Sheets: ${sheetsError})`;
    } else {
      message += ' –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.';
    }

    return NextResponse.json({
      success: true,
      message,
      user: {
        id: newUser.id,
        email: newUser.email,
        phone: newUser.phone
      },
      savedToSheets
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

function generateUserId(): string {
  return `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

function validateRegistrationData(data: RegisterRequest): { isValid: boolean; error?: string; field?: string } {
  if (!data.email || !validateEmail(data.email)) {
    return { isValid: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å', field: 'email' };
  }

  if (!data.phone || !validatePhone(data.phone)) {
    return { isValid: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', field: 'phone' };
  }

  return { isValid: true };
}

function validateEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

function validatePhone(phone: string): boolean {
  const cleanPhone = phone.replace(/[^\d+]/g, '');
  return cleanPhone.length >= 10 && cleanPhone.length <= 12;
}

async function checkUserExists(email: string, phone: string): Promise<{ exists: true; field: 'email' | 'phone' } | null> {
  try {
    const csvUrl = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/export?format=csv&gid=${USERS_SHEET_GID}`;
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Å—Ç "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" —Å gid=', USERS_SHEET_GID);
    
    const response = await fetch(csvUrl, {
      cache: 'no-store',
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate'
      }
    });

    if (!response.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—Å—Ç—É "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":', response.status);
      return null;
    }

    const csvText = await response.text();
    const lines = csvText.split('\n').filter(line => line.trim());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    for (let i = 1; i < lines.length; i++) {
      const values = parseCSVLine(lines[i]);
      
      if (values.length >= 3) {
        const userPhone = cleanString(values[1]);
        const userEmail = cleanString(values[2]);

        if (userEmail.toLowerCase() === email.toLowerCase()) {
          console.log('‚ùå Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', userEmail);
          return { exists: true, field: 'email' };
        }

        if (userPhone === phone) {
          console.log('‚ùå –¢–µ–ª–µ—Ñ–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', userPhone);
          return { exists: true, field: 'phone' };
        }
      }
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–æ–∂–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å');
    return null;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

function parseCSVLine(line: string): string[] {
  const result: string[] = [];
  let current = '';
  let inQuotes = false;
  
  for (let i = 0; i < line.length; i++) {
    const char = line[i];
    
    if (char === '"') {
      inQuotes = !inQuotes;
    } else if (char === ',' && !inQuotes) {
      result.push(current.trim());
      current = '';
    } else {
      current += char;
    }
  }
  result.push(current.trim()); 
  return result;
}

function cleanString(str: string): string {
  return str.replace(/^["']+|["']+$/g, '').trim();
}