// src/app/api/promocodes/route.ts - –î–õ–Ø STRAPI V5
import { NextResponse } from 'next/server';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';

export interface SimplePromoCode {
  id: number;
  code: string;
  title: string;
  discountType: 'percentage' | 'fixed_amount' | 'free_delivery';
  discountValue: number;
  minOrderAmount: number;
  isActive: boolean;
}

// GET /api/promocodes - –¥–ª—è Strapi v5
export async function GET() {
  try {
    console.log('üéüÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ Strapi v5...');

    const response = await fetch(`${STRAPI_URL}/api/promocodes`, {
      headers: {
        'Content-Type': 'application/json',
      },
      cache: 'no-store'
    });

    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ Strapi API: ${response.status}`);
      return NextResponse.json({
        success: false,
        promocodes: [],
        error: `Strapi API error: ${response.status}`
      }, { status: response.status });
    }

    const data = await response.json();
    const rawPromocodes = data.data || [];

    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${rawPromocodes.length} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–∑ Strapi v5`);

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è Strapi v5 –¥–∞–Ω–Ω—ã–µ –ù–ï –≤–ª–æ–∂–µ–Ω—ã –≤ attributes
    const promocodes: SimplePromoCode[] = rawPromocodes
      .map((promo: any) => {
        // –í Strapi v5 –ø–æ–ª—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø—Ä—è–º–æ –≤ –æ–±—ä–µ–∫—Ç–µ, –Ω–µ –≤ attributes
        const discountTypeRaw = promo.discountType || 'percentage';
        
        // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã (–≤–∏–¥–∏–º–æ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ)
        const cleanDiscountType = discountTypeRaw.trim().replace(/,$/, ''); // —É–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—É—é –≤ –∫–æ–Ω—Ü–µ
        const cleanCode = promo.code?.trim() || ''; // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
        
        return {
          id: promo.id,
          code: cleanCode.toUpperCase(),
          title: promo.title || '',
          discountType: cleanDiscountType === 'percentage' ? 'percentage' : 
                       cleanDiscountType === 'fixed_amount' ? 'fixed_amount' :
                       cleanDiscountType === 'free_delivery' ? 'free_delivery' : 'percentage',
          discountValue: parseFloat(promo.discountValue) || 0,
          minOrderAmount: parseFloat(promo.minOrderAmount) || 0,
          isActive: promo.isActive !== false
        };
      })
      .filter((promo: SimplePromoCode) => promo.isActive && promo.code);

    console.log(`‚úÖ –û—Ç–¥–∞–µ–º ${promocodes.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤`);
    console.log('üìã –ü—Ä–æ–º–æ–∫–æ–¥—ã:', promocodes.map(p => `${p.code} (${p.discountType}: ${p.discountValue})`));
    
    return NextResponse.json({
      success: true,
      promocodes,
      total: promocodes.length,
      source: 'strapi-v5'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ Strapi:', error);
    
    return NextResponse.json({
      success: false,
      promocodes: [],
      error: 'Connection error'
    }, { status: 500 });
  }
}

// POST /api/promocodes - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –ò–õ–ò –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { code, promoCodeId } = body;
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω promoCodeId, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if (promoCodeId) {
      console.log(`üìä –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ID: ${promoCodeId}`);
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º success (—Å—á–µ—Ç—á–∏–∫ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
      return NextResponse.json({ success: true });
    }
    
    // –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ –∫–æ–¥—É
    if (!code) {
      return NextResponse.json({
        success: false,
        error: '–ö–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'
      }, { status: 400 });
    }
    
    if (!code) {
      return NextResponse.json({
        success: false,
        error: '–ö–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'
      }, { status: 400 });
    }

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥: ${code}`);

    const response = await fetch(`${STRAPI_URL}/api/promocodes`, {
      headers: { 'Content-Type': 'application/json' },
      cache: 'no-store'
    });
    
    if (!response.ok) {
      return NextResponse.json({
        success: false,
        error: 'Strapi –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      }, { status: 503 });
    }

    const data = await response.json();
    const rawPromocodes = data.data || [];

    // –ò—â–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ (–≤ Strapi v5 –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ –≤ –æ–±—ä–µ–∫—Ç–µ)
    const foundPromo = rawPromocodes.find((promo: any) => 
      promo.code?.trim().toUpperCase() === code.toUpperCase() && 
      promo.isActive !== false
    );

    if (foundPromo) {
      const cleanDiscountType = (foundPromo.discountType || '').trim().replace(/,$/, '');
      
      return NextResponse.json({
        success: true,
        promocode: {
          id: foundPromo.id,
          code: foundPromo.code?.trim().toUpperCase() || '',
          title: foundPromo.title || '',
          discountType: cleanDiscountType === 'percentage' ? 'percentage' : 
                       cleanDiscountType === 'fixed_amount' ? 'fixed_amount' :
                       cleanDiscountType === 'free_delivery' ? 'free_delivery' : 'percentage',
          discountValue: parseFloat(foundPromo.discountValue) || 0,
          minOrderAmount: parseFloat(foundPromo.minOrderAmount) || 0,
          isActive: foundPromo.isActive !== false
        },
        message: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞–π–¥–µ–Ω'
      });
    } else {
      return NextResponse.json({
        success: false,
        error: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
      }, { status: 404 });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}