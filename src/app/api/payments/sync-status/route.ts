// src/app/api/payments/sync-status/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { NextRequest, NextResponse } from 'next/server';
import { YooCheckout } from '@a2seven/yoo-checkout';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';
const STRAPI_API_TOKEN = process.env.STRAPI_API_TOKEN;

const checkout = new YooCheckout({
  shopId: process.env.YUKASSA_SHOP_ID!,
  secretKey: process.env.YUKASSA_SECRET_KEY!,
});

export async function POST(request: NextRequest) {
  try {
    const { paymentId, orderNumber } = await request.json();

    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', { paymentId, orderNumber });

    if (!paymentId || !orderNumber) {
      return NextResponse.json({
        success: false,
        error: 'PaymentId –∏ orderNumber –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç –ÆKassa
    const payment = await checkout.getPayment(paymentId);

    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –æ—Ç –ÆKassa:', {
      id: payment.id,
      status: payment.status,
      paid: payment.paid,
      amount: payment.amount?.value
    });

    let updated = false;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ Strapi —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
    if (payment.status === 'succeeded' && payment.paid) {
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ orderNumber, –∞ –Ω–µ –ø–æ ID
      updated = await updateOrderPaymentStatus(orderNumber, {
        paymentStatus: 'paid'
      });

      if (updated) {
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Strapi –Ω–∞ paid');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await sendAdminNotification(`üí≥ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderNumber}`, {
          orderNumber,
          paymentId: payment.id,
          amount: `${payment.amount.value} ${payment.amount.currency}`,
          previousStatus: 'pending',
          newStatus: 'paid'
        });
      }
    } else if (payment.status === 'canceled') {
      updated = await updateOrderPaymentStatus(orderNumber, {
        paymentStatus: 'failed' // –í —Å—Ö–µ–º–µ –µ—Å—Ç—å 'failed', –Ω–æ –Ω–µ—Ç 'cancelled'
      });
      console.log('‚ùå –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Strapi –Ω–∞ failed');
    }

    return NextResponse.json({
      success: true,
      payment: {
        id: payment.id,
        status: payment.status,
        paid: payment.paid,
        amount: payment.amount?.value,
        updated
      }
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞',
      details: error.message
    }, { status: 500 });
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–∫–∞–∑–∞ –≤ Strapi
 */
async function updateOrderPaymentStatus(orderNumber: string, updateData: {
  paymentStatus: string;
}): Promise<boolean> {
  if (!STRAPI_API_TOKEN) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç STRAPI_API_TOKEN');
    return false;
  }

  try {
    console.log(`üîÑ –ò—â–µ–º –∑–∞–∫–∞–∑ ${orderNumber} –≤ Strapi –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞`);

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –ø–æ orderNumber
    const findResponse = await fetch(
      `${STRAPI_URL}/api/orders?filters[orderNumber][$eq]=${orderNumber}`,
      {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${STRAPI_API_TOKEN}`
        }
      }
    );

    if (!findResponse.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞:', findResponse.status);
      return false;
    }

    const findResult = await findResponse.json();
    
    if (!findResult.data || findResult.data.length === 0) {
      console.error(`‚ùå –ó–∞–∫–∞–∑ ${orderNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Strapi`);
      return false;
    }

    const orderId = findResult.data[0].id;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ —Å ID: ${orderId} –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${orderNumber}`);

    // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É ID
    const updateResponse = await fetch(`${STRAPI_URL}/api/orders/${orderId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${STRAPI_API_TOKEN}`
      },
      body: JSON.stringify({
        data: updateData
      })
    });

    if (!updateResponse.ok) {
      const errorText = await updateResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Strapi:', updateResponse.status, errorText);
      return false;
    }

    const result = await updateResponse.json();
    console.log('‚úÖ –ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Strapi:', result.data?.id);
    return true;

  } catch (error) {
    console.error('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram
 */
async function sendAdminNotification(message: string, details: Record<string, any>) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const ADMIN_TELEGRAM_CHAT_ID = process.env.ADMIN_TELEGRAM_CHAT_ID;

  if (!TELEGRAM_BOT_TOKEN || !ADMIN_TELEGRAM_CHAT_ID) {
    console.log('‚ÑπÔ∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    return;
  }

  try {
    const text = `${message}\n\n${Object.entries(details)
      .map(([key, value]) => `${key}: ${value}`)
      .join('\n')}`;

    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: ADMIN_TELEGRAM_CHAT_ID,
        text,
        parse_mode: 'HTML'
      })
    });

    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
}