// src/app/api/payments/webhook/route.ts
import { NextRequest, NextResponse } from 'next/server';
import crypto from 'crypto';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';
const STRAPI_API_TOKEN = process.env.STRAPI_API_TOKEN;
const YUKASSA_WEBHOOK_SECRET = process.env.YUKASSA_WEBHOOK_SECRET;

interface YooKassaWebhookEvent {
  type: string;
  event: string;
  object: {
    id: string;
    status: string;
    amount: {
      value: string;
      currency: string;
    };
    metadata?: {
      order_id?: string;
      customer_email?: string;
      customer_phone?: string;
    };
    created_at: string;
    paid: boolean;
    test: boolean;
  };
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîî –ÆKassa Webhook: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    
    const body = await request.text();
    const signature = request.headers.get('yookassa-signature');
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (!verifyWebhookSignature(body, signature)) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook');
      return NextResponse.json({ error: 'Invalid signature' }, { status: 401 });
    }

    const event: YooKassaWebhookEvent = JSON.parse(body);
    
    console.log('üì¶ –°–æ–±—ã—Ç–∏–µ –ÆKassa:', {
      type: event.type,
      event: event.event,
      paymentId: event.object.id,
      status: event.object.status,
      orderId: event.object.metadata?.order_id
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    switch (event.event) {
      case 'payment.succeeded':
        await handlePaymentSucceeded(event.object);
        break;
        
      case 'payment.canceled':
        await handlePaymentCanceled(event.object);
        break;
        
      case 'payment.waiting_for_capture':
        await handlePaymentWaitingForCapture(event.object);
        break;
        
      case 'refund.succeeded':
        await handleRefundSucceeded(event.object);
        break;
        
      default:
        console.log(`‚ÑπÔ∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event.event}`);
    }

    return NextResponse.json({ success: true });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –ÆKassa:', error);
    return NextResponse.json({ 
      error: 'Webhook processing error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –æ—Ç –ÆKassa
 */
function verifyWebhookSignature(body: string, signature: string | null): boolean {
  if (!signature || !YUKASSA_WEBHOOK_SECRET) {
    console.warn('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –∏–ª–∏ —Å–µ–∫—Ä–µ—Ç webhook');
    return false;
  }
  
  const hash = crypto
    .createHmac('sha256', YUKASSA_WEBHOOK_SECRET)
    .update(body)
    .digest('hex');
    
  return hash === signature;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
 */
async function handlePaymentSucceeded(payment: YooKassaWebhookEvent['object']) {
  const orderId = payment.metadata?.order_id;
  
  if (!orderId) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç order_id –≤ metadata –ø–ª–∞—Ç–µ–∂–∞');
    return;
  }

  console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ Strapi
    await updateOrderPaymentStatus(orderId, {
      paymentStatus: 'paid',
      paymentId: payment.id,
      paidAt: new Date().toISOString(),
      paymentAmount: parseFloat(payment.amount.value)
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await sendAdminNotification(`üí≥ –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ #${orderId}`, {
      orderId,
      paymentId: payment.id,
      amount: `${payment.amount.value} ${payment.amount.currency}`,
      customerPhone: payment.metadata?.customer_phone
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
 */
async function handlePaymentCanceled(payment: YooKassaWebhookEvent['object']) {
  const orderId = payment.metadata?.order_id;
  
  if (!orderId) return;

  console.log(`‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);

  try {
    await updateOrderPaymentStatus(orderId, {
      paymentStatus: 'cancelled',
      paymentId: payment.id
    });

    await sendAdminNotification(`‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`, {
      orderId,
      paymentId: payment.id,
      amount: `${payment.amount.value} ${payment.amount.currency}`
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞, –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 */
async function handlePaymentWaitingForCapture(payment: YooKassaWebhookEvent['object']) {
  const orderId = payment.metadata?.order_id;
  
  if (!orderId) return;

  console.log(`‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);

  try {
    await updateOrderPaymentStatus(orderId, {
      paymentStatus: 'pending',
      paymentId: payment.id
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
 */
async function handleRefundSucceeded(refund: any) {
  console.log(`üí∏ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${refund.id}`);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–∫–∞–∑–∞ –≤ Strapi
 */
async function updateOrderPaymentStatus(orderId: string, updateData: {
  paymentStatus: string;
  paymentId: string;
  paidAt?: string;
  paymentAmount?: number;
}) {
  if (!STRAPI_API_TOKEN) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç STRAPI_API_TOKEN');
    return;
  }

  try {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ ${orderId} –≤ Strapi`);

    const response = await fetch(`${STRAPI_URL}/api/orders/${orderId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${STRAPI_API_TOKEN}`
      },
      body: JSON.stringify({
        data: updateData
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Strapi:', response.status, errorText);
      return;
    }

    const result = await response.json();
    console.log('‚úÖ –ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Strapi:', result.data?.id);

  } catch (error) {
    console.error('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram
 */
async function sendAdminNotification(message: string, details: Record<string, any>) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const ADMIN_TELEGRAM_CHAT_ID = process.env.ADMIN_TELEGRAM_CHAT_ID;

  if (!TELEGRAM_BOT_TOKEN || !ADMIN_TELEGRAM_CHAT_ID) {
    console.log('‚ÑπÔ∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    return;
  }

  try {
    const text = `${message}\n\n${Object.entries(details)
      .map(([key, value]) => `${key}: ${value}`)
      .join('\n')}`;

    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: ADMIN_TELEGRAM_CHAT_ID,
        text,
        parse_mode: 'HTML'
      })
    });

    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
}