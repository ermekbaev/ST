// src/app/api/user/orders/route.ts - –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';

export async function GET(request: NextRequest) {
  try {
    console.log('üìã API: –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    const userToken = authHeader?.replace('Bearer ', '') || null;
    
    if (!userToken) {
      return NextResponse.json({ success: false, error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, { status: 401 });
    }

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResponse = await fetch(`${STRAPI_URL}/api/users/me`, {
      headers: { 'Authorization': `Bearer ${userToken}` },
    });

    if (!userResponse.ok) {
      return NextResponse.json({ success: false, error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 });
    }

    const userData = await userResponse.json();
    const userId = userData.id;
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', userId);

    // ‚úÖ –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const ordersResponse = await fetch(
      `${STRAPI_URL}/api/orders?filters[user][id][$eq]=${userId}&sort[0]=createdAt:desc&pagination[limit]=200`,
      { headers: { 'Content-Type': 'application/json' } }
    );

    const ordersData = await ordersResponse.json();
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${ordersData.data?.length || 0}`);

    // ‚úÖ –®–ê–ì 2: –ü–æ–ª—É—á–∞–µ–º –í–°–ï order-items
    let allOrderItems: any[] = [];
    let currentPage = 1;
    let hasMorePages = true;

    while (hasMorePages && currentPage <= 20) {
      const orderItemsResponse = await fetch(
        `${STRAPI_URL}/api/order-items?populate=*&pagination[page]=${currentPage}&pagination[pageSize]=100`,
        { headers: { 'Content-Type': 'application/json' } }
      );

      if (!orderItemsResponse.ok) break;

      const pageData = await orderItemsResponse.json();
      const pageItems = pageData.data || [];
      
      allOrderItems = [...allOrderItems, ...pageItems];
      
      const pagination = pageData.meta?.pagination;
      hasMorePages = pagination && currentPage < pagination.pageCount;
      currentPage++;
    }

    console.log(`üì¶ –ò–¢–û–ì–û –∑–∞–≥—Ä—É–∂–µ–Ω–æ order-items: ${allOrderItems.length}`);

    // ‚úÖ –®–ê–ì 3: –£–õ–£–ß–®–ï–ù–ù–û–ï –°–í–Ø–ó–´–í–ê–ù–ò–ï - –∏—â–µ–º order-items –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    console.log('\nüîç === –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ï–ô –ó–ê–ö–ê–ó–û–í –ò ORDER-ITEMS ===');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ID –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    const orderIds = (ordersData.data || []).map((o: any) => o.id);
    console.log('üìã ID –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', orderIds);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º orderId –≤—Å–µ—Ö order-items
    const orderItemOrderIds = allOrderItems.map((item: any) => item.orderId).filter(Boolean);
    console.log('üìã orderId –≤ order-items:', orderItemOrderIds);

    // ‚úÖ –®–ê–ì 4: –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–ñ–î–û–ì–û –ó–ê–ö–ê–ó–ê
    const orders: any[] = [];

    for (const order of ordersData.data || []) {
      console.log(`\nüîç === –ó–ê–ö–ê–ó ${order.orderNumber} (ID: ${order.id}) ===`);
      
      // –ò—â–µ–º order-items –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
      let orderItemData = null;
      let matchMethod = 'none';

      // –°–ü–û–°–û–ë 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ orderId
      const exactMatch = allOrderItems.find((item: any) => 
        item.orderId === order.id.toString()
      );
      
      if (exactMatch) {
        orderItemData = exactMatch;
        matchMethod = 'exact';
        console.log(`‚úÖ ${order.orderNumber}: –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ orderId`);
      }
      
      // –°–ü–û–°–û–ë 2: –ë–ª–∏–∑–∫–∏–µ ID (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±10)
      if (!orderItemData) {
        const closeMatches = allOrderItems.filter((item: any) => {
          const itemOrderId = parseInt(item.orderId);
          const targetOrderId = parseInt(order.id.toString());
          const diff = Math.abs(itemOrderId - targetOrderId);
          return diff <= 10 && diff > 0;
        });
        
        if (closeMatches.length === 1) {
          orderItemData = closeMatches[0];
          matchMethod = 'close';
          console.log(`‚úÖ ${order.orderNumber}: –ù–∞–π–¥–µ–Ω–æ –±–ª–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (orderId: ${closeMatches[0].orderId})`);
        } else if (closeMatches.length > 1) {
          // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–ª–∏–∑–∫–æ–µ
          closeMatches.sort((a: any, b: any) => {
            const diffA = Math.abs(parseInt(a.orderId) - parseInt(order.id.toString()));
            const diffB = Math.abs(parseInt(b.orderId) - parseInt(order.id.toString()));
            return diffA - diffB;
          });
          orderItemData = closeMatches[0];
          matchMethod = 'closest';
          console.log(`‚úÖ ${order.orderNumber}: –í—ã–±—Ä–∞–Ω–æ –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (orderId: ${closeMatches[0].orderId})`);
        }
      }

      // –°–ü–û–°–û–ë 3: –ü–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5 –º–∏–Ω—É—Ç)
      if (!orderItemData) {
        const orderTime = new Date(order.createdAt).getTime();
        const timeMatches = allOrderItems.filter((item: any) => {
          const itemTime = new Date(item.createdAt).getTime();
          const timeDiff = Math.abs(orderTime - itemTime);
          return timeDiff <= 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
        });
        
        if (timeMatches.length === 1) {
          orderItemData = timeMatches[0];
          matchMethod = 'time';
          console.log(`‚úÖ ${order.orderNumber}: –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏`);
        }
      }

      // ‚úÖ –®–ê–ì 5: –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
      let productImage = '/api/placeholder/98/50';
      let imageSource = 'placeholder';

      if (orderItemData) {
        console.log(`üìã ${order.orderNumber}: OrderItem –Ω–∞–π–¥–µ–Ω (${matchMethod}), productId: ${orderItemData.productId}`);
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π product
        if (orderItemData.product?.mainPhoto) {
          productImage = orderItemData.product.mainPhoto;
          imageSource = 'linked_product';
          console.log(`‚úÖ ${order.orderNumber}: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞`);
        }
        // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ API
        else if (orderItemData.productId) {
          console.log(`üîç ${order.orderNumber}: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç ${orderItemData.productId}...`);
          
          try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint —Å –ø–æ–ª—è–º–∏
            const productResponse = await fetch(
              `${STRAPI_URL}/api/products/${orderItemData.productId}?fields[0]=mainPhoto&fields[1]=name`,
              { headers: { 'Content-Type': 'application/json' } }
            );
            
            console.log(`üì° ${order.orderNumber}: –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: ${productResponse.status}`);
            
            if (productResponse.ok) {
              const productData = await productResponse.json();
              console.log(`üì¶ ${order.orderNumber}: –û—Ç–≤–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞:`, {
                hasData: !!productData.data,
                attributes: productData.data?.attributes || productData.data,
                mainPhoto: productData.data?.attributes?.mainPhoto || productData.data?.mainPhoto
              });
              
              // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ attributes, –∏ –ø—Ä—è–º—ã–µ –ø–æ–ª—è
              const mainPhoto = productData.data?.attributes?.mainPhoto || productData.data?.mainPhoto;
              if (mainPhoto) {
                productImage = mainPhoto;
                imageSource = 'fetched_product';
                console.log(`‚úÖ ${order.orderNumber}: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ API: ${mainPhoto.substring(0, 50)}...`);
              } else {
                console.log(`‚ö†Ô∏è ${order.orderNumber}: –£ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç mainPhoto`);
              }
            } else {
              console.log(`‚ùå ${order.orderNumber}: –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (${productResponse.status})`);
            }
          } catch (error) {
            console.error(`‚ùå ${order.orderNumber}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:`, error);
          }
        }
      } else {
        console.log(`‚ùå ${order.orderNumber}: OrderItem –ù–ï –ù–ê–ô–î–ï–ù`);
      }

      // ‚úÖ –®–ê–ì 6: –°–û–ó–î–ê–ï–ú –ó–ê–ö–ê–ó
      const orderResult = {
        id: order.id.toString(),
        orderNumber: order.orderNumber,
        totalAmount: parseFloat(order.totalAmount) || 0,
        orderStatus: order.orderStatus || 'pending',
        paymentStatus: order.paymentStatus || 'pending',
        deliveryMethod: order.deliveryMethod || '',
        paymentMethod: order.paymentMethod || '',
        deliveryAddress: order.deliveryAddress || '',
        customerName: order.customerName || '',
        customerPhone: order.customerPhone || '',
        customerEmail: order.customerEmail || '',
        notes: order.notes || '',
        createdAt: order.createdAt,
        items: orderItemData ? [{
          id: orderItemData.id.toString(),
          productName: orderItemData.productName || orderItemData.product?.name || orderItemData.product?.attributes?.name || `–¢–æ–≤–∞—Ä ${orderItemData.productId}`,
          quantity: orderItemData.quantity || 1,
          size: orderItemData.size?.value || orderItemData.size?.attributes?.value || 'ONE SIZE',
          priceAtTime: parseFloat(orderItemData.priceAtTime) || 0,
          productImage
        }] : [],
        debug: {
          orderItemFound: !!orderItemData,
          matchMethod: matchMethod,
          imageSource: imageSource,
          productId: orderItemData?.productId,
          hasLinkedProduct: !!orderItemData?.product,
          orderItemOrderId: orderItemData?.orderId
        }
      };

      console.log(`üìã ${order.orderNumber}: –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:`, {
        hasItems: orderResult.items.length > 0,
        matchMethod: matchMethod,
        imageSource: imageSource,
        isPlaceholder: orderResult.items[0]?.productImage === '/api/placeholder/98/50'
      });

      orders.push(orderResult);
    }

    // ‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    console.log('\nüéØ === –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    const withImages = orders.filter(o => o.items.length > 0 && o.items[0].productImage !== '/api/placeholder/98/50').length;
    const withPlaceholders = orders.filter(o => o.items.length > 0 && o.items[0].productImage === '/api/placeholder/98/50').length;
    const withoutItems = orders.filter(o => o.items.length === 0).length;
    
    console.log(`üìä –ó–∞–∫–∞–∑–æ–≤ —Å —Ñ–æ—Ç–æ: ${withImages}`);
    console.log(`üìä –ó–∞–∫–∞–∑–æ–≤ —Å placeholder: ${withPlaceholders}`);
    console.log(`üìä –ó–∞–∫–∞–∑–æ–≤ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤: ${withoutItems}`);

    return NextResponse.json({
      success: true,
      orders,
      count: orders.length,
      totalOrderItems: allOrderItems.length,
      debug: {
        ordersWithImages: withImages,
        ordersWithPlaceholders: withPlaceholders,
        ordersWithoutItems: withoutItems,
        totalOrderItems: allOrderItems.length,
        orderIds: orderIds,
        orderItemOrderIds: orderItemOrderIds
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}