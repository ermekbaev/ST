// src/app/api/user/orders/route.ts
import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';

interface OrderItem {
  id: string;
  productName: string;
  quantity: number;
  size: string;
  priceAtTime: number;
  productImage?: string; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
}

interface UserOrder {
  id: string;
  orderNumber: string;
  totalAmount: number;
  orderStatus: string;
  paymentStatus: string;
  deliveryMethod: string;
  paymentMethod: string;
  deliveryAddress?: string;
  customerName: string;
  customerPhone: string;
  customerEmail?: string;
  notes?: string;
  createdAt: string;
  items: OrderItem[];
}

// GET /api/user/orders - –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request: NextRequest) {
  try {
    console.log('üìã API: –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    const userToken = authHeader?.replace('Bearer ', '') || null;
    
    if (!userToken) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return NextResponse.json(
        { success: false, error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      );
    }

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userId: string | null = null;
    try {
      const userResponse = await fetch(`${STRAPI_URL}/api/users/me`, {
        headers: {
          'Authorization': `Bearer ${userToken}`,
        },
      });

      if (!userResponse.ok) {
        console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
        return NextResponse.json(
          { success: false, error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' },
          { status: 401 }
        );
      }

      const userData = await userResponse.json();
      userId = userData.id;
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', userData.id, userData.email);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' },
        { status: 500 }
      );
    }

    // ‚úÖ –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`üîç –ò—â–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
    
    const ordersResponse = await fetch(
      `${STRAPI_URL}/api/orders?filters[user][id][$eq]=${userId}&populate=order_item&sort[0]=createdAt:desc`,
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );

    if (!ordersResponse.ok) {
      const errorText = await ordersResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Strapi:', errorText);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤' },
        { status: 500 }
      );
    }

    const ordersData = await ordersResponse.json();
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${ordersData.data?.length || 0}`);

    // ‚úÖ –®–ê–ì 2: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ order-items —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Ñ–æ—Ç–æ, —Ä–∞–∑–º–µ—Ä—ã)
    const orderItemsResponse = await fetch(
      `${STRAPI_URL}/api/order-items?populate=*`,
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );

    let orderItemsData: any = { data: [] };
    if (orderItemsResponse.ok) {
      orderItemsData = await orderItemsResponse.json();
      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${orderItemsData.data?.length || 0}`);
    }

    // ‚úÖ –®–ê–ì 3: –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É order-items –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ orderId
    const orderItemsMap = new Map();
    (orderItemsData.data || []).forEach((item: any) => {
      if (item.orderId) {
        orderItemsMap.set(item.orderId, item);
      }
    });

    // ‚úÖ –®–ê–ì 4: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, –æ–±—ä–µ–¥–∏–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const orders: UserOrder[] = (ordersData.data || []).map((order: any) => {
      // –ò—â–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ API
      const fullOrderItem = orderItemsMap.get(order.id.toString());
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–≤–æ–≥–æ API –∏–ª–∏ –ø–æ–ª–Ω—É—é –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ
      const orderItemData = fullOrderItem || order.order_item;
      
      console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ ${order.orderNumber}:`, {
        hasBasicOrderItem: !!order.order_item,
        hasFullOrderItem: !!fullOrderItem,
        productName: orderItemData?.productName,
        hasProduct: !!orderItemData?.product,
        hasSize: !!orderItemData?.size
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
      const items: OrderItem[] = [];
      
      if (orderItemData) {
        items.push({
          id: orderItemData.id.toString(),
          // –ù–ê–ó–í–ê–ù–ò–ï: –±–µ—Ä–µ–º –∏–∑ productName –∏–ª–∏ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
          productName: orderItemData.productName || orderItemData.product?.name || `–¢–æ–≤–∞—Ä ${orderItemData.productId}`,
          quantity: orderItemData.quantity || 1,
          // –†–ê–ó–ú–ï–†: –±–µ—Ä–µ–º –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ size –æ–±—ä–µ–∫—Ç–∞
          size: orderItemData.size?.value || orderItemData.size?.productName || 'ONE SIZE',
          priceAtTime: parseFloat(orderItemData.priceAtTime) || 0,
          // –§–û–¢–û: –±–µ—Ä–µ–º –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (—É–∂–µ –ø–æ–ª–Ω—ã–π URL)
          productImage: orderItemData.product?.mainPhoto || '/api/placeholder/98/50'
        });

        console.log(`‚úÖ –¢–æ–≤–∞—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.orderNumber}:`, {
          name: items[0].productName,
          size: items[0].size,
          hasImage: items[0].productImage !== '/api/placeholder/98/50'
        });
      } else {
        console.log(`‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.orderNumber}`);
      }

      return {
        id: order.id.toString(),
        orderNumber: order.orderNumber,
        totalAmount: parseFloat(order.totalAmount) || 0,
        orderStatus: order.orderStatus || 'pending',
        paymentStatus: order.paymentStatus || 'pending',
        deliveryMethod: order.deliveryMethod || '',
        paymentMethod: order.paymentMethod || '',
        deliveryAddress: order.deliveryAddress || '',
        customerName: order.customerName || '',
        customerPhone: order.customerPhone || '',
        customerEmail: order.customerEmail || '',
        notes: order.notes || '',
        createdAt: order.createdAt,
        items
      };
    });

    console.log('‚úÖ –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:', orders.length);

    return NextResponse.json({
      success: true,
      orders,
      count: orders.length,
      message: '–ó–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}