// src/app/api/user/orders/route.ts
import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';

interface OrderItem {
  id: string;
  productName: string;
  quantity: number;
  size: string;
  priceAtTime: number;
  productImage?: string;
}

interface UserOrder {
  id: string;
  orderNumber: string;
  totalAmount: number;
  orderStatus: string;
  paymentStatus: string;
  deliveryMethod: string;
  paymentMethod: string;
  deliveryAddress?: string;
  customerName: string;
  customerPhone: string;
  customerEmail?: string;
  notes?: string;
  createdAt: string;
  items: OrderItem[];
}

// src/app/api/user/orders/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô

export async function GET(request: NextRequest) {
  try {
    console.log('üìã API: –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ)
    const authHeader = request.headers.get('authorization');
    const userToken = authHeader?.replace('Bearer ', '') || null;
    
    if (!userToken) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return NextResponse.json(
        { success: false, error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      );
    }

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ)
    let userId: string | null = null;
    try {
      const userResponse = await fetch(`${STRAPI_URL}/api/users/me`, {
        headers: {
          'Authorization': `Bearer ${userToken}`,
        },
      });

      if (!userResponse.ok) {
        console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
        return NextResponse.json(
          { success: false, error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' },
          { status: 401 }
        );
      }

      const userData = await userResponse.json();
      userId = userData.id;
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', userData.id, userData.email);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' },
        { status: 500 }
      );
    }

    // ‚úÖ –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`üîç –ò—â–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
    
    const ordersResponse = await fetch(
      `${STRAPI_URL}/api/orders?filters[user][id][$eq]=${userId}&populate=order_item&sort[0]=createdAt:desc&pagination[limit]=200`,
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );

    if (!ordersResponse.ok) {
      const errorText = await ordersResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Strapi:', errorText);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤' },
        { status: 500 }
      );
    }

    const ordersData = await ordersResponse.json();
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${ordersData.data?.length || 0}`);

    // ‚úÖ –®–ê–ì 2: –ò–°–ü–†–ê–í–õ–ï–ù–û - –ü–æ–ª—É—á–∞–µ–º –í–°–ï order-items —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï order-items...');
    
    let allOrderItems: any[] = [];
    let currentPage = 1;
    const pageSize = 100;
    let hasMorePages = true;

    while (hasMorePages) {
      console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${currentPage} order-items...`);
      
      const orderItemsResponse = await fetch(
        `${STRAPI_URL}/api/order-items?populate=*&pagination[page]=${currentPage}&pagination[pageSize]=${pageSize}`,
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );

      if (!orderItemsResponse.ok) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPage} order-items`);
        break;
      }

      const pageData = await orderItemsResponse.json();
      const pageItems = pageData.data || [];
      
      console.log(`üì¶ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${pageItems.length} order-items`);
      
      allOrderItems = [...allOrderItems, ...pageItems];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const pagination = pageData.meta?.pagination;
      hasMorePages = pagination && currentPage < pagination.pageCount;
      currentPage++;
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ 20 —Å—Ç—Ä–∞–Ω–∏—Ü
      if (currentPage > 20) {
        console.warn('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (20), –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
        break;
      }
    }

    console.log(`üì¶ –ò–¢–û–ì–û –∑–∞–≥—Ä—É–∂–µ–Ω–æ order-items: ${allOrderItems.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ order-items –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîç –í–°–ï ORDER-ITEMS:');
    allOrderItems.forEach((item: any) => {
      console.log(`  - ID: ${item.id}, orderId: ${item.orderId}, productId: ${item.productId}, product: ${!!item.product}`);
    });

    // ‚úÖ –®–ê–ì 3: –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É order-items
    const orderItemsMap = new Map();
    const allOrderIds = (ordersData.data || []).map((o: any) => o.id);
    
    allOrderItems.forEach((item: any) => {
      if (item.orderId) {
        console.log(`üóÇÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç—É: orderId=${item.orderId}, productId=${item.productId}, hasProduct=${!!item.product}`);
        orderItemsMap.set(item.orderId, item);
      }
    });

    console.log(`üó∫Ô∏è –ö–∞—Ä—Ç–∞ order-items —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏:`, Array.from(orderItemsMap.keys()));
    console.log(`üó∫Ô∏è –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º–µ—é—Ç ID:`, allOrderIds);
    
    // ‚úÖ –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–∫–∏–µ ID –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ –ø—Ä—è–º—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    console.log('\nüîç –ü–û–ò–°–ö –°–í–Ø–ó–ï–ô –ü–û –ë–õ–ò–ó–ö–ò–ú ID:');
    allOrderIds.forEach((orderId: any) => {
      const orderIdStr = orderId.toString();
      const hasDirectMatch = orderItemsMap.has(orderIdStr);
      
      if (!hasDirectMatch) {
        // –ò—â–µ–º order-items —Å ID –±–ª–∏–∑–∫–∏–º–∏ –∫ orderId
        const closeMatches = allOrderItems.filter((item: any) => {
          const itemOrderId = parseInt(item.orderId);
          const targetOrderId = parseInt(orderIdStr);
          const diff = Math.abs(itemOrderId - targetOrderId);
          return diff <= 5; // –í –ø—Ä–µ–¥–µ–ª–∞—Ö 5 ID
        });
        
        console.log(`  –ó–∞–∫–∞–∑ ${orderIdStr}: –ø—Ä—è–º–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –±–ª–∏–∑–∫–∏–µ ID:`, 
          closeMatches.map((item: any) => `orderId=${item.orderId} (diff=${Math.abs(parseInt(item.orderId) - parseInt(orderIdStr))})`));
          
        // –ï—Å–ª–∏ –µ—Å—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –±–ª–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (closeMatches.length === 1) {
          console.log(`  ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: orderId=${closeMatches[0].orderId} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderIdStr}`);
          orderItemsMap.set(orderIdStr, closeMatches[0]);
        }
      } else {
        console.log(`  –ó–∞–∫–∞–∑ ${orderIdStr}: ‚úÖ –µ—Å—Ç—å –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ`);
      }
    });

    // ‚úÖ –®–ê–ì 5: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ)
    const orders: UserOrder[] = [];

    for (const order of ordersData.data || []) {
      console.log(`\nüîç === –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ó–ê–ö–ê–ó ${order.orderNumber} (ID: ${order.id}) ===`);
      
      // –ò—â–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
      const fullOrderItem = orderItemsMap.get(order.id.toString());
      const orderItemData = fullOrderItem || order.order_item;
      
      console.log(`üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:`, {
        orderIdString: order.id.toString(),
        hasBasicOrderItem: !!order.order_item,
        hasFullOrderItem: !!fullOrderItem,
        productId: orderItemData?.productId,
        productName: orderItemData?.productName,
        hasLinkedProduct: !!orderItemData?.product,
        productMainPhoto: orderItemData?.product?.mainPhoto
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
      const items: OrderItem[] = [];
      
      if (orderItemData) {
        let productImage = '/api/placeholder/98/50';
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–π product —Å —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (orderItemData.product?.mainPhoto) {
          productImage = orderItemData.product.mainPhoto;
          console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: ${productImage.substring(0, 50)}...`);
        }
        // –ù–û–í–û–ï: –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ product, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –ø–æ productId
        else if (orderItemData.productId) {
          console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID: ${orderItemData.productId}`);
          
          try {
            const productResponse = await fetch(
              `${STRAPI_URL}/api/products/${orderItemData.productId}?fields=mainPhoto`,
              {
                headers: {
                  'Content-Type': 'application/json',
                },
              }
            );
            
            if (productResponse.ok) {
              const productData = await productResponse.json();
              if (productData.data?.mainPhoto) {
                productImage = productData.data.mainPhoto;
                console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞: ${productImage.substring(0, 50)}...`);
              } else {
                console.log(`‚ö†Ô∏è –£ –ø—Ä–æ–¥—É–∫—Ç–∞ ${orderItemData.productId} –Ω–µ—Ç mainPhoto`);
              }
            } else {
              console.log(`‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç ${orderItemData.productId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API (—Å—Ç–∞—Ç—É—Å: ${productResponse.status})`);
            }
          } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ ${orderItemData.productId}:`, error);
          }
        }

        items.push({
          id: orderItemData.id.toString(),
          productName: orderItemData.productName || orderItemData.product?.name || `–¢–æ–≤–∞—Ä ${orderItemData.productId}`,
          quantity: orderItemData.quantity || 1,
          size: orderItemData.size?.value || 'ONE SIZE',
          priceAtTime: parseFloat(orderItemData.priceAtTime) || 0,
          productImage
        });

        console.log(`‚úÖ –¢–æ–≤–∞—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.orderNumber}:`, {
          name: items[0].productName,
          size: items[0].size,
          imageUrl: items[0].productImage,
          hasRealImage: items[0].productImage !== '/api/placeholder/98/50'
        });
      } else {
        console.log(`‚ö†Ô∏è –ù–ï–¢ –î–ê–ù–ù–´–• –û –¢–û–í–ê–†–ï –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.orderNumber} (order_item –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)`);
      }

      orders.push({
        id: order.id.toString(),
        orderNumber: order.orderNumber,
        totalAmount: parseFloat(order.totalAmount) || 0,
        orderStatus: order.orderStatus || 'pending',
        paymentStatus: order.paymentStatus || 'pending',
        deliveryMethod: order.deliveryMethod || '',
        paymentMethod: order.paymentMethod || '',
        deliveryAddress: order.deliveryAddress || '',
        customerName: order.customerName || '',
        customerPhone: order.customerPhone || '',
        customerEmail: order.customerEmail || '',
        notes: order.notes || '',
        createdAt: order.createdAt,
        items
      });
    }

    console.log('‚úÖ –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:', orders.length);

    return NextResponse.json({
      success: true,
      orders,
      count: orders.length,
      totalOrderItems: allOrderItems.length,
      message: '–ó–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}