// src/app/api/user/orders/route.ts
import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';

interface OrderItem {
  id: string;
  productName: string;
  quantity: number;
  size: string;
  priceAtTime: number;
}

interface UserOrder {
  id: string;
  orderNumber: string;
  totalAmount: number;
  orderStatus: string;
  paymentStatus: string;
  deliveryMethod: string;
  paymentMethod: string;
  deliveryAddress?: string;
  notes?: string;
  createdAt: string;
  items: OrderItem[];
}

// GET /api/user/orders - –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request: NextRequest) {
  try {
    console.log('üìã API: –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    const userToken = authHeader?.replace('Bearer ', '') || null;
    
    if (!userToken) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return NextResponse.json(
        { success: false, error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      );
    }

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userId: string | null = null;
    try {
      const userResponse = await fetch(`${STRAPI_URL}/api/users/me`, {
        headers: {
          'Authorization': `Bearer ${userToken}`,
        },
      });

      if (!userResponse.ok) {
        console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
        return NextResponse.json(
          { success: false, error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' },
          { status: 401 }
        );
      }

      const userData = await userResponse.json();
      userId = userData.id;
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', userData.id, userData.email);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' },
        { status: 500 }
      );
    }

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Strapi
    console.log(`üîç –ò—â–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
    
    const ordersResponse = await fetch(
      `${STRAPI_URL}/api/orders?filters[user][id][$eq]=${userId}&populate[order_items]=*&sort[0]=createdAt:desc`,
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );

    if (!ordersResponse.ok) {
      const errorText = await ordersResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Strapi:', errorText);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤' },
        { status: 500 }
      );
    }

    const ordersData = await ordersResponse.json();
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${ordersData.data?.length || 0}`);

    // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const orders: UserOrder[] = (ordersData.data || []).map((order: any) => {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
      const items: OrderItem[] = (order.order_items || []).map((item: any) => ({
        id: item.id.toString(),
        productName: item.productName || `–¢–æ–≤–∞—Ä ${item.productId}`,
        quantity: item.quantity || 1,
        size: item.size || 'ONE SIZE',
        priceAtTime: parseFloat(item.priceAtTime) || 0
      }));

      return {
        id: order.id.toString(),
        orderNumber: order.orderNumber,
        totalAmount: parseFloat(order.totalAmount) || 0,
        orderStatus: order.orderStatus || 'pending',
        paymentStatus: order.paymentStatus || 'pending',
        deliveryMethod: order.deliveryMethod || '',
        paymentMethod: order.paymentMethod || '',
        deliveryAddress: order.deliveryAddress || '',
        notes: order.notes || '',
        createdAt: order.createdAt,
        items
      };
    });

    console.log('‚úÖ –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:', orders.length);

    return NextResponse.json({
      success: true,
      orders,
      count: orders.length,
      message: '–ó–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

// ‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
function getDeliveryMethodName(method: string): string {
  const methods: Record<string, string> = {
    'store_pickup': '–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞',
    'courier_ts': '–ö—É—Ä—å–µ—Ä TS',
    'cdek_pickup': '–°–î–≠–ö –¥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏',
    'cdek_courier': '–°–î–≠–ö –∫—É—Ä—å–µ—Ä–æ–º'
  };
  return methods[method] || method;
}

function getPaymentMethodName(method: string): string {
  const methods: Record<string, string> = {
    'card': '–û–Ω–ª–∞–π–Ω –∫–∞—Ä—Ç–æ–π',
    'cash_vladivostok': '–ù–∞–ª–∏—á–Ω—ã–º–∏ –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ'
  };
  return methods[method] || method;
}

function getOrderStatusName(status: string): string {
  const statuses: Record<string, string> = {
    'pending': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
    'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
    'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
  };
  return statuses[status] || status;
}

function getPaymentStatusName(status: string): string {
  const statuses: Record<string, string> = {
    'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
    'paid': '–û–ø–ª–∞—á–µ–Ω',
    'failed': '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã'
  };
  return statuses[status] || status;
}