// src/app/api/user/orders/route.ts - –û–ë–ù–û–í–õ–ï–ù–û –° –ü–†–ê–í–ò–õ–¨–ù–´–ú POPULATE
import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';

export async function GET(request: NextRequest) {
  try {
    console.log('üìã API: –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    const userToken = authHeader?.replace('Bearer ', '') || null;
    
    if (!userToken) {
      return NextResponse.json({ success: false, error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResponse = await fetch(`${STRAPI_URL}/api/users/me`, {
      headers: { 'Authorization': `Bearer ${userToken}` },
    });

    if (!userResponse.ok) {
      return NextResponse.json({ success: false, error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 });
    }

    const userData = await userResponse.json();
    const userId = userData.id;
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', userId);

    // ‚úÖ –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –ü–û–õ–ù–´–ú populate –¥–ª—è order_items
    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å –ø–æ–ª–Ω—ã–º populate...`);
    
    let ordersData = null;
    let workingPopulateField = 'order_items';

    try {
      // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ê–°–®–ò–†–ï–ù–ù–´–ô POPULATE –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò PRODUCT –ò SIZE
      const ordersResponse = await fetch(
        `${STRAPI_URL}/api/orders?filters[user][id][$eq]=${userId}&populate[order_items][populate][0]=product&populate[order_items][populate][1]=size&sort[0]=createdAt:desc&pagination[limit]=200`,
        { headers: { 'Content-Type': 'application/json' } }
      );

      if (ordersResponse.ok) {
        ordersData = await ordersResponse.json();
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞–∫–∞–∑—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º populate –¥–ª—è order_items`);
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${ordersData.data?.length || 0}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ populate
        ordersData.data?.forEach((order: any, index: number) => {
          console.log(`üìã –ó–∞–∫–∞–∑ ${index + 1} (${order.orderNumber}): order_items = ${order.order_items?.length || 0}`);
          if (order.order_items?.length > 0) {
            order.order_items.forEach((item: any, itemIndex: number) => {
              console.log(`  –¢–æ–≤–∞—Ä ${itemIndex + 1}: product=${!!item.product}, size=${!!item.size}, mainPhoto=${!!item.product?.mainPhoto}`);
            });
          }
        });
      } else {
        console.warn('‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π populate –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π...');
        throw new Error('–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π populate –Ω–µ —É–¥–∞–ª—Å—è');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π populate –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π populate...', error);
      
      // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π populate
      try {
        const ordersResponse = await fetch(
          `${STRAPI_URL}/api/orders?filters[user][id][$eq]=${userId}&populate=order_items&sort[0]=createdAt:desc&pagination[limit]=200`,
          { headers: { 'Content-Type': 'application/json' } }
        );

        if (ordersResponse.ok) {
          ordersData = await ordersResponse.json();
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞–∫–∞–∑—ã —Å –ø—Ä–æ—Å—Ç—ã–º populate order_items`);
        } else {
          throw new Error('–ü—Ä–æ—Å—Ç–æ–π populate —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è');
        }
      } catch (fallbackError) {
        console.warn('‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ–π populate —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –±–µ–∑ populate...', fallbackError);
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –±–µ–∑ populate
        const ordersResponse = await fetch(
          `${STRAPI_URL}/api/orders?filters[user][id][$eq]=${userId}&sort[0]=createdAt:desc&pagination[limit]=200`,
          { headers: { 'Content-Type': 'application/json' } }
        );

        if (!ordersResponse.ok) {
          const errorText = await ordersResponse.text();
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Strapi:', errorText);
          return NextResponse.json(
            { success: false, error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤' },
            { status: 500 }
          );
        }

        ordersData = await ordersResponse.json();
        workingPopulateField = null;
        console.log('‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞–∫–∞–∑—ã –ë–ï–ó populate');
      }
    }

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${ordersData.data?.length || 0}`);

    // ‚úÖ –®–ê–ì 2: –ü–æ–ª—É—á–∞–µ–º –í–°–ï order-items –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ order-items –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç...');
    
    let allOrderItems: any[] = [];
    let currentPage = 1;
    let hasMorePages = true;

    while (hasMorePages && currentPage <= 20) {
      const orderItemsResponse = await fetch(
        `${STRAPI_URL}/api/order-items?populate=*&pagination[page]=${currentPage}&pagination[pageSize]=100`,
        { headers: { 'Content-Type': 'application/json' } }
      );

      if (!orderItemsResponse.ok) break;

      const pageData = await orderItemsResponse.json();
      const pageItems = pageData.data || [];
      
      allOrderItems = [...allOrderItems, ...pageItems];
      
      const pagination = pageData.meta?.pagination;
      hasMorePages = pagination && currentPage < pagination.pageCount;
      currentPage++;
    }

    console.log(`üì¶ –ò–¢–û–ì–û –∑–∞–≥—Ä—É–∂–µ–Ω–æ order-items: ${allOrderItems.length}`);

    // ‚úÖ –®–ê–ì 3: –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–ñ–î–û–ì–û –ó–ê–ö–ê–ó–ê
    const orders: any[] = [];

    for (const order of ordersData.data || []) {
      console.log(`\nüîç === –ó–ê–ö–ê–ó ${order.orderNumber} (ID: ${order.id}) ===`);
      
      // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú order_items –∏–∑ –∑–∞–∫–∞–∑–∞ (—Å populate)
      let orderItems: any[] = [];
      
      if (order.order_items && Array.isArray(order.order_items) && order.order_items.length > 0) {
        orderItems = order.order_items;
        console.log(`‚úÖ ${order.orderNumber}: –ù–∞–π–¥–µ–Ω–æ ${orderItems.length} —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ populate order_items`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞—á–µ—Å—Ç–≤–æ populate –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        orderItems.forEach((item, index) => {
          console.log(`  –¢–æ–≤–∞—Ä ${index + 1}: product=${!!item.product}, size=${!!item.size}, productName=${item.productName}, mainPhoto=${!!item.product?.mainPhoto}`);
        });
      }
      
      // ‚úÖ –ï–°–õ–ò –ù–ï–¢ POPULATED –î–ê–ù–ù–´–•, –∏—â–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö order-items
      if (orderItems.length === 0) {
        console.log(`‚ö†Ô∏è ${order.orderNumber}: –ù–µ—Ç populated order_items, –∏—â–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ...`);
        
        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ orderId
        const exactMatches = allOrderItems.filter((item: any) => 
          item.orderId === order.id.toString()
        );
        
        if (exactMatches.length > 0) {
          orderItems = exactMatches;
          console.log(`‚úÖ ${order.orderNumber}: –ù–∞–π–¥–µ–Ω–æ ${orderItems.length} —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ orderId`);
        }
        // –ë–ª–∏–∑–∫–∏–µ ID
        else {
          const closeMatches = allOrderItems.filter((item: any) => {
            const itemOrderId = parseInt(item.orderId);
            const targetOrderId = parseInt(order.id.toString());
            const diff = Math.abs(itemOrderId - targetOrderId);
            return diff <= 10 && diff > 0;
          });
          
          if (closeMatches.length > 0) {
            closeMatches.sort((a: any, b: any) => {
              const diffA = Math.abs(parseInt(a.orderId) - parseInt(order.id.toString()));
              const diffB = Math.abs(parseInt(b.orderId) - parseInt(order.id.toString()));
              return diffA - diffB;
            });
            
            const minDiff = Math.abs(parseInt(closeMatches[0].orderId) - parseInt(order.id.toString()));
            orderItems = closeMatches.filter((item: any) => {
              const diff = Math.abs(parseInt(item.orderId) - parseInt(order.id.toString()));
              return diff === minDiff;
            });
            
            console.log(`‚úÖ ${order.orderNumber}: –ù–∞–π–¥–µ–Ω–æ ${orderItems.length} —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –±–ª–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Ä–∞–∑–Ω–æ—Å—Ç—å: ${minDiff})`);
          }
        }
      }

      // ‚úÖ –®–ê–ì 4: –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –ù–ê–ô–î–ï–ù–ù–´–• –¢–û–í–ê–†–û–í
      const items: any[] = [];
      
      for (let i = 0; i < orderItems.length; i++) {
        const orderItemData = orderItems[i];
        console.log(`\nüõçÔ∏è ${order.orderNumber}: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä ${i + 1}/${orderItems.length} (ID: ${orderItemData.id})`);

        // ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –î–õ–Ø –ö–ê–ñ–î–û–ì–û –¢–û–í–ê–†–ê
        let productImage = '/api/placeholder/98/50';
        let imageSource = 'placeholder';

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π product –∏–∑ populate
        if (orderItemData.product?.mainPhoto) {
          productImage = orderItemData.product.mainPhoto;
          imageSource = 'populated_product';
          console.log(`‚úÖ ${order.orderNumber}: –¢–æ–≤–∞—Ä ${i + 1} - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ populated product: ${productImage.substring(0, 50)}...`);
        }
        // 2. –ï—Å–ª–∏ –Ω–µ—Ç populated product, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ productId
        else if (orderItemData.productId) {
          console.log(`üîç ${order.orderNumber}: –¢–æ–≤–∞—Ä ${i + 1} - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç ${orderItemData.productId} –ø–æ API...`);
          
          try {
            const productResponse = await fetch(
              `${STRAPI_URL}/api/products/${orderItemData.productId}?fields[0]=mainPhoto&fields[1]=name`,
              { headers: { 'Content-Type': 'application/json' } }
            );
            
            if (productResponse.ok) {
              const productData = await productResponse.json();
              const mainPhoto = productData.data?.attributes?.mainPhoto || productData.data?.mainPhoto;
              
              if (mainPhoto) {
                productImage = mainPhoto;
                imageSource = 'fetched_product';
                console.log(`‚úÖ ${order.orderNumber}: –¢–æ–≤–∞—Ä ${i + 1} - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ API: ${mainPhoto.substring(0, 50)}...`);
              } else {
                console.log(`‚ö†Ô∏è ${order.orderNumber}: –¢–æ–≤–∞—Ä ${i + 1} - —É –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç mainPhoto`);
              }
            } else {
              console.log(`‚ùå ${order.orderNumber}: –¢–æ–≤–∞—Ä ${i + 1} - –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (${productResponse.status})`);
            }
          } catch (error) {
            console.error(`‚ùå ${order.orderNumber}: –¢–æ–≤–∞—Ä ${i + 1} - –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:`, error);
          }
        }

        // ‚úÖ –°–û–ó–î–ê–ï–ú –¢–û–í–ê–† –° –í–°–ï–ô –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô
        const item = {
          id: orderItemData.id.toString(),
          productName: orderItemData.productName || orderItemData.product?.name || orderItemData.product?.attributes?.name || `–¢–æ–≤–∞—Ä ${orderItemData.productId}`,
          quantity: orderItemData.quantity || 1,
          size: orderItemData.size?.value || orderItemData.size?.attributes?.value || 'ONE SIZE',
          priceAtTime: parseFloat(orderItemData.priceAtTime) || 0,
          productImage
        };

        items.push(item);

        console.log(`üìã ${order.orderNumber}: –¢–æ–≤–∞—Ä ${i + 1} —Å–æ–∑–¥–∞–Ω:`, {
          name: item.productName,
          size: item.size,
          quantity: item.quantity,
          imageSource: imageSource,
          hasRealImage: item.productImage !== '/api/placeholder/98/50',
          finalImageUrl: item.productImage === '/api/placeholder/98/50' ? 'placeholder' : `${item.productImage.substring(0, 50)}...`
        });
      }

      // ‚úÖ –®–ê–ì 5: –°–û–ó–î–ê–ï–ú –ó–ê–ö–ê–ó –° –í–°–ï–ú–ò –¢–û–í–ê–†–ê–ú–ò
      const orderResult = {
        id: order.id.toString(),
        orderNumber: order.orderNumber,
        totalAmount: parseFloat(order.totalAmount) || 0,
        orderStatus: order.orderStatus || 'pending',
        paymentStatus: order.paymentStatus || 'pending',
        deliveryMethod: order.deliveryMethod || '',
        paymentMethod: order.paymentMethod || '',
        deliveryAddress: order.deliveryAddress || '',
        customerName: order.customerName || '',
        customerPhone: order.customerPhone || '',
        customerEmail: order.customerEmail || '',
        notes: order.notes || '',
        createdAt: order.createdAt,
        items
      };

      console.log(`üìã ${order.orderNumber}: –ò–¢–û–ì–û–í–´–ô –ó–ê–ö–ê–ó:`, {
        totalItems: items.length,
        itemsWithImages: items.filter(item => item.productImage !== '/api/placeholder/98/50').length,
        itemsWithPlaceholders: items.filter(item => item.productImage === '/api/placeholder/98/50').length,
        populateSource: workingPopulateField || 'separate_fetch'
      });

      orders.push(orderResult);
    }

    // ‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    console.log('\nüéØ === –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    const totalItems = orders.reduce((sum, order) => sum + order.items.length, 0);
    const itemsWithImages = orders.reduce((sum, order) => 
      sum + order.items.filter((item: { productImage: string; }) => item.productImage !== '/api/placeholder/98/50').length, 0
    );
    const itemsWithPlaceholders = orders.reduce((sum, order) => 
      sum + order.items.filter((item: { productImage: string; }) => item.productImage === '/api/placeholder/98/50').length, 0
    );
    const ordersWithoutItems = orders.filter(o => o.items.length === 0).length;
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);
    console.log(`üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalItems}`);
    console.log(`üìä –¢–æ–≤–∞—Ä–æ–≤ —Å —Ñ–æ—Ç–æ: ${itemsWithImages}`);
    console.log(`üìä –¢–æ–≤–∞—Ä–æ–≤ —Å placeholder: ${itemsWithPlaceholders}`);
    console.log(`üìä –ó–∞–∫–∞–∑–æ–≤ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤: ${ordersWithoutItems}`);
    console.log(`üìä –†–∞–±–æ—á–µ–µ –ø–æ–ª–µ populate: ${workingPopulateField || '–ù–ï–¢'}`);

    return NextResponse.json({
      success: true,
      orders,
      count: orders.length,
      totalOrderItems: allOrderItems.length,
      debug: {
        totalOrders: orders.length,
        totalItems: totalItems,
        itemsWithImages: itemsWithImages,
        itemsWithPlaceholders: itemsWithPlaceholders,
        ordersWithoutItems: ordersWithoutItems,
        workingPopulateField: workingPopulateField,
        orderIds: ordersData.data?.map((o: any) => o.id) || [],
        orderItemOrderIds: allOrderItems.map((item: any) => item.orderId).filter(Boolean)
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}