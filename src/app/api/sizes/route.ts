// src/app/api/sizes/route.ts - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { NextRequest, NextResponse } from 'next/server';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
const deduplicateAndSortSizes = (sizes: string[]): string[] => {
  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
  const uniqueSizes = [...new Set(sizes)];
  
  // –ü–æ—Ä—è–¥–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–¥–µ–∂–¥—ã
  const clothingSizeOrder = ['XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL'];
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
  return uniqueSizes.sort((a, b) => {
    const aUpper = a.toUpperCase();
    const bUpper = b.toUpperCase();
    
    // –ï—Å–ª–∏ –æ–±–∞ —Ä–∞–∑–º–µ—Ä–∞ - —ç—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –æ–¥–µ–∂–¥—ã
    const aIndex = clothingSizeOrder.indexOf(aUpper);
    const bIndex = clothingSizeOrder.indexOf(bUpper);
    
    if (aIndex !== -1 && bIndex !== -1) {
      return aIndex - bIndex;
    }
    
    // –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ - —Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã, –æ–Ω –∏–¥–µ—Ç –ø–æ—Å–ª–µ —á–∏—Å–ª–æ–≤—ã—Ö
    if (aIndex !== -1) return 1;
    if (bIndex !== -1) return -1;
    
    // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —á–∏—Å–ª–∞
    const numA = parseFloat(a);
    const numB = parseFloat(b);
    
    // –ï—Å–ª–∏ –æ–±–∞ —á–∏—Å–ª–∞ - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ —á–∏—Å–ª–∞
    if (!isNaN(numA) && !isNaN(numB)) {
      return numA - numB;
    }
    
    // –ï—Å–ª–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ, –∞ –¥—Ä—É–≥–æ–µ –Ω–µ—Ç
    if (!isNaN(numA)) return -1; // —á–∏—Å–ª–∞ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
    if (!isNaN(numB)) return 1;
    
    // –ò–Ω–∞—á–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
    return a.localeCompare(b);
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
const getAllSizesFromStrapi = async () => {
  console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Ä–∞–∑–º–µ—Ä—ã –∏–∑ Strapi...');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  const firstPageUrl = `${STRAPI_URL}/api/sizes?pagination[page]=1&pagination[pageSize]=100`;
  const firstResponse = await fetch(firstPageUrl, {
    headers: { 'Content-Type': 'application/json' },
    next: { revalidate: 300 }
  });

  if (!firstResponse.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤: ${firstResponse.status}`);
  }

  const firstData = await firstResponse.json();
  const totalItems = firstData.meta?.pagination?.total || 0;
  const pageSize = 100;
  const totalPages = Math.ceil(totalItems / pageSize);
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${totalItems} —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–∞ ${totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö`);

  let allSizes = firstData.data || [];

  // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  if (totalPages > 1) {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ ${totalPages - 1} —Å—Ç—Ä–∞–Ω–∏—Ü...`);
    
    const pagePromises = [];
    for (let page = 2; page <= totalPages; page++) {
      const pageUrl = `${STRAPI_URL}/api/sizes?pagination[page]=${page}&pagination[pageSize]=${pageSize}`;
      pagePromises.push(
        fetch(pageUrl, {
          headers: { 'Content-Type': 'application/json' },
          next: { revalidate: 300 }
        }).then(response => response.json())
      );
    }
    
    const pagesData = await Promise.all(pagePromises);
    pagesData.forEach((pageData, index) => {
      if (pageData.data && Array.isArray(pageData.data)) {
        allSizes = [...allSizes, ...pageData.data];
        console.log(`üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${index + 2}: +${pageData.data.length} —Ä–∞–∑–º–µ—Ä–æ–≤`);
      }
    });
  }

  return allSizes;
};

export async function GET() {
  try {
    console.log('üîÑ API: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ sizes...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Ä–∞–∑–º–µ—Ä—ã –∏–∑ Strapi
    const allStrapiSizes = await getAllSizesFromStrapi();
    
    console.log(`üì¶ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ Strapi: ${allStrapiSizes.length}`);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
    const sizeValues: string[] = [];
    
    allStrapiSizes.forEach((item: any) => {
      const sizeValue = item.value || item.attributes?.value;
      if (sizeValue) {
        sizeValues.push(sizeValue.toString());
      }
    });

    console.log('üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:', sizeValues);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    const uniqueSortedSizes = deduplicateAndSortSizes(sizeValues);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    const sizes = uniqueSortedSizes.map((size, index) => ({
      id: index + 1,
      name: size,
      slug: size.toString(),
      type: isNaN(parseFloat(size)) ? 'clothing' : 'shoe',
      order: index
    }));

    return NextResponse.json({
      sizes,
      total: sizes.length,
      debug: {
        strapiSizesCount: allStrapiSizes.length,
        rawSizesCount: sizeValues.length,
        uniqueSizesCount: uniqueSortedSizes.length,
        finalSizes: uniqueSortedSizes
      },
      message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allStrapiSizes.length} —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ Strapi, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueSortedSizes.length}`
    });

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤:', error);
    
    return NextResponse.json(
      {
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Strapi',
        sizes: [],
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}