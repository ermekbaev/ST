// –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª src/app/raw-debug/page.tsx
'use client';

import { useState, useEffect } from 'react';

export default function RawCSVDebugPage() {
  const [rawCSV, setRawCSV] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState<string>('TS-1011055');

  useEffect(() => {
    const fetchRawCSV = async () => {
      try {
        setLoading(true);
        
        const SHEET_ID = '1naTkxDrQFfj_d7Q2U46GOj24hSqTAqrt_Yz1ImaKyVc';
        const response = await fetch(
          `https://docs.google.com/spreadsheets/d/${SHEET_ID}/export?format=csv&gid=0`,
          { cache: 'no-store' }
        );

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const csvText = await response.text();
        setRawCSV(csvText);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV:', error);
        setError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      } finally {
        setLoading(false);
      }
    };

    fetchRawCSV();
  }, []);

  // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω
  const findRelevantLines = (csv: string, term: string): string[] => {
    const lines = csv.split('\n');
    const relevantLines: string[] = [];
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.includes(term)) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (i > 0) {
          relevantLines.push(`[${i}] ${lines[i - 1]}`);
        }
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º—É —Å—Ç—Ä–æ–∫—É
        relevantLines.push(`[${i + 1}] ${line}`);
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (i < lines.length - 1) {
          relevantLines.push(`[${i + 2}] ${lines[i + 1]}`);
        }
        relevantLines.push('---');
      }
    }
    
    return relevantLines;
  };

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—è—Ç—ã—Ö –≤ —Å—Ç—Ä–æ–∫–∞—Ö
  const analyzeCSVStructure = (csv: string): { line: number; commas: number; content: string }[] => {
    const lines = csv.split('\n');
    const analysis: { line: number; commas: number; content: string }[] = [];
    
    for (let i = 0; i < Math.min(lines.length, 20); i++) {
      const line = lines[i];
      const commas = (line.match(/,/g) || []).length;
      analysis.push({
        line: i + 1,
        commas,
        content: line.substring(0, 100) + '...'
      });
    }
    
    return analysis;
  };

  // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const findLinesWithImages = (csv: string): string[] => {
    const lines = csv.split('\n');
    const imageLines: string[] = [];
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.includes('cdn-img.thepoizon.ru') || line.includes('https://')) {
        imageLines.push(`[–°—Ç—Ä–æ–∫–∞ ${i + 1}] ${line}`);
      }
    }
    
    return imageLines.slice(0, 10); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-xl text-gray-900">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—ã—Ä—ã—Ö CSV –¥–∞–Ω–Ω—ã—Ö...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-xl text-red-600">–û—à–∏–±–∫–∞: {error}</div>
      </div>
    );
  }

  const relevantLines = findRelevantLines(rawCSV, searchTerm);
  const structureAnalysis = analyzeCSVStructure(rawCSV);
  const imageLinesAnalysis = findLinesWithImages(rawCSV);

  return (
    <div className="min-h-screen bg-gray-50 p-4 text-black">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-3xl font-bold mb-6 text-center text-gray-900">
          –ê–Ω–∞–ª–∏–∑ —Å—ã—Ä—ã—Ö CSV –¥–∞–Ω–Ω—ã—Ö
        </h1>
        
        {/* –ü–æ–∏—Å–∫ */}
        <div className="mb-6 p-4 bg-white rounded-lg shadow">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ü–æ–∏—Å–∫ –≤ CSV (–∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ):
          </label>
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full border rounded px-3 py-2"
            placeholder="TS-1011055"
          />
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CSV */}
        <div className="mb-6 p-4 bg-blue-50 rounded-lg">
          <h2 className="text-xl font-semibold mb-2 text-gray-900">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CSV:</h2>
          <p className="text-gray-800">–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {rawCSV.length.toLocaleString()} —Å–∏–º–≤–æ–ª–æ–≤</p>
          <p className="text-gray-800">–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {rawCSV.split('\n').length.toLocaleString()}</p>
          <p className="text-gray-800">–°—Ç—Ä–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {imageLinesAnalysis.length}</p>
        </div>

        {/* –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫) */}
        <div className="mb-6 p-4 bg-yellow-50 rounded-lg">
          <h2 className="text-xl font-semibold mb-2 text-gray-900">–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫):</h2>
          <div className="text-xs space-y-1">
            {structureAnalysis.map((item, i) => (
              <div key={i} className={`p-2 rounded ${
                item.commas < 8 ? 'bg-red-100' : item.commas > 12 ? 'bg-orange-100' : 'bg-green-100'
              }`}>
                <strong>–°—Ç—Ä–æ–∫–∞ {item.line}:</strong> {item.commas} –∑–∞–ø—è—Ç—ã—Ö - {item.content}
              </div>
            ))}
          </div>
          <p className="text-sm text-gray-600 mt-2">
            üî¥ –ö—Ä–∞—Å–Ω–æ–µ: –º–µ–Ω–µ–µ 8 –∑–∞–ø—è—Ç—ã—Ö (–Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            üü† –û—Ä–∞–Ω–∂–µ–≤–æ–µ: –±–æ–ª–µ–µ 12 –∑–∞–ø—è—Ç—ã—Ö (–ª–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ)
            üü¢ –ó–µ–ª–µ–Ω–æ–µ: 8-12 –∑–∞–ø—è—Ç—ã—Ö (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)
          </p>
        </div>

        {/* –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ */}
        {relevantLines.length > 0 && (
          <div className="mb-6 p-4 bg-green-50 rounded-lg">
            <h2 className="text-xl font-semibold mb-2 text-gray-900">
              –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å "{searchTerm}": {relevantLines.length}
            </h2>
            <div className="text-xs space-y-2 max-h-96 overflow-y-auto">
              {relevantLines.map((line, i) => (
                <div key={i} className="p-2 bg-white rounded border break-all">
                  {line}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –°—Ç—Ä–æ–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ */}
        <div className="mb-6 p-4 bg-purple-50 rounded-lg">
          <h2 className="text-xl font-semibold mb-2 text-gray-900">
            –°—Ç—Ä–æ–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–ø–µ—Ä–≤—ã–µ 10):
          </h2>
          <div className="text-xs space-y-2 max-h-96 overflow-y-auto">
            {imageLinesAnalysis.map((line, i) => (
              <div key={i} className="p-2 bg-white rounded border break-all">
                {line}
              </div>
            ))}
          </div>
        </div>

        {/* –°—ã—Ä–æ–π CSV (–ø–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫) */}
        <div className="mb-6 p-4 bg-gray-100 rounded-lg">
          <h2 className="text-xl font-semibold mb-2 text-gray-900">
            –°—ã—Ä–æ–π CSV (–ø–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫):
          </h2>
          <pre className="text-xs bg-white p-4 rounded border max-h-96 overflow-auto whitespace-pre-wrap">
            {rawCSV.split('\n').slice(0, 50).join('\n')}
          </pre>
        </div>
      </div>
    </div>
  );
}