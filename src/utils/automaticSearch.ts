// =============================================
// –ú–û–î–£–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° JSON –°–õ–û–í–ê–†–Ø–ú–ò
// src/utils/automaticSearch.ts
// =============================================

import brandsDictionary from '@/data/searchDictionaries/brands.json';
import categoriesDictionary from '@/data/searchDictionaries/categories.json';

interface Product {
  id?: string;
  article: string;
  brand: string;
  name: string;
  size: string;
  category: string;
  gender: string;
  price: number;
  photo: string;
  sizes?: string[];
}

interface SearchResult {
  product: Product;
  score: number;
  matchType: string[];
}

interface SearchStats {
  query: string;
  totalProducts: number;
  foundProducts: number;
  executionTime: number;
  topMatches: Array<{name: string, brand: string, score: number}>;
}

// =============================================
// –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–õ–û–í–ê–†–Ø–ú–ò
// =============================================
class DictionaryService {
  private flatBrandsDictionary: Record<string, string[]> = {};
  private flatCategoriesDictionary: Record<string, string[]> = {};

  constructor() {
    this.initializeDictionaries();
  }

  private initializeDictionaries() {
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –±—Ä–µ–Ω–¥—ã –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å
    const allBrands = {
      ...brandsDictionary.sportsBrands,
      ...brandsDictionary.luxuryBrands,
      ...brandsDictionary.streetwearBrands,
      ...brandsDictionary.otherBrands,
      ...brandsDictionary.reverseMappings
    };

    this.flatBrandsDictionary = allBrands;

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const allCategories = {
      ...categoriesDictionary.footwear,
      ...categoriesDictionary.clothing,
      ...categoriesDictionary.accessories,
      ...categoriesDictionary.collectibles,
      ...categoriesDictionary.seasonal,
      ...categoriesDictionary.genderMapping,
      ...categoriesDictionary.reverseMappings
    };

    this.flatCategoriesDictionary = allCategories;

    console.log('üìö –°–ª–æ–≤–∞—Ä–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
      brands: Object.keys(this.flatBrandsDictionary).length,
      categories: Object.keys(this.flatCategoriesDictionary).length
    });
  }

  getBrandTranslations(brand: string): string[] {
    return this.flatBrandsDictionary[brand.toLowerCase()] || [];
  }

  getCategoryTranslations(category: string): string[] {
    return this.flatCategoriesDictionary[category.toLowerCase()] || [];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞
  getAllVariants(term: string): string[] {
    const normalized = this.normalizeText(term);
    const variants = new Set([normalized]);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –±—Ä–µ–Ω–¥–æ–≤
    const brandTranslations = this.getBrandTranslations(normalized);
    brandTranslations.forEach(t => variants.add(t));

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categoryTranslations = this.getCategoryTranslations(normalized);
    categoryTranslations.forEach(t => variants.add(t));

    return Array.from(variants);
  }

  normalizeText(text: string): string {
    return text
      .toLowerCase()
      .trim()
      .replace(/—ë/g, '–µ')
      .replace(/[^\w–∞-—è—ë]/gi, ' ')
      .replace(/\s+/g, ' ')
      .trim();
  }
}

// =============================================
// –ö–õ–ê–°–° –î–õ–Ø –ü–û–ò–°–ö–ê
// =============================================
class SearchService {
  private dictionary: DictionaryService;

  constructor() {
    this.dictionary = new DictionaryService();
  }

  // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
  search(products: Product[], searchQuery: string): Product[] {
    if (!searchQuery.trim()) return products;

    const startTime = performance.now();
    console.log('üîç –ú–æ–¥—É–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è:', searchQuery);

    const results = this.performSearch(products, searchQuery);
    const executionTime = performance.now() - startTime;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats: SearchStats = {
      query: searchQuery,
      totalProducts: products.length,
      foundProducts: results.length,
      executionTime: Math.round(executionTime),
      topMatches: results.slice(0, 3).map(r => ({
        name: r.product.name,
        brand: r.product.brand,
        score: r.score
      }))
    };

    this.logSearchStats(stats);
    return results.map(r => r.product);
  }

  private performSearch(products: Product[], query: string): SearchResult[] {
    const normalizedQuery = this.dictionary.normalizeText(query);
    const queryWords = normalizedQuery.split(' ').filter(w => w.length > 1);
    
    const results: SearchResult[] = [];

    products.forEach(product => {
      const match = this.calculateProductScore(product, queryWords, query);
      
      if (match.score > 0) {
        results.push({
          product,
          score: match.score,
          matchType: match.reasons
        });
      }
    });

    return results.sort((a, b) => b.score - a.score);
  }

  private calculateProductScore(product: Product, queryWords: string[], originalQuery: string) {
    let totalScore = 0;
    const reasons: string[] = [];

    const normalizedProduct = {
      name: this.dictionary.normalizeText(product.name),
      brand: this.dictionary.normalizeText(product.brand),
      category: this.dictionary.normalizeText(product.category),
      gender: this.dictionary.normalizeText(product.gender)
    };

    // 1. –ü–û–ò–°–ö –ü–û –ë–†–ï–ù–î–ê–ú (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    for (const word of queryWords) {
      // –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      if (normalizedProduct.brand.includes(word)) {
        totalScore += 30;
        reasons.push(`–±—Ä–µ–Ω–¥: ${word}`);
        continue;
      }

      // –ß–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
      const brandVariants = this.dictionary.getAllVariants(word);
      for (const variant of brandVariants) {
        if (normalizedProduct.brand.includes(variant) && variant !== word) {
          totalScore += 35;
          reasons.push(`–±—Ä–µ–Ω–¥ (–ø–µ—Ä–µ–≤–æ–¥): ${word} ‚Üí ${variant}`);
          break;
        }
      }
    }

    // 2. –ü–û–ò–°–ö –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú
    for (const word of queryWords) {
      // –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      if (normalizedProduct.category.includes(word)) {
        totalScore += 20;
        reasons.push(`–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${word}`);
        continue;
      }

      // –ß–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
      const categoryVariants = this.dictionary.getAllVariants(word);
      for (const variant of categoryVariants) {
        if (normalizedProduct.category.includes(variant) && variant !== word) {
          totalScore += 25;
          reasons.push(`–∫–∞—Ç–µ–≥–æ—Ä–∏—è (–ø–µ—Ä–µ–≤–æ–¥): ${word} ‚Üí ${variant}`);
          break;
        }
      }
    }

    // 3. –ü–û–ò–°–ö –ü–û –ù–ê–ó–í–ê–ù–ò–Æ
    for (const word of queryWords) {
      if (normalizedProduct.name.includes(word)) {
        totalScore += 15;
        reasons.push(`–Ω–∞–∑–≤–∞–Ω–∏–µ: ${word}`);
      }
    }

    // 4. –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ò
    totalScore += this.getSpecialBonuses(originalQuery, product, reasons);

    return { score: totalScore, reasons };
  }

  private getSpecialBonuses(query: string, product: Product, reasons: string[]): number {
    let bonus = 0;
    const normalizedQuery = this.dictionary.normalizeText(query);
    const normalizedBrand = this.dictionary.normalizeText(product.brand);

    // –ó–∏–º–Ω—è—è –æ–±—É–≤—å = UGG + Timberland –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (normalizedQuery.includes('–∑–∏–º–Ω—è—è –æ–±—É–≤—å') || 
        (normalizedQuery.includes('–∑–∏–º–Ω') && normalizedQuery.includes('–æ–±—É–≤'))) {
      
      const winterBrands = ['ugg', 'timberland', 'sorel'];
      for (const brand of winterBrands) {
        if (normalizedBrand.includes(brand)) {
          bonus += 40;
          reasons.push(`–∑–∏–º–Ω–∏–π –±—Ä–µ–Ω–¥: ${brand}`);
          break;
        }
      }
    }

    // –£–ì–ì–∏ = UGG —Ç–æ–≤–∞—Ä—ã
    if (normalizedQuery.includes('—É–≥–≥–∏') || normalizedQuery.includes('—É–≥–≥')) {
      if (normalizedBrand.includes('ugg')) {
        bonus += 40;
        reasons.push('UGG —Ç–æ–≤–∞—Ä');
      }
    }

    // –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –æ–±—É–≤—å = –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ø–æ—Ä—Ç-–±—Ä–µ–Ω–¥—ã
    if ((normalizedQuery.includes('—Å–ø–æ—Ä—Ç') && normalizedQuery.includes('–æ–±—É–≤')) ||
        normalizedQuery.includes('–∫—Ä–æ—Å—Å–æ–≤–∫–∏')) {
      
      const sportBrands = ['nike', 'adidas', 'puma', 'reebok'];
      for (const brand of sportBrands) {
        if (normalizedBrand.includes(brand)) {
          bonus += 30;
          reasons.push(`—Å–ø–æ—Ä—Ç-–±—Ä–µ–Ω–¥: ${brand}`);
          break;
        }
      }
    }

    return bonus;
  }

  private logSearchStats(stats: SearchStats) {
    console.log(`‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${stats.foundProducts}/${stats.totalProducts} –∑–∞ ${stats.executionTime}–º—Å`);
    
    if (stats.topMatches.length > 0) {
      console.log('üî• –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
      stats.topMatches.forEach((match, i) => {
        console.log(`  ${i+1}. "${match.name}" (${match.brand}) - ${match.score} –±–∞–ª–ª–æ–≤`);
      });
    }
  }
}

// =============================================
// –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú–´–ï –§–£–ù–ö–¶–ò–ò
// =============================================
const searchService = new SearchService();

export const fullyAutomaticSearch = (products: Product[], searchQuery: string): Product[] => {
  return searchService.search(products, searchQuery);
};

// –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
export const simpleSearch = (products: Product[], searchQuery: string): Product[] => {
  if (!searchQuery.trim()) return products;
  
  const dictionary = new DictionaryService();
  const normalizedQuery = dictionary.normalizeText(searchQuery);
  
  return products.filter(product => {
    const normalizedProduct = {
      name: dictionary.normalizeText(product.name),
      brand: dictionary.normalizeText(product.brand),
      category: dictionary.normalizeText(product.category)
    };

    // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    const allVariants = dictionary.getAllVariants(normalizedQuery);
    
    return allVariants.some(variant => 
      normalizedProduct.name.includes(variant) ||
      normalizedProduct.brand.includes(variant) ||
      normalizedProduct.category.includes(variant)
    );
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏ –≤ –±—É–¥—É—â–µ–º)
export const addBrandTranslation = (brand: string, translations: string[]) => {
  console.log(`üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –±—Ä–µ–Ω–¥–∞: ${brand} ‚Üí ${translations.join(', ')}`);
  // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON —Ñ–∞–π–ª
};

export default fullyAutomaticSearch;