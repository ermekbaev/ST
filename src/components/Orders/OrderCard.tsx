import React, { useState } from 'react';
import { ExtendedOrder } from '@/types/orders';

interface OrderCardProps {
  order: ExtendedOrder;
  index: number;
}

const OrderCard: React.FC<OrderCardProps> = ({ order, index }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [imageError, setImageError] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã
  const [isPaymentProcessing, setIsPaymentProcessing] = useState(false);
  const [paymentError, setPaymentError] = useState<string | null>(null);

  const toggleExpansion = () => {
    setIsExpanded(!isExpanded);
  };

  const handleImageError = () => {
    setImageError(true);
  };

  const getProductImage = () => {
    if (imageError) {
      return '/api/placeholder/98/50';
    }
    return order.items[0]?.image || '/api/placeholder/98/50';
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑
  const canPayOrder = () => {
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:', {
      orderNumber: order.orderNumber || order.id,
      canPay: order.canPay,
      paymentStatus: order.paymentStatus,
      orderStatus: order.orderStatus,
      paymentMethod: order.paymentMethod
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ canPay, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å (–∏–∑ API)
    if (order.canPay !== undefined) {
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º canPay –∏–∑ API:', order.canPay);
      return order.canPay;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∏–∑ API
    const canPay = (
      order.paymentStatus === 'pending' && // –æ–ø–ª–∞—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      order.orderStatus === 'pending' &&   // –∑–∞–∫–∞–∑ –µ—â–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
      order.paymentMethod === 'card'        // –∫–∞—Ä—Ç–æ—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
    );
    
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏–∫—É:', canPay);
    return canPay;
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã
  const handlePaymentClick = async () => {
    if (isPaymentProcessing) return;
    
    setIsPaymentProcessing(true);
    setPaymentError(null);

    try {
      console.log(`üí≥ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ ${order.orderNumber || order.id}`);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
      const token = localStorage.getItem('authToken');
      if (!token) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
      const response = await fetch('/api/payments/retry', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          orderNumber: order.orderNumber || order.id,
          returnUrl: `${window.location.origin}/order-history?payment=retry&orderNumber=${order.orderNumber || order.id}`
        })
      });

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
      }

      if (!data.confirmationUrl) {
        throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã');
      }

      console.log('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º...');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      if (data.paymentId) {
        localStorage.setItem('retryPaymentId', data.paymentId);
        localStorage.setItem('retryOrderNumber', order.orderNumber || order.id);
        localStorage.setItem('paymentStartTime', Date.now().toString());
      }

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ YooKassa
      window.location.href = data.confirmationUrl;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–ø–ª–∞—Ç—ã:', error);
      setPaymentError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setIsPaymentProcessing(false);
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
  const getPaymentButtonText = () => {
    if (isPaymentProcessing) return '–û–ë–†–ê–ë–û–¢–ö–ê...';
    if (order.paymentStatus === 'failed') return '–ü–û–í–¢–û–†–ò–¢–¨ –û–ü–õ–ê–¢–£';
    return '–û–ü–õ–ê–¢–ò–¢–¨';
  };

  return (
    <div className="border-b-2 border-[#E5DDD4] last:border-b-0">
      
      {/* DESKTOP –í–ï–†–°–ò–Ø */}
      <div className="hidden lg:block">
        
        {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–∑–∞ - 4 –∫–æ–ª–æ–Ω–∫–∏ */}
        <div className="grid grid-cols-4 gap-8 py-8 items-start">
          
          {/* –ö–æ–ª–æ–Ω–∫–∞ 1: –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ + –§–æ—Ç–æ */}
          <div className="flex flex-col space-y-4">
            <div className="text-[20px] leading-[30px] font-black italic text-black">
              {order.orderNumber || order.id}
            </div>
            
            {/* –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ */}
            <div className="w-[98px] h-[50px] bg-[#E5DDD4] flex items-center justify-center overflow-hidden rounded">
              <img 
                src={getProductImage()}
                alt={order.items[0]?.productName || '–¢–æ–≤–∞—Ä'}
                className="w-full h-full object-contain bg-white"
                onError={handleImageError}
              />
            </div>
          </div>

          {/* –ö–æ–ª–æ–Ω–∫–∞ 2: –¶–µ–Ω–∞ */}
          <div className="flex items-start">
            <div className="text-[20px] leading-[30px] font-black italic text-black">
              {order.total}
            </div>
          </div>

          {/* –ö–æ–ª–æ–Ω–∫–∞ 3: –°—Ç–∞—Ç—É—Å */}
          <div className="flex items-start">
            <div className="text-[20px] leading-[30px] font-black italic text-black uppercase">
              {order.status}
            </div>
          </div>

          {/* –ö–æ–ª–æ–Ω–∫–∞ 4: –°—Ç—Ä–µ–ª–∫–∞ */}
          <div className="flex justify-end">
            <button 
              onClick={toggleExpansion}
              className="w-5 h-5 flex items-center justify-center"
            >
              <div 
                className="w-[19.85px] h-[19.85px] border-2 border-black transform transition-transform duration-300"
                style={{
                  transform: isExpanded ? 'rotate(45deg)' : 'rotate(-135deg)'
                }}
              />
            </button>
          </div>
        </div>

        {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è */}
        <div 
          className={`overflow-hidden transition-all duration-300 ease-in-out ${
            isExpanded ? 'max-h-[500px] opacity-100' : 'max-h-0 opacity-0'
          }`}
        >
          <div className="grid grid-cols-4 gap-8 pb-8">
            
            {/* –ö–æ–ª–æ–Ω–∫–∞ 1: –î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è + –¢–æ–≤–∞—Ä */}
            <div className="space-y-4">
              <div>
                <div className="text-[20px] leading-[30px] font-black italic text-black">
                  –û—Ñ–æ—Ä–º–ª–µ–Ω: {order.date}
                </div>
              </div>
              <div>
                <div className="text-[20px] leading-[27px] text-black">
                  {order.items[0]?.productName || '–¢–æ–≤–∞—Ä'} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {order.items[0]?.quantity || 1}
                </div>
              </div>
            </div>

            {/* –ö–æ–ª–æ–Ω–∫–∞ 2: –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ */}
            <div>
              <div className="text-[20px] leading-[30px] font-black italic text-black uppercase mb-2">
                –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
              </div>
              <div className="space-y-1">
                <div className="text-[15px] leading-[20px] text-[#8C8072]">
                  {order.deliveryDetails?.name || order.customerName}
                </div>
                <div className="text-[15px] leading-[20px] text-[#8C8072]">
                  {order.deliveryDetails?.address || order.deliveryAddress}
                </div>
                <div className="text-[15px] leading-[20px] text-[#8C8072]">
                  {order.deliveryDetails?.email || order.customerEmail}
                </div>
              </div>
            </div>

            {/* –ö–æ–ª–æ–Ω–∫–∞ 3: –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ + –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã */}
            <div className="space-y-4">
              <div>
                <div className="text-[20px] leading-[30px] font-black italic text-black uppercase mb-2">
                  —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
                </div>
                <div className="text-[18px] leading-[24px] text-[#8C8072]">
                  {order.deliveryMethod}
                </div>
              </div>
              
              <div className="text-[18px] leading-[24px] text-[#8C8072]">
                –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.paymentMethod}
              </div>
              
              {/* –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã */}
              {canPayOrder() && (
                <div className="space-y-2">
                  <button 
                    onClick={handlePaymentClick}
                    disabled={isPaymentProcessing}
                    className={`w-[336px] h-[50px] text-white text-[20px] leading-[27px] transition-colors ${
                      isPaymentProcessing 
                        ? 'bg-gray-500 cursor-not-allowed' 
                        : 'bg-[#0B0B0D] hover:bg-gray-800'
                    }`}
                  >
                    {getPaymentButtonText()}
                  </button>
                  
                  {paymentError && (
                    <div className="text-red-500 text-[14px] leading-[18px]">
                      {paymentError}
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* –ö–æ–ª–æ–Ω–∫–∞ 4: –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É */}
            <div>
              <div className="text-[20px] leading-[30px] font-black italic text-black uppercase mb-2">
                –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É
              </div>
              <div className="text-[18px] leading-[24px] text-[#8C8072]">
                {order.notes || '‚Äî'}
              </div>
            </div>

          </div>
        </div>

      </div>

      {/* MOBILE –í–ï–†–°–ò–Ø */}
      <div className="block lg:hidden py-4">
        
        {/* –ì–õ–ê–í–ù–´–ô –ë–õ–û–ö –î–û –î–ï–¢–ê–õ–ï–ô */}
        <div className="flex justify-between items-start mb-4">
          
          {/* –õ–ï–í–´–ô –ë–õ–û–ö: –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ + –§–æ—Ç–æ + –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–µ–µ */}
          <div className="flex flex-col space-y-3">
            {/* –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ */}
            <div className="text-[15px] leading-[22px] font-black italic text-black">
              {order.orderNumber || order.id}
            </div>
            
            {/* –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ */}
            <div className="w-[98px] h-[50px] bg-[#E5DDD4] flex items-center justify-center overflow-hidden rounded">
              <img 
                src={getProductImage()}
                alt={order.items[0]?.productName || '–¢–æ–≤–∞—Ä'}
                className="w-full h-full object-cover"
                onError={handleImageError}
              />
            </div>
            
            {/* –ö–Ω–æ–ø–∫–∞ "–ü–û–î–†–û–ë–ù–ï–ï" */}
            <button 
              onClick={toggleExpansion}
              className="text-[15px] leading-[22px] font-black italic text-[#BFB3A3] uppercase text-left"
            >
              –ü–û–î–†–û–ë–ù–ï–ï
            </button>
          </div>

          {/* –ü–†–ê–í–´–ô –ë–õ–û–ö: –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ */}
          <div className="text-[10px] leading-[15px] font-black italic text-black uppercase max-w-[162px] text-right">
            {order.status}
          </div>
        </div>

        {/* –î–ï–¢–ê–õ–ò (—Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è 5-6 –±–ª–æ–∫–æ–≤) */}
        <div 
          className={`overflow-hidden transition-all duration-300 ease-in-out ${
            isExpanded ? 'max-h-[600px] opacity-100' : 'max-h-0 opacity-0'
          }`}
        >
          <div className="space-y-4 pt-2">
            
            {/* –ë–õ–û–ö 1: –û—Ñ–æ—Ä–º–ª–µ–Ω/–¥–∞—Ç–∞ + –ò–¢–û–ì–û/—Ü–µ–Ω–∞ */}
            <div className="space-y-2">
              {/* –û—Ñ–æ—Ä–º–ª–µ–Ω + –¥–∞—Ç–∞ (flex justify-around) */}
              <div className="flex justify-between items-center">
                <span className="text-[15px] leading-[22px] font-black italic text-black">–û—Ñ–æ—Ä–º–ª–µ–Ω:</span>
                <span className="text-[15px] leading-[22px] font-black italic text-black">{order.date}</span>
              </div>
              
              {/* –ò–¢–û–ì–û + —Ü–µ–Ω–∞ (flex justify-around) */}
              <div className="flex justify-between items-center">
                <span className="text-[15px] leading-[22px] font-black italic text-black">–ò–¢–û–ì–û</span>
                <span className="text-[15px] leading-[22px] font-black italic text-black">{order.total}</span>
              </div>
            </div>

            {/* –ë–õ–û–ö 2: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–≤–µ—Ä—Ö—É + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∏–∑—É */}
            <div>
              <div className="text-[15px] leading-[20px] text-black mb-1">
                {order.items[0]?.productName || '–¢–æ–≤–∞—Ä'}
              </div>
              <div className="text-[15px] leading-[20px] text-[#8C8072]">
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {order.items[0]?.quantity || 1}
              </div>
            </div>

            {/* –ë–õ–û–ö 3: –î–ï–¢–ê–õ–ò –î–û–°–¢–ê–í–ö–ò –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∏–º—è/–∞–¥—Ä–µ—Å/–ø–æ—á—Ç–∞ –ø–æ–¥ –Ω–∏–º */}
            <div>
              <div className="text-[15px] leading-[22px] font-black italic text-black uppercase mb-2">
                –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
              </div>
              <div className="space-y-1">
                <div className="text-[10px] leading-[14px] text-[#8C8072] max-w-[300px]">
                  {order.deliveryDetails?.name || order.customerName}
                </div>
                <div className="text-[10px] leading-[14px] text-[#8C8072] max-w-[300px]">
                  {order.deliveryDetails?.address || order.deliveryAddress}
                </div>
                <div className="text-[10px] leading-[14px] text-[#8C8072] max-w-[300px]">
                  {order.deliveryDetails?.email || order.customerEmail}
                </div>
              </div>
            </div>

            {/* –ë–õ–û–ö 4: –°–ü–û–°–û–ë –î–û–°–¢–ê–í–ö–ò –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –¥–∞—Ç–∞/–≤—Ä–µ–º—è –∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ–¥ –Ω–∏–º */}
            <div>
              <div className="text-[15px] leading-[22px] font-black italic text-black uppercase mb-2">
                —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
              </div>
              <div className="space-y-1">
                <div className="text-[10px] leading-[14px] text-[#8C8072]">
                  {order.deliveryMethod}
                </div>
                <div className="text-[10px] leading-[14px] text-[#8C8072]">
                  –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.paymentMethod}
                </div>
              </div>
            </div>

            {/* –ë–õ–û–ö 5: –ü–†–ò–ú–ï–ß–ê–ù–ò–ï –ö –ó–ê–ö–ê–ó–£ –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Ç–µ–∫—Å—Ç –ø–æ–¥ –Ω–∏–º */}
            <div>
              <div className="text-[15px] leading-[22px] font-black italic text-black uppercase mb-2">
                –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É
              </div>
              <div className="text-[10px] leading-[14px] text-[#8C8072] max-w-[300px]">
                {order.notes || '‚Äî'}
              </div>
            </div>

            {/* –ë–õ–û–ö 6: –ö–Ω–æ–ø–∫–∞ –û–ü–õ–ê–¢–ò–¢–¨ */}
            {canPayOrder() && (
              <div className="pt-4 space-y-2">
                <button 
                  onClick={handlePaymentClick}
                  disabled={isPaymentProcessing}
                  className={`w-full h-[50px] text-white text-[20px] leading-[27px] transition-colors ${
                    isPaymentProcessing 
                      ? 'bg-gray-500 cursor-not-allowed' 
                      : 'bg-[#0B0B0D] hover:bg-gray-800'
                  }`}
                >
                  {getPaymentButtonText()}
                </button>
                
                {paymentError && (
                  <div className="text-red-500 text-[12px] leading-[16px] max-w-[300px]">
                    {paymentError}
                  </div>
                )}
              </div>
            )}

          </div>
        </div>

      </div>
    </div>
  );
};

export default OrderCard;