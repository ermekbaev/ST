// src/components/Checkout/PaymentSection.tsx
'use client';

import React from 'react';
import { UseFormReturn } from 'react-hook-form';

interface PaymentOption {
  id: string;
  name: string;
  description?: string;
}

interface PaymentSectionProps {
  form: UseFormReturn<any>;
  isMobile?: boolean;
  paymentOptions?: PaymentOption[];
}

const PaymentSection: React.FC<PaymentSectionProps> = ({ 
  form, 
  isMobile = false, 
  paymentOptions = [] 
}) => {
  const { register, watch, setValue } = form;
  
  // –§–æ–ª–ª–±—ç–∫ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ–ø—Ü–∏—è–º –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã–µ
  const defaultOptions: PaymentOption[] = [
    { 
      id: 'card', 
      name: '–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π (–ú–ò–†, VISA, MasterCard)',
      description: '–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π'
    },
    { 
      id: 'cash_vladivostok', 
      name: '–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –≤ –≥–æ—Ä–æ–¥–µ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
      description: '–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'
    }
  ];

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ñ–æ–ª–ª–±—ç–∫
  const options = paymentOptions && paymentOptions.length > 0 ? paymentOptions : defaultOptions;
  const selectedPayment = watch('paymentMethod');

  const handlePaymentChange = (optionId: string) => {
    setValue('paymentMethod', optionId, { shouldValidate: true });
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
      <h2 className={isMobile ? 'checkout-section-title--mobile' : 'checkout-section-title'}>
        –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´
      </h2>

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ) */}
      {process.env.NODE_ENV === 'development' && (
        <div className="text-xs text-gray-500 p-2 bg-gray-100 rounded">
          üí≥ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {options.length}
          {paymentOptions && paymentOptions.length > 0 ? ' (–∏–∑ API)' : ' (—Ñ–æ–ª–ª–±—ç–∫)'}
        </div>
      )}

      {/* –û–ø—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã */}
      <div className="checkout-checkbox-group">
        {options.map((option) => (
          <label 
            key={option.id} 
            className="checkout-checkbox-item"
            onClick={() => handlePaymentChange(option.id)}
          >
            <input
              type="radio"
              {...register('paymentMethod')}
              value={option.id}
              className="sr-only"
              onChange={() => handlePaymentChange(option.id)}
            />
            <div 
              className={`checkout-checkbox ${selectedPayment === option.id ? 'checkout-checkbox--checked' : ''}`} 
            />
            <span className={`checkout-checkbox-label ${isMobile ? 'checkout-checkbox-label--mobile' : ''}`}>
              {option.name}
            </span>
          </label>
        ))}
      </div>
    </div>
  );
};

export default PaymentSection;