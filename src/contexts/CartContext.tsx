'use client';

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–æ–≤–∞—Ä–∞
interface Product {
  id?: string;
  article: string;
  brand: string;
  name: string;
  size: string;
  category: string;
  gender: string;
  price: number;
  photo: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
interface CartItem extends Product {
  image: any;
  title: string;
  images: any;
  quantity: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
interface CartContextType {
  items: CartItem[];
  addToCart: (product: Product) => void;
  removeFromCart: (productId: string) => void;
  updateQuantity: (productId: string, quantity: number) => void;
  clearCart: () => void;
  getTotalPrice: () => number; // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
  totalItems: number;
  totalPrice: number;
  isCartOpen: boolean;
  openCart: () => void;
  closeCart: () => void;
  toggleCart: () => void;
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
const CartContext = createContext<CartContextType>({
  items: [],
  addToCart: () => {},
  removeFromCart: () => {},
  updateQuantity: () => {},
  clearCart: () => {},
  getTotalPrice: () => 0, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  totalItems: 0,
  totalPrice: 0,
  isCartOpen: false,
  openCart: () => {},
  closeCart: () => {},
  toggleCart: () => {},
});

// –ö–ª—é—á –¥–ª—è localStorage
const CART_STORAGE_KEY = 'tigr_shop_cart';

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã
export const CartProvider = ({ children }: { children: ReactNode }) => {
  const [items, setItems] = useState<CartItem[]>([]);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [isHydrated, setIsHydrated] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    try {
      const savedCart = localStorage.getItem(CART_STORAGE_KEY);
      if (savedCart) {
        const parsedCart = JSON.parse(savedCart);
        if (Array.isArray(parsedCart)) {
          setItems(parsedCart);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage:', error);
    } finally {
      setIsHydrated(true);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (isHydrated) {
      try {
        localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(items));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage:', error);
      }
    }
  }, [items, isHydrated]);

  // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
const addToCart = (product: Product) => {
  console.log('üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', product);
  
  //@ts-ignore
  setItems(currentItems => {
    // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º ID + —Ä–∞–∑–º–µ—Ä –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    const uniqueKey = `${product.id || product.article}-${product.size}`;
    
    // –ò—â–µ–º —Ç–æ–≤–∞—Ä —Å —Ç–µ–º –∂–µ ID –ò —Ä–∞–∑–º–µ—Ä–æ–º
    const existingItem = currentItems.find(item => 
      `${item.id || item.article}-${item.size}` === uniqueKey
    );

    if (existingItem) {
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å –¢–ê–ö–ò–ú –ñ–ï –†–ê–ó–ú–ï–†–û–ú —É–∂–µ –µ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      console.log(`üì¶ –¢–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${product.size}`);
      return currentItems.map(item =>
        `${item.id || item.article}-${item.size}` === uniqueKey
          ? { ...item, quantity: item.quantity + 1 }
          : item
      );
    } else {
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º —Ä–∞–∑–º–µ—Ä–æ–º –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
      console.log(`üÜï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é: ${product.name} —Ä–∞–∑–º–µ—Ä ${product.size}`);
      return [...currentItems, { ...product, quantity: 1 }];
    }
  });
};

  // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  const removeFromCart = (productId: string) => {
    setItems(currentItems =>
      currentItems.filter(item => (item.id || item.article) !== productId)
    );
  };

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
  const updateQuantity = (productId: string, quantity: number) => {
    if (quantity <= 0) {
      removeFromCart(productId);
      return;
    }

    setItems(currentItems =>
      currentItems.map(item =>
        (item.id || item.article) === productId
          ? { ...item, quantity }
          : item
      )
    );
  };

  // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
  const clearCart = () => {
    setItems([]);
  };

  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getTotalPrice
  const getTotalPrice = (): number => {
    return isHydrated ? items.reduce((total, item) => total + (item.price * item.quantity), 0) : 0;
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ—Ä–∑–∏–Ω—ã
  const openCart = () => setIsCartOpen(true);
  const closeCart = () => setIsCartOpen(false);
  const toggleCart = () => setIsCartOpen(!isCartOpen);

  // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏)
  const totalItems = isHydrated ? items.reduce((total, item) => total + item.quantity, 0) : 0;

  // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏)
  const totalPrice = isHydrated ? items.reduce((total, item) => total + (item.price * item.quantity), 0) : 0;

  const value: CartContextType = {
    items: isHydrated ? items : [], // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏
    addToCart,
    removeFromCart,
    updateQuantity,
    clearCart,
    getTotalPrice, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ value
    totalItems,
    totalPrice,
    isCartOpen,
    openCart,
    closeCart,
    toggleCart
  };

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
export const useCart = (): CartContextType => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};